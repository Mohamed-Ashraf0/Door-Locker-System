
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003318  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00003318  000033ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800174  00800174  000034c0  2**0
                  ALLOC
  3 .stab         000031ec  00000000  00000000  000034c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000171b  00000000  00000000  000066ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007f07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008077  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000abab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b958  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bd45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c513  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 9e 15 	jmp	0x2b3c	; 0x2b3c <__vector_4>
      14:	0c 94 6b 15 	jmp	0x2ad6	; 0x2ad6 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__vector_9>
      28:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <__vector_10>
      2c:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 37       	cpi	r26, 0x7B	; 123
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <main>
      8a:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0e 19 	jmp	0x321c	; 0x321c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e5       	ldi	r26, 0x56	; 86
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1a 19 	jmp	0x3234	; 0x3234 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 36 19 	jmp	0x326c	; 0x326c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1a 19 	jmp	0x3234	; 0x3234 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 36 19 	jmp	0x326c	; 0x326c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0e 19 	jmp	0x321c	; 0x321c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e5       	ldi	r24, 0x56	; 86
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1a 19 	jmp	0x3234	; 0x3234 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 36 19 	jmp	0x326c	; 0x326c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1a 19 	jmp	0x3234	; 0x3234 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 36 19 	jmp	0x326c	; 0x326c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1a 19 	jmp	0x3234	; 0x3234 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 36 19 	jmp	0x326c	; 0x326c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3a 19 	jmp	0x3274	; 0x3274 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <main>:
//call back function
void countOneSecond(void);
/************************************
 *        main
 ************************************/
int main(){
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	c3 54       	subi	r28, 0x43	; 67
    11cc:	d0 40       	sbci	r29, 0x00	; 0
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
	/*initialization function */
	uint8 password_exist=0,password[PASSWORD_LENGTH],option=0,wrong_pass_attempt=0,check=0,people=0,door_opened=0,password_changed=0,first_time=0;
    11d8:	1a aa       	std	Y+50, r1	; 0x32
    11da:	19 aa       	std	Y+49, r1	; 0x31
    11dc:	18 aa       	std	Y+48, r1	; 0x30
    11de:	1f a6       	std	Y+47, r1	; 0x2f
    11e0:	1e a6       	std	Y+46, r1	; 0x2e
    11e2:	1d a6       	std	Y+45, r1	; 0x2d
    11e4:	1c a6       	std	Y+44, r1	; 0x2c
    11e6:	1b a6       	std	Y+43, r1	; 0x2b
	SREG |= (1<<7);
    11e8:	af e5       	ldi	r26, 0x5F	; 95
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	ef e5       	ldi	r30, 0x5F	; 95
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	80 68       	ori	r24, 0x80	; 128
    11f4:	8c 93       	st	X, r24
	UART_ConfigType uart_config = {UART_DATA_8_BITS,UART_NO_PARITY, UART_ONE_STOP_BIT,BAUD_RATE};//uart config
    11f6:	ce 01       	movw	r24, r28
    11f8:	c8 96       	adiw	r24, 0x38	; 56
    11fa:	21 96       	adiw	r28, 0x01	; 1
    11fc:	9f af       	std	Y+63, r25	; 0x3f
    11fe:	8e af       	std	Y+62, r24	; 0x3e
    1200:	21 97       	sbiw	r28, 0x01	; 1
    1202:	ee e5       	ldi	r30, 0x5E	; 94
    1204:	f1 e0       	ldi	r31, 0x01	; 1
    1206:	23 96       	adiw	r28, 0x03	; 3
    1208:	ff af       	std	Y+63, r31	; 0x3f
    120a:	ee af       	std	Y+62, r30	; 0x3e
    120c:	23 97       	sbiw	r28, 0x03	; 3
    120e:	f7 e0       	ldi	r31, 0x07	; 7
    1210:	24 96       	adiw	r28, 0x04	; 4
    1212:	ff af       	std	Y+63, r31	; 0x3f
    1214:	24 97       	sbiw	r28, 0x04	; 4
    1216:	23 96       	adiw	r28, 0x03	; 3
    1218:	ee ad       	ldd	r30, Y+62	; 0x3e
    121a:	ff ad       	ldd	r31, Y+63	; 0x3f
    121c:	23 97       	sbiw	r28, 0x03	; 3
    121e:	00 80       	ld	r0, Z
    1220:	23 96       	adiw	r28, 0x03	; 3
    1222:	8e ad       	ldd	r24, Y+62	; 0x3e
    1224:	9f ad       	ldd	r25, Y+63	; 0x3f
    1226:	23 97       	sbiw	r28, 0x03	; 3
    1228:	01 96       	adiw	r24, 0x01	; 1
    122a:	23 96       	adiw	r28, 0x03	; 3
    122c:	9f af       	std	Y+63, r25	; 0x3f
    122e:	8e af       	std	Y+62, r24	; 0x3e
    1230:	23 97       	sbiw	r28, 0x03	; 3
    1232:	21 96       	adiw	r28, 0x01	; 1
    1234:	ee ad       	ldd	r30, Y+62	; 0x3e
    1236:	ff ad       	ldd	r31, Y+63	; 0x3f
    1238:	21 97       	sbiw	r28, 0x01	; 1
    123a:	00 82       	st	Z, r0
    123c:	21 96       	adiw	r28, 0x01	; 1
    123e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1240:	9f ad       	ldd	r25, Y+63	; 0x3f
    1242:	21 97       	sbiw	r28, 0x01	; 1
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	21 96       	adiw	r28, 0x01	; 1
    1248:	9f af       	std	Y+63, r25	; 0x3f
    124a:	8e af       	std	Y+62, r24	; 0x3e
    124c:	21 97       	sbiw	r28, 0x01	; 1
    124e:	24 96       	adiw	r28, 0x04	; 4
    1250:	9f ad       	ldd	r25, Y+63	; 0x3f
    1252:	24 97       	sbiw	r28, 0x04	; 4
    1254:	91 50       	subi	r25, 0x01	; 1
    1256:	24 96       	adiw	r28, 0x04	; 4
    1258:	9f af       	std	Y+63, r25	; 0x3f
    125a:	24 97       	sbiw	r28, 0x04	; 4
    125c:	24 96       	adiw	r28, 0x04	; 4
    125e:	ef ad       	ldd	r30, Y+63	; 0x3f
    1260:	24 97       	sbiw	r28, 0x04	; 4
    1262:	ee 23       	and	r30, r30
    1264:	c1 f6       	brne	.-80     	; 0x1216 <main+0x54>
	UART_init(&uart_config);
    1266:	ce 01       	movw	r24, r28
    1268:	c8 96       	adiw	r24, 0x38	; 56
    126a:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <UART_init>
	LCD_init();
    126e:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_init>
	LCD_clearScreen();
    1272:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_clearScreen>
	LCD_displayString("Door Lock System");
    1276:	80 e6       	ldi	r24, 0x60	; 96
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LCD_displayString>
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	aa e7       	ldi	r26, 0x7A	; 122
    1284:	b3 e4       	ldi	r27, 0x43	; 67
    1286:	8f a3       	std	Y+39, r24	; 0x27
    1288:	98 a7       	std	Y+40, r25	; 0x28
    128a:	a9 a7       	std	Y+41, r26	; 0x29
    128c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    128e:	6f a1       	ldd	r22, Y+39	; 0x27
    1290:	78 a5       	ldd	r23, Y+40	; 0x28
    1292:	89 a5       	ldd	r24, Y+41	; 0x29
    1294:	9a a5       	ldd	r25, Y+42	; 0x2a
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	4a ef       	ldi	r20, 0xFA	; 250
    129c:	54 e4       	ldi	r21, 0x44	; 68
    129e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	8b a3       	std	Y+35, r24	; 0x23
    12a8:	9c a3       	std	Y+36, r25	; 0x24
    12aa:	ad a3       	std	Y+37, r26	; 0x25
    12ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12ae:	6b a1       	ldd	r22, Y+35	; 0x23
    12b0:	7c a1       	ldd	r23, Y+36	; 0x24
    12b2:	8d a1       	ldd	r24, Y+37	; 0x25
    12b4:	9e a1       	ldd	r25, Y+38	; 0x26
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e8       	ldi	r20, 0x80	; 128
    12bc:	5f e3       	ldi	r21, 0x3F	; 63
    12be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12c2:	88 23       	and	r24, r24
    12c4:	2c f4       	brge	.+10     	; 0x12d0 <main+0x10e>
		__ticks = 1;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	9a a3       	std	Y+34, r25	; 0x22
    12cc:	89 a3       	std	Y+33, r24	; 0x21
    12ce:	3f c0       	rjmp	.+126    	; 0x134e <main+0x18c>
	else if (__tmp > 65535)
    12d0:	6b a1       	ldd	r22, Y+35	; 0x23
    12d2:	7c a1       	ldd	r23, Y+36	; 0x24
    12d4:	8d a1       	ldd	r24, Y+37	; 0x25
    12d6:	9e a1       	ldd	r25, Y+38	; 0x26
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	3f ef       	ldi	r19, 0xFF	; 255
    12dc:	4f e7       	ldi	r20, 0x7F	; 127
    12de:	57 e4       	ldi	r21, 0x47	; 71
    12e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12e4:	18 16       	cp	r1, r24
    12e6:	4c f5       	brge	.+82     	; 0x133a <main+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e8:	6f a1       	ldd	r22, Y+39	; 0x27
    12ea:	78 a5       	ldd	r23, Y+40	; 0x28
    12ec:	89 a5       	ldd	r24, Y+41	; 0x29
    12ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	40 e2       	ldi	r20, 0x20	; 32
    12f6:	51 e4       	ldi	r21, 0x41	; 65
    12f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	bc 01       	movw	r22, r24
    1302:	cd 01       	movw	r24, r26
    1304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1308:	dc 01       	movw	r26, r24
    130a:	cb 01       	movw	r24, r22
    130c:	9a a3       	std	Y+34, r25	; 0x22
    130e:	89 a3       	std	Y+33, r24	; 0x21
    1310:	0f c0       	rjmp	.+30     	; 0x1330 <main+0x16e>
    1312:	88 ec       	ldi	r24, 0xC8	; 200
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	98 a3       	std	Y+32, r25	; 0x20
    1318:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    131a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    131c:	98 a1       	ldd	r25, Y+32	; 0x20
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	f1 f7       	brne	.-4      	; 0x131e <main+0x15c>
    1322:	98 a3       	std	Y+32, r25	; 0x20
    1324:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1326:	89 a1       	ldd	r24, Y+33	; 0x21
    1328:	9a a1       	ldd	r25, Y+34	; 0x22
    132a:	01 97       	sbiw	r24, 0x01	; 1
    132c:	9a a3       	std	Y+34, r25	; 0x22
    132e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1330:	89 a1       	ldd	r24, Y+33	; 0x21
    1332:	9a a1       	ldd	r25, Y+34	; 0x22
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	69 f7       	brne	.-38     	; 0x1312 <main+0x150>
    1338:	14 c0       	rjmp	.+40     	; 0x1362 <main+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    133a:	6b a1       	ldd	r22, Y+35	; 0x23
    133c:	7c a1       	ldd	r23, Y+36	; 0x24
    133e:	8d a1       	ldd	r24, Y+37	; 0x25
    1340:	9e a1       	ldd	r25, Y+38	; 0x26
    1342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	9a a3       	std	Y+34, r25	; 0x22
    134c:	89 a3       	std	Y+33, r24	; 0x21
    134e:	89 a1       	ldd	r24, Y+33	; 0x21
    1350:	9a a1       	ldd	r25, Y+34	; 0x22
    1352:	9e 8f       	std	Y+30, r25	; 0x1e
    1354:	8d 8f       	std	Y+29, r24	; 0x1d
    1356:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1358:	9e 8d       	ldd	r25, Y+30	; 0x1e
    135a:	01 97       	sbiw	r24, 0x01	; 1
    135c:	f1 f7       	brne	.-4      	; 0x135a <main+0x198>
    135e:	9e 8f       	std	Y+30, r25	; 0x1e
    1360:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(250);
	LCD_clearScreen();
    1362:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_clearScreen>

	UART_sendByte(CREATE_NEW_PASSWORD);//tell control ecu the new state
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <UART_sendByte>
    136c:	03 c0       	rjmp	.+6      	; 0x1374 <main+0x1b2>
	while(password_exist==0)//add first password
	{
		password_exist=new_Password();
    136e:	0e 94 95 0b 	call	0x172a	; 0x172a <new_Password>
    1372:	8a ab       	std	Y+50, r24	; 0x32
	LCD_displayString("Door Lock System");
	_delay_ms(250);
	LCD_clearScreen();

	UART_sendByte(CREATE_NEW_PASSWORD);//tell control ecu the new state
	while(password_exist==0)//add first password
    1374:	8a a9       	ldd	r24, Y+50	; 0x32
    1376:	88 23       	and	r24, r24
    1378:	d1 f3       	breq	.-12     	; 0x136e <main+0x1ac>
		password_exist=new_Password();
	}

	while(1)
	{
		LCD_clearScreen();
    137a:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_clearScreen>
		LCD_displayString("+ : Open Door");
    137e:	81 e7       	ldi	r24, 0x71	; 113
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LCD_displayString>
		LCD_moveCursor(1, 0);
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_moveCursor>
		LCD_displayString("- : Change Pass");
    138e:	8f e7       	ldi	r24, 0x7F	; 127
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LCD_displayString>
		option = KEYPAD_getPressedKey();
    1396:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <KEYPAD_getPressedKey>
    139a:	89 ab       	std	Y+49, r24	; 0x31

		if (option == '+') {
    139c:	89 a9       	ldd	r24, Y+49	; 0x31
    139e:	8b 32       	cpi	r24, 0x2B	; 43
    13a0:	09 f0       	breq	.+2      	; 0x13a4 <main+0x1e2>
    13a2:	68 c1       	rjmp	.+720    	; 0x1674 <main+0x4b2>
			wrong_pass_attempt=0;
    13a4:	18 aa       	std	Y+48, r1	; 0x30

			UART_sendByte(OPEN_DOOR);//tell control ecu the new state
    13a6:	83 e0       	ldi	r24, 0x03	; 3
    13a8:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <UART_sendByte>
    13ac:	59 c1       	rjmp	.+690    	; 0x1660 <main+0x49e>
			//loop until enter correct password or 3 wrong password

			while(door_opened==0 && wrong_pass_attempt<MAX_WRONG_ATTEMPT)
			{

				LCD_clearScreen();
    13ae:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_clearScreen>
				LCD_displayString("plz enter pass:");
    13b2:	8f e8       	ldi	r24, 0x8F	; 143
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LCD_displayString>
				LCD_moveCursor(1, 0);
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	60 e0       	ldi	r22, 0x00	; 0
    13be:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_moveCursor>
				Read_Password(password);//store user input password
    13c2:	ce 01       	movw	r24, r28
    13c4:	c3 96       	adiw	r24, 0x33	; 51
    13c6:	0e 94 87 0c 	call	0x190e	; 0x190e <Read_Password>
				Send_Password(password);//send this pass word to be compared with eeprom password value
    13ca:	ce 01       	movw	r24, r28
    13cc:	c3 96       	adiw	r24, 0x33	; 51
    13ce:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <Send_Password>
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	a8 ec       	ldi	r26, 0xC8	; 200
    13d8:	b2 e4       	ldi	r27, 0x42	; 66
    13da:	89 8f       	std	Y+25, r24	; 0x19
    13dc:	9a 8f       	std	Y+26, r25	; 0x1a
    13de:	ab 8f       	std	Y+27, r26	; 0x1b
    13e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e2:	69 8d       	ldd	r22, Y+25	; 0x19
    13e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	4a ef       	ldi	r20, 0xFA	; 250
    13f0:	54 e4       	ldi	r21, 0x44	; 68
    13f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	8d 8b       	std	Y+21, r24	; 0x15
    13fc:	9e 8b       	std	Y+22, r25	; 0x16
    13fe:	af 8b       	std	Y+23, r26	; 0x17
    1400:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1402:	6d 89       	ldd	r22, Y+21	; 0x15
    1404:	7e 89       	ldd	r23, Y+22	; 0x16
    1406:	8f 89       	ldd	r24, Y+23	; 0x17
    1408:	98 8d       	ldd	r25, Y+24	; 0x18
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	40 e8       	ldi	r20, 0x80	; 128
    1410:	5f e3       	ldi	r21, 0x3F	; 63
    1412:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1416:	88 23       	and	r24, r24
    1418:	2c f4       	brge	.+10     	; 0x1424 <main+0x262>
		__ticks = 1;
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	9c 8b       	std	Y+20, r25	; 0x14
    1420:	8b 8b       	std	Y+19, r24	; 0x13
    1422:	3f c0       	rjmp	.+126    	; 0x14a2 <main+0x2e0>
	else if (__tmp > 65535)
    1424:	6d 89       	ldd	r22, Y+21	; 0x15
    1426:	7e 89       	ldd	r23, Y+22	; 0x16
    1428:	8f 89       	ldd	r24, Y+23	; 0x17
    142a:	98 8d       	ldd	r25, Y+24	; 0x18
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	3f ef       	ldi	r19, 0xFF	; 255
    1430:	4f e7       	ldi	r20, 0x7F	; 127
    1432:	57 e4       	ldi	r21, 0x47	; 71
    1434:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1438:	18 16       	cp	r1, r24
    143a:	4c f5       	brge	.+82     	; 0x148e <main+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    143c:	69 8d       	ldd	r22, Y+25	; 0x19
    143e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1440:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1442:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	40 e2       	ldi	r20, 0x20	; 32
    144a:	51 e4       	ldi	r21, 0x41	; 65
    144c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	bc 01       	movw	r22, r24
    1456:	cd 01       	movw	r24, r26
    1458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	9c 8b       	std	Y+20, r25	; 0x14
    1462:	8b 8b       	std	Y+19, r24	; 0x13
    1464:	0f c0       	rjmp	.+30     	; 0x1484 <main+0x2c2>
    1466:	88 ec       	ldi	r24, 0xC8	; 200
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	9a 8b       	std	Y+18, r25	; 0x12
    146c:	89 8b       	std	Y+17, r24	; 0x11
    146e:	89 89       	ldd	r24, Y+17	; 0x11
    1470:	9a 89       	ldd	r25, Y+18	; 0x12
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	f1 f7       	brne	.-4      	; 0x1472 <main+0x2b0>
    1476:	9a 8b       	std	Y+18, r25	; 0x12
    1478:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    147a:	8b 89       	ldd	r24, Y+19	; 0x13
    147c:	9c 89       	ldd	r25, Y+20	; 0x14
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	9c 8b       	std	Y+20, r25	; 0x14
    1482:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1484:	8b 89       	ldd	r24, Y+19	; 0x13
    1486:	9c 89       	ldd	r25, Y+20	; 0x14
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	69 f7       	brne	.-38     	; 0x1466 <main+0x2a4>
    148c:	14 c0       	rjmp	.+40     	; 0x14b6 <main+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    148e:	6d 89       	ldd	r22, Y+21	; 0x15
    1490:	7e 89       	ldd	r23, Y+22	; 0x16
    1492:	8f 89       	ldd	r24, Y+23	; 0x17
    1494:	98 8d       	ldd	r25, Y+24	; 0x18
    1496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	9c 8b       	std	Y+20, r25	; 0x14
    14a0:	8b 8b       	std	Y+19, r24	; 0x13
    14a2:	8b 89       	ldd	r24, Y+19	; 0x13
    14a4:	9c 89       	ldd	r25, Y+20	; 0x14
    14a6:	98 8b       	std	Y+16, r25	; 0x10
    14a8:	8f 87       	std	Y+15, r24	; 0x0f
    14aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ac:	98 89       	ldd	r25, Y+16	; 0x10
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	f1 f7       	brne	.-4      	; 0x14ae <main+0x2ec>
    14b2:	98 8b       	std	Y+16, r25	; 0x10
    14b4:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(100);
				check=UART_recieveByte();//control ecu return if they are equal or not
    14b6:	0e 94 71 18 	call	0x30e2	; 0x30e2 <UART_recieveByte>
    14ba:	8f a7       	std	Y+47, r24	; 0x2f
				if(check == CORRECT_PASSWORD) {
    14bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    14be:	84 30       	cpi	r24, 0x04	; 4
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <main+0x302>
    14c2:	ae c0       	rjmp	.+348    	; 0x1620 <main+0x45e>
					wrong_pass_attempt=0;//if equal open the door
    14c4:	18 aa       	std	Y+48, r1	; 0x30
					LCD_clearScreen();
    14c6:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_clearScreen>
					LCD_displayString("Door is Unlocking");
    14ca:	8f e9       	ldi	r24, 0x9F	; 159
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LCD_displayString>
					LCD_moveCursor(1, 0);
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_moveCursor>
					LCD_displayString("   Please wait   ");
    14da:	81 eb       	ldi	r24, 0xB1	; 177
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LCD_displayString>
					Door_Delay();//15 sec door delay
    14e2:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <Door_Delay>


					while(1)//loop until there is no one standing on doorIpir sensor value=0)
					{
						people=UART_recieveByte();
    14e6:	0e 94 71 18 	call	0x30e2	; 0x30e2 <UART_recieveByte>
    14ea:	8e a7       	std	Y+46, r24	; 0x2e
						if(people== PEOPLE_ENTERING && first_time==0)
    14ec:	8e a5       	ldd	r24, Y+46	; 0x2e
    14ee:	86 30       	cpi	r24, 0x06	; 6
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <main+0x332>
    14f2:	87 c0       	rjmp	.+270    	; 0x1602 <main+0x440>
    14f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    14f6:	88 23       	and	r24, r24
    14f8:	09 f0       	breq	.+2      	; 0x14fc <main+0x33a>
    14fa:	83 c0       	rjmp	.+262    	; 0x1602 <main+0x440>
						{
							LCD_clearScreen();
    14fc:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_clearScreen>
							LCD_displayString(" wait for People");
    1500:	83 ec       	ldi	r24, 0xC3	; 195
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LCD_displayString>
							LCD_moveCursor(1, 0);
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	60 e0       	ldi	r22, 0x00	; 0
    150c:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_moveCursor>
							LCD_displayString("   To Enter  ");
    1510:	84 ed       	ldi	r24, 0xD4	; 212
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LCD_displayString>
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	aa e7       	ldi	r26, 0x7A	; 122
    151e:	b3 e4       	ldi	r27, 0x43	; 67
    1520:	8b 87       	std	Y+11, r24	; 0x0b
    1522:	9c 87       	std	Y+12, r25	; 0x0c
    1524:	ad 87       	std	Y+13, r26	; 0x0d
    1526:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1528:	6b 85       	ldd	r22, Y+11	; 0x0b
    152a:	7c 85       	ldd	r23, Y+12	; 0x0c
    152c:	8d 85       	ldd	r24, Y+13	; 0x0d
    152e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	4a ef       	ldi	r20, 0xFA	; 250
    1536:	54 e4       	ldi	r21, 0x44	; 68
    1538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	8f 83       	std	Y+7, r24	; 0x07
    1542:	98 87       	std	Y+8, r25	; 0x08
    1544:	a9 87       	std	Y+9, r26	; 0x09
    1546:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1548:	6f 81       	ldd	r22, Y+7	; 0x07
    154a:	78 85       	ldd	r23, Y+8	; 0x08
    154c:	89 85       	ldd	r24, Y+9	; 0x09
    154e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	40 e8       	ldi	r20, 0x80	; 128
    1556:	5f e3       	ldi	r21, 0x3F	; 63
    1558:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    155c:	88 23       	and	r24, r24
    155e:	2c f4       	brge	.+10     	; 0x156a <main+0x3a8>
		__ticks = 1;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	9e 83       	std	Y+6, r25	; 0x06
    1566:	8d 83       	std	Y+5, r24	; 0x05
    1568:	3f c0       	rjmp	.+126    	; 0x15e8 <main+0x426>
	else if (__tmp > 65535)
    156a:	6f 81       	ldd	r22, Y+7	; 0x07
    156c:	78 85       	ldd	r23, Y+8	; 0x08
    156e:	89 85       	ldd	r24, Y+9	; 0x09
    1570:	9a 85       	ldd	r25, Y+10	; 0x0a
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	3f ef       	ldi	r19, 0xFF	; 255
    1576:	4f e7       	ldi	r20, 0x7F	; 127
    1578:	57 e4       	ldi	r21, 0x47	; 71
    157a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    157e:	18 16       	cp	r1, r24
    1580:	4c f5       	brge	.+82     	; 0x15d4 <main+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1582:	6b 85       	ldd	r22, Y+11	; 0x0b
    1584:	7c 85       	ldd	r23, Y+12	; 0x0c
    1586:	8d 85       	ldd	r24, Y+13	; 0x0d
    1588:	9e 85       	ldd	r25, Y+14	; 0x0e
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e2       	ldi	r20, 0x20	; 32
    1590:	51 e4       	ldi	r21, 0x41	; 65
    1592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	bc 01       	movw	r22, r24
    159c:	cd 01       	movw	r24, r26
    159e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	9e 83       	std	Y+6, r25	; 0x06
    15a8:	8d 83       	std	Y+5, r24	; 0x05
    15aa:	0f c0       	rjmp	.+30     	; 0x15ca <main+0x408>
    15ac:	88 ec       	ldi	r24, 0xC8	; 200
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	9c 83       	std	Y+4, r25	; 0x04
    15b2:	8b 83       	std	Y+3, r24	; 0x03
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	f1 f7       	brne	.-4      	; 0x15b8 <main+0x3f6>
    15bc:	9c 83       	std	Y+4, r25	; 0x04
    15be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c0:	8d 81       	ldd	r24, Y+5	; 0x05
    15c2:	9e 81       	ldd	r25, Y+6	; 0x06
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	9e 83       	std	Y+6, r25	; 0x06
    15c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ca:	8d 81       	ldd	r24, Y+5	; 0x05
    15cc:	9e 81       	ldd	r25, Y+6	; 0x06
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	69 f7       	brne	.-38     	; 0x15ac <main+0x3ea>
    15d2:	14 c0       	rjmp	.+40     	; 0x15fc <main+0x43a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d4:	6f 81       	ldd	r22, Y+7	; 0x07
    15d6:	78 85       	ldd	r23, Y+8	; 0x08
    15d8:	89 85       	ldd	r24, Y+9	; 0x09
    15da:	9a 85       	ldd	r25, Y+10	; 0x0a
    15dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	9e 83       	std	Y+6, r25	; 0x06
    15e6:	8d 83       	std	Y+5, r24	; 0x05
    15e8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ea:	9e 81       	ldd	r25, Y+6	; 0x06
    15ec:	9a 83       	std	Y+2, r25	; 0x02
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	9a 81       	ldd	r25, Y+2	; 0x02
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <main+0x432>
    15f8:	9a 83       	std	Y+2, r25	; 0x02
    15fa:	89 83       	std	Y+1, r24	; 0x01
							_delay_ms(250);
							first_time=1;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	8b a7       	std	Y+43, r24	; 0x2b
    1600:	72 cf       	rjmp	.-284    	; 0x14e6 <main+0x324>
						}
						else if(people== NO_PEOPLE_ENTERING){
    1602:	8e a5       	ldd	r24, Y+46	; 0x2e
    1604:	87 30       	cpi	r24, 0x07	; 7
    1606:	09 f0       	breq	.+2      	; 0x160a <main+0x448>
    1608:	6e cf       	rjmp	.-292    	; 0x14e6 <main+0x324>
							break;
						}

					}

					LCD_clearScreen();
    160a:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_clearScreen>
					LCD_displayString(" Door is locking");
    160e:	82 ee       	ldi	r24, 0xE2	; 226
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LCD_displayString>
					Door_Delay();//delay fro door locking
    1616:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <Door_Delay>
					door_opened=1;
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	8d a7       	std	Y+45, r24	; 0x2d
    161e:	20 c0       	rjmp	.+64     	; 0x1660 <main+0x49e>
				}
				else if (check == WRONG_PASSWORD) {
    1620:	8f a5       	ldd	r24, Y+47	; 0x2f
    1622:	85 30       	cpi	r24, 0x05	; 5
    1624:	e9 f4       	brne	.+58     	; 0x1660 <main+0x49e>
					wrong_pass_attempt++;//count user wrong password in a row
    1626:	88 a9       	ldd	r24, Y+48	; 0x30
    1628:	8f 5f       	subi	r24, 0xFF	; 255
    162a:	88 ab       	std	Y+48, r24	; 0x30
					if (wrong_pass_attempt == MAX_WRONG_ATTEMPT) {//if entered 3 wrong in arow buzzer trun on and lock system
    162c:	88 a9       	ldd	r24, Y+48	; 0x30
    162e:	83 30       	cpi	r24, 0x03	; 3
    1630:	a1 f4       	brne	.+40     	; 0x165a <main+0x498>
						UART_sendByte(BUZZER_ON);//tell control ecu
    1632:	88 e0       	ldi	r24, 0x08	; 8
    1634:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <UART_sendByte>
						LCD_clearScreen();
    1638:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_clearScreen>
						LCD_displayString("  System LOCKED  ");
    163c:	83 ef       	ldi	r24, 0xF3	; 243
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LCD_displayString>
						LCD_moveCursor(1, 0);
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_moveCursor>
						LCD_displayString("Wait for 1 min");
    164c:	85 e0       	ldi	r24, 0x05	; 5
    164e:	91 e0       	ldi	r25, 0x01	; 1
    1650:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LCD_displayString>
						Buzzer_Delay();
    1654:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <Buzzer_Delay>
    1658:	03 c0       	rjmp	.+6      	; 0x1660 <main+0x49e>
					} else {
						UART_sendByte(BUZZER_OFF);//tell control ecu
    165a:	89 e0       	ldi	r24, 0x09	; 9
    165c:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <UART_sendByte>
			wrong_pass_attempt=0;

			UART_sendByte(OPEN_DOOR);//tell control ecu the new state
			//loop until enter correct password or 3 wrong password

			while(door_opened==0 && wrong_pass_attempt<MAX_WRONG_ATTEMPT)
    1660:	8d a5       	ldd	r24, Y+45	; 0x2d
    1662:	88 23       	and	r24, r24
    1664:	21 f4       	brne	.+8      	; 0x166e <main+0x4ac>
    1666:	88 a9       	ldd	r24, Y+48	; 0x30
    1668:	83 30       	cpi	r24, 0x03	; 3
    166a:	08 f4       	brcc	.+2      	; 0x166e <main+0x4ac>
    166c:	a0 ce       	rjmp	.-704    	; 0x13ae <main+0x1ec>
					} else {
						UART_sendByte(BUZZER_OFF);//tell control ecu
					}
				}
			}
			door_opened=0;
    166e:	1d a6       	std	Y+45, r1	; 0x2d
			wrong_pass_attempt=0;
    1670:	18 aa       	std	Y+48, r1	; 0x30
    1672:	83 ce       	rjmp	.-762    	; 0x137a <main+0x1b8>
		}

		else if (option == '-') {
    1674:	89 a9       	ldd	r24, Y+49	; 0x31
    1676:	8d 32       	cpi	r24, 0x2D	; 45
    1678:	09 f0       	breq	.+2      	; 0x167c <main+0x4ba>
    167a:	7f ce       	rjmp	.-770    	; 0x137a <main+0x1b8>
			//UART_sendByte(CHECK_OLD_PASSWORD);
			wrong_pass_attempt=0;
    167c:	18 aa       	std	Y+48, r1	; 0x30
			UART_sendByte(CHANGE_OLD_PASSWORD);//tell control ecu new state
    167e:	8a e0       	ldi	r24, 0x0A	; 10
    1680:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <UART_sendByte>
    1684:	48 c0       	rjmp	.+144    	; 0x1716 <main+0x554>
			//loop until enter correct password or 3 wrong password
			while(password_changed==0 && wrong_pass_attempt<MAX_WRONG_ATTEMPT)
			{
				LCD_clearScreen();
    1686:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_clearScreen>
				LCD_displayString("plz enter old");
    168a:	84 e1       	ldi	r24, 0x14	; 20
    168c:	91 e0       	ldi	r25, 0x01	; 1
    168e:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LCD_displayString>
				LCD_moveCursor(1, 0);
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	60 e0       	ldi	r22, 0x00	; 0
    1696:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_moveCursor>
				LCD_displayString("pass : ");
    169a:	82 e2       	ldi	r24, 0x22	; 34
    169c:	91 e0       	ldi	r25, 0x01	; 1
    169e:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LCD_displayString>
				Read_Password(password);//store user input password
    16a2:	ce 01       	movw	r24, r28
    16a4:	c3 96       	adiw	r24, 0x33	; 51
    16a6:	0e 94 87 0c 	call	0x190e	; 0x190e <Read_Password>
				Send_Password(password);//send this pass word to be compared with eeprom password value
    16aa:	ce 01       	movw	r24, r28
    16ac:	c3 96       	adiw	r24, 0x33	; 51
    16ae:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <Send_Password>
				check=UART_recieveByte();//control ecu return if they are equal or not
    16b2:	0e 94 71 18 	call	0x30e2	; 0x30e2 <UART_recieveByte>
    16b6:	8f a7       	std	Y+47, r24	; 0x2f
				if(check == CORRECT_PASSWORD) {
    16b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ba:	84 30       	cpi	r24, 0x04	; 4
    16bc:	61 f4       	brne	.+24     	; 0x16d6 <main+0x514>
					wrong_pass_attempt=0;
    16be:	18 aa       	std	Y+48, r1	; 0x30
					password_exist=0;
    16c0:	1a aa       	std	Y+50, r1	; 0x32
    16c2:	03 c0       	rjmp	.+6      	; 0x16ca <main+0x508>
					//if they are equal add new password and store it in eeprom
					while(password_exist==0)
					{
						password_exist=new_Password();
    16c4:	0e 94 95 0b 	call	0x172a	; 0x172a <new_Password>
    16c8:	8a ab       	std	Y+50, r24	; 0x32
				check=UART_recieveByte();//control ecu return if they are equal or not
				if(check == CORRECT_PASSWORD) {
					wrong_pass_attempt=0;
					password_exist=0;
					//if they are equal add new password and store it in eeprom
					while(password_exist==0)
    16ca:	8a a9       	ldd	r24, Y+50	; 0x32
    16cc:	88 23       	and	r24, r24
    16ce:	d1 f3       	breq	.-12     	; 0x16c4 <main+0x502>
					{
						password_exist=new_Password();
					}
					password_changed=1;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	8c a7       	std	Y+44, r24	; 0x2c
    16d4:	20 c0       	rjmp	.+64     	; 0x1716 <main+0x554>
				}
				else if (check == WRONG_PASSWORD) {
    16d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    16d8:	85 30       	cpi	r24, 0x05	; 5
    16da:	e9 f4       	brne	.+58     	; 0x1716 <main+0x554>
					wrong_pass_attempt++;//count user wrong password in a row
    16dc:	88 a9       	ldd	r24, Y+48	; 0x30
    16de:	8f 5f       	subi	r24, 0xFF	; 255
    16e0:	88 ab       	std	Y+48, r24	; 0x30
					if (wrong_pass_attempt == MAX_WRONG_ATTEMPT) {//if entered 3 wrong in arow buzzer trun on and lock system
    16e2:	88 a9       	ldd	r24, Y+48	; 0x30
    16e4:	83 30       	cpi	r24, 0x03	; 3
    16e6:	a1 f4       	brne	.+40     	; 0x1710 <main+0x54e>
						UART_sendByte(BUZZER_ON);//tell control ecu
    16e8:	88 e0       	ldi	r24, 0x08	; 8
    16ea:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <UART_sendByte>
						LCD_clearScreen();
    16ee:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_clearScreen>
						LCD_displayString("  System LOCKED  ");
    16f2:	83 ef       	ldi	r24, 0xF3	; 243
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LCD_displayString>
						LCD_moveCursor(1, 0);
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_moveCursor>
						LCD_displayString("Wait for 1 min");
    1702:	85 e0       	ldi	r24, 0x05	; 5
    1704:	91 e0       	ldi	r25, 0x01	; 1
    1706:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LCD_displayString>
						Buzzer_Delay();
    170a:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <Buzzer_Delay>
    170e:	03 c0       	rjmp	.+6      	; 0x1716 <main+0x554>
					} else {
						UART_sendByte(BUZZER_OFF);//tell control ecu
    1710:	89 e0       	ldi	r24, 0x09	; 9
    1712:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <UART_sendByte>
		else if (option == '-') {
			//UART_sendByte(CHECK_OLD_PASSWORD);
			wrong_pass_attempt=0;
			UART_sendByte(CHANGE_OLD_PASSWORD);//tell control ecu new state
			//loop until enter correct password or 3 wrong password
			while(password_changed==0 && wrong_pass_attempt<MAX_WRONG_ATTEMPT)
    1716:	8c a5       	ldd	r24, Y+44	; 0x2c
    1718:	88 23       	and	r24, r24
    171a:	21 f4       	brne	.+8      	; 0x1724 <main+0x562>
    171c:	88 a9       	ldd	r24, Y+48	; 0x30
    171e:	83 30       	cpi	r24, 0x03	; 3
    1720:	08 f4       	brcc	.+2      	; 0x1724 <main+0x562>
    1722:	b1 cf       	rjmp	.-158    	; 0x1686 <main+0x4c4>
					} else {
						UART_sendByte(BUZZER_OFF);//tell control ecu
					}
				}
			}
			wrong_pass_attempt=0;
    1724:	18 aa       	std	Y+48, r1	; 0x30
			password_changed=0;
    1726:	1c a6       	std	Y+44, r1	; 0x2c
    1728:	28 ce       	rjmp	.-944    	; 0x137a <main+0x1b8>

0000172a <new_Password>:
		}
	}
}
//functiongets 2 password from user and make sure they are equal then send any of them to control ecu to store it in eeprom
uint8 new_Password() {
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	6a 97       	sbiw	r28, 0x1a	; 26
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
	uint8 Password_first_time[PASSWORD_LENGTH],Password_second_time[PASSWORD_LENGTH],flag;
	LCD_clearScreen();
    173e:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_clearScreen>
	LCD_displayString("Plz Enter Pass:");
    1742:	8a e2       	ldi	r24, 0x2A	; 42
    1744:	91 e0       	ldi	r25, 0x01	; 1
    1746:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LCD_displayString>
	LCD_moveCursor(1, 0);
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	60 e0       	ldi	r22, 0x00	; 0
    174e:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_moveCursor>
	Read_Password(Password_first_time);
    1752:	ce 01       	movw	r24, r28
    1754:	40 96       	adiw	r24, 0x10	; 16
    1756:	0e 94 87 0c 	call	0x190e	; 0x190e <Read_Password>
	LCD_clearScreen();
    175a:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_clearScreen>
	LCD_displayString("Plz re-enter the");
    175e:	8a e3       	ldi	r24, 0x3A	; 58
    1760:	91 e0       	ldi	r25, 0x01	; 1
    1762:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LCD_displayString>
	LCD_moveCursor(1, 0);
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	60 e0       	ldi	r22, 0x00	; 0
    176a:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_moveCursor>
	LCD_displayString("same pass:");
    176e:	8b e4       	ldi	r24, 0x4B	; 75
    1770:	91 e0       	ldi	r25, 0x01	; 1
    1772:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LCD_displayString>
	Read_Password(Password_second_time);
    1776:	ce 01       	movw	r24, r28
    1778:	45 96       	adiw	r24, 0x15	; 21
    177a:	0e 94 87 0c 	call	0x190e	; 0x190e <Read_Password>
	LCD_clearScreen();
    177e:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_clearScreen>
	flag=Pass_Cmp(Password_first_time,Password_second_time);
    1782:	ce 01       	movw	r24, r28
    1784:	40 96       	adiw	r24, 0x10	; 16
    1786:	9e 01       	movw	r18, r28
    1788:	2b 5e       	subi	r18, 0xEB	; 235
    178a:	3f 4f       	sbci	r19, 0xFF	; 255
    178c:	b9 01       	movw	r22, r18
    178e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <Pass_Cmp>
    1792:	8f 87       	std	Y+15, r24	; 0x0f
	if(flag)
    1794:	8f 85       	ldd	r24, Y+15	; 0x0f
    1796:	88 23       	and	r24, r24
    1798:	09 f4       	brne	.+2      	; 0x179c <new_Password+0x72>
    179a:	79 c0       	rjmp	.+242    	; 0x188e <new_Password+0x164>
	{
		Send_Password(Password_second_time);
    179c:	ce 01       	movw	r24, r28
    179e:	45 96       	adiw	r24, 0x15	; 21
    17a0:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <Send_Password>
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	aa e7       	ldi	r26, 0x7A	; 122
    17aa:	b3 e4       	ldi	r27, 0x43	; 67
    17ac:	8b 87       	std	Y+11, r24	; 0x0b
    17ae:	9c 87       	std	Y+12, r25	; 0x0c
    17b0:	ad 87       	std	Y+13, r26	; 0x0d
    17b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4a ef       	ldi	r20, 0xFA	; 250
    17c2:	54 e4       	ldi	r21, 0x44	; 68
    17c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	8f 83       	std	Y+7, r24	; 0x07
    17ce:	98 87       	std	Y+8, r25	; 0x08
    17d0:	a9 87       	std	Y+9, r26	; 0x09
    17d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17d4:	6f 81       	ldd	r22, Y+7	; 0x07
    17d6:	78 85       	ldd	r23, Y+8	; 0x08
    17d8:	89 85       	ldd	r24, Y+9	; 0x09
    17da:	9a 85       	ldd	r25, Y+10	; 0x0a
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	40 e8       	ldi	r20, 0x80	; 128
    17e2:	5f e3       	ldi	r21, 0x3F	; 63
    17e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17e8:	88 23       	and	r24, r24
    17ea:	2c f4       	brge	.+10     	; 0x17f6 <new_Password+0xcc>
		__ticks = 1;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	9e 83       	std	Y+6, r25	; 0x06
    17f2:	8d 83       	std	Y+5, r24	; 0x05
    17f4:	3f c0       	rjmp	.+126    	; 0x1874 <new_Password+0x14a>
	else if (__tmp > 65535)
    17f6:	6f 81       	ldd	r22, Y+7	; 0x07
    17f8:	78 85       	ldd	r23, Y+8	; 0x08
    17fa:	89 85       	ldd	r24, Y+9	; 0x09
    17fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	3f ef       	ldi	r19, 0xFF	; 255
    1802:	4f e7       	ldi	r20, 0x7F	; 127
    1804:	57 e4       	ldi	r21, 0x47	; 71
    1806:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    180a:	18 16       	cp	r1, r24
    180c:	4c f5       	brge	.+82     	; 0x1860 <new_Password+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    180e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1810:	7c 85       	ldd	r23, Y+12	; 0x0c
    1812:	8d 85       	ldd	r24, Y+13	; 0x0d
    1814:	9e 85       	ldd	r25, Y+14	; 0x0e
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e2       	ldi	r20, 0x20	; 32
    181c:	51 e4       	ldi	r21, 0x41	; 65
    181e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	bc 01       	movw	r22, r24
    1828:	cd 01       	movw	r24, r26
    182a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	9e 83       	std	Y+6, r25	; 0x06
    1834:	8d 83       	std	Y+5, r24	; 0x05
    1836:	0f c0       	rjmp	.+30     	; 0x1856 <new_Password+0x12c>
    1838:	88 ec       	ldi	r24, 0xC8	; 200
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	9c 83       	std	Y+4, r25	; 0x04
    183e:	8b 83       	std	Y+3, r24	; 0x03
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	9c 81       	ldd	r25, Y+4	; 0x04
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <new_Password+0x11a>
    1848:	9c 83       	std	Y+4, r25	; 0x04
    184a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184c:	8d 81       	ldd	r24, Y+5	; 0x05
    184e:	9e 81       	ldd	r25, Y+6	; 0x06
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	9e 83       	std	Y+6, r25	; 0x06
    1854:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1856:	8d 81       	ldd	r24, Y+5	; 0x05
    1858:	9e 81       	ldd	r25, Y+6	; 0x06
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	69 f7       	brne	.-38     	; 0x1838 <new_Password+0x10e>
    185e:	14 c0       	rjmp	.+40     	; 0x1888 <new_Password+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1860:	6f 81       	ldd	r22, Y+7	; 0x07
    1862:	78 85       	ldd	r23, Y+8	; 0x08
    1864:	89 85       	ldd	r24, Y+9	; 0x09
    1866:	9a 85       	ldd	r25, Y+10	; 0x0a
    1868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	9e 83       	std	Y+6, r25	; 0x06
    1872:	8d 83       	std	Y+5, r24	; 0x05
    1874:	8d 81       	ldd	r24, Y+5	; 0x05
    1876:	9e 81       	ldd	r25, Y+6	; 0x06
    1878:	9a 83       	std	Y+2, r25	; 0x02
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	9a 81       	ldd	r25, Y+2	; 0x02
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <new_Password+0x156>
    1884:	9a 83       	std	Y+2, r25	; 0x02
    1886:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		return 1;
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	8a 8f       	std	Y+26, r24	; 0x1a
    188c:	01 c0       	rjmp	.+2      	; 0x1890 <new_Password+0x166>
	}
	return 0;
    188e:	1a 8e       	std	Y+26, r1	; 0x1a
    1890:	8a 8d       	ldd	r24, Y+26	; 0x1a
}
    1892:	6a 96       	adiw	r28, 0x1a	; 26
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <Pass_Cmp>:
//funtion return if two password equal or not
uint8 Pass_Cmp(uint8 password1[], uint8 password2[]) {
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <Pass_Cmp+0x6>
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <Pass_Cmp+0x8>
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <Pass_Cmp+0xa>
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	9b 83       	std	Y+3, r25	; 0x03
    18b4:	8a 83       	std	Y+2, r24	; 0x02
    18b6:	7d 83       	std	Y+5, r23	; 0x05
    18b8:	6c 83       	std	Y+4, r22	; 0x04
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    18ba:	19 82       	std	Y+1, r1	; 0x01
    18bc:	19 c0       	rjmp	.+50     	; 0x18f0 <Pass_Cmp+0x4c>
		if (password1[i] != password2[i]) {
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	9b 81       	ldd	r25, Y+3	; 0x03
    18c8:	fc 01       	movw	r30, r24
    18ca:	e2 0f       	add	r30, r18
    18cc:	f3 1f       	adc	r31, r19
    18ce:	40 81       	ld	r20, Z
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	8c 81       	ldd	r24, Y+4	; 0x04
    18d8:	9d 81       	ldd	r25, Y+5	; 0x05
    18da:	fc 01       	movw	r30, r24
    18dc:	e2 0f       	add	r30, r18
    18de:	f3 1f       	adc	r31, r19
    18e0:	80 81       	ld	r24, Z
    18e2:	48 17       	cp	r20, r24
    18e4:	11 f0       	breq	.+4      	; 0x18ea <Pass_Cmp+0x46>
			return 0;
    18e6:	1e 82       	std	Y+6, r1	; 0x06
    18e8:	08 c0       	rjmp	.+16     	; 0x18fa <Pass_Cmp+0x56>
	}
	return 0;
}
//funtion return if two password equal or not
uint8 Pass_Cmp(uint8 password1[], uint8 password2[]) {
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	8f 5f       	subi	r24, 0xFF	; 255
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	85 30       	cpi	r24, 0x05	; 5
    18f4:	20 f3       	brcs	.-56     	; 0x18be <Pass_Cmp+0x1a>
		if (password1[i] != password2[i]) {
			return 0;
		}
	}
	return 1;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	8e 83       	std	Y+6, r24	; 0x06
    18fa:	8e 81       	ldd	r24, Y+6	; 0x06
}
    18fc:	26 96       	adiw	r28, 0x06	; 6
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <Read_Password>:
//get 5 digits length password from user
void Read_Password(uint8 password[]) {
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	62 97       	sbiw	r28, 0x12	; 18
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	9a 8b       	std	Y+18, r25	; 0x12
    1924:	89 8b       	std	Y+17, r24	; 0x11
	uint8 i = 0;
    1926:	18 8a       	std	Y+16, r1	; 0x10
    1928:	88 c0       	rjmp	.+272    	; 0x1a3a <Read_Password+0x12c>
	uint8 temp;
	while (i < PASSWORD_LENGTH) {
		temp = KEYPAD_getPressedKey();
    192a:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <KEYPAD_getPressedKey>
    192e:	8f 87       	std	Y+15, r24	; 0x0f
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	aa e7       	ldi	r26, 0x7A	; 122
    1936:	b3 e4       	ldi	r27, 0x43	; 67
    1938:	8b 87       	std	Y+11, r24	; 0x0b
    193a:	9c 87       	std	Y+12, r25	; 0x0c
    193c:	ad 87       	std	Y+13, r26	; 0x0d
    193e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1940:	6b 85       	ldd	r22, Y+11	; 0x0b
    1942:	7c 85       	ldd	r23, Y+12	; 0x0c
    1944:	8d 85       	ldd	r24, Y+13	; 0x0d
    1946:	9e 85       	ldd	r25, Y+14	; 0x0e
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	4a ef       	ldi	r20, 0xFA	; 250
    194e:	54 e4       	ldi	r21, 0x44	; 68
    1950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	8f 83       	std	Y+7, r24	; 0x07
    195a:	98 87       	std	Y+8, r25	; 0x08
    195c:	a9 87       	std	Y+9, r26	; 0x09
    195e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1960:	6f 81       	ldd	r22, Y+7	; 0x07
    1962:	78 85       	ldd	r23, Y+8	; 0x08
    1964:	89 85       	ldd	r24, Y+9	; 0x09
    1966:	9a 85       	ldd	r25, Y+10	; 0x0a
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e8       	ldi	r20, 0x80	; 128
    196e:	5f e3       	ldi	r21, 0x3F	; 63
    1970:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1974:	88 23       	and	r24, r24
    1976:	2c f4       	brge	.+10     	; 0x1982 <Read_Password+0x74>
		__ticks = 1;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	9e 83       	std	Y+6, r25	; 0x06
    197e:	8d 83       	std	Y+5, r24	; 0x05
    1980:	3f c0       	rjmp	.+126    	; 0x1a00 <Read_Password+0xf2>
	else if (__tmp > 65535)
    1982:	6f 81       	ldd	r22, Y+7	; 0x07
    1984:	78 85       	ldd	r23, Y+8	; 0x08
    1986:	89 85       	ldd	r24, Y+9	; 0x09
    1988:	9a 85       	ldd	r25, Y+10	; 0x0a
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	3f ef       	ldi	r19, 0xFF	; 255
    198e:	4f e7       	ldi	r20, 0x7F	; 127
    1990:	57 e4       	ldi	r21, 0x47	; 71
    1992:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1996:	18 16       	cp	r1, r24
    1998:	4c f5       	brge	.+82     	; 0x19ec <Read_Password+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199a:	6b 85       	ldd	r22, Y+11	; 0x0b
    199c:	7c 85       	ldd	r23, Y+12	; 0x0c
    199e:	8d 85       	ldd	r24, Y+13	; 0x0d
    19a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e2       	ldi	r20, 0x20	; 32
    19a8:	51 e4       	ldi	r21, 0x41	; 65
    19aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	bc 01       	movw	r22, r24
    19b4:	cd 01       	movw	r24, r26
    19b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	9e 83       	std	Y+6, r25	; 0x06
    19c0:	8d 83       	std	Y+5, r24	; 0x05
    19c2:	0f c0       	rjmp	.+30     	; 0x19e2 <Read_Password+0xd4>
    19c4:	88 ec       	ldi	r24, 0xC8	; 200
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	9c 83       	std	Y+4, r25	; 0x04
    19ca:	8b 83       	std	Y+3, r24	; 0x03
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	9c 81       	ldd	r25, Y+4	; 0x04
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	f1 f7       	brne	.-4      	; 0x19d0 <Read_Password+0xc2>
    19d4:	9c 83       	std	Y+4, r25	; 0x04
    19d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d8:	8d 81       	ldd	r24, Y+5	; 0x05
    19da:	9e 81       	ldd	r25, Y+6	; 0x06
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	9e 83       	std	Y+6, r25	; 0x06
    19e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e2:	8d 81       	ldd	r24, Y+5	; 0x05
    19e4:	9e 81       	ldd	r25, Y+6	; 0x06
    19e6:	00 97       	sbiw	r24, 0x00	; 0
    19e8:	69 f7       	brne	.-38     	; 0x19c4 <Read_Password+0xb6>
    19ea:	14 c0       	rjmp	.+40     	; 0x1a14 <Read_Password+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ec:	6f 81       	ldd	r22, Y+7	; 0x07
    19ee:	78 85       	ldd	r23, Y+8	; 0x08
    19f0:	89 85       	ldd	r24, Y+9	; 0x09
    19f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	9e 83       	std	Y+6, r25	; 0x06
    19fe:	8d 83       	std	Y+5, r24	; 0x05
    1a00:	8d 81       	ldd	r24, Y+5	; 0x05
    1a02:	9e 81       	ldd	r25, Y+6	; 0x06
    1a04:	9a 83       	std	Y+2, r25	; 0x02
    1a06:	89 83       	std	Y+1, r24	; 0x01
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	f1 f7       	brne	.-4      	; 0x1a0c <Read_Password+0xfe>
    1a10:	9a 83       	std	Y+2, r25	; 0x02
    1a12:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250); /* Press time */
		if (temp >= 0 && temp <= 9) {
    1a14:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a16:	8a 30       	cpi	r24, 0x0A	; 10
    1a18:	80 f4       	brcc	.+32     	; 0x1a3a <Read_Password+0x12c>
			password[i] = temp;
    1a1a:	88 89       	ldd	r24, Y+16	; 0x10
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	89 89       	ldd	r24, Y+17	; 0x11
    1a22:	9a 89       	ldd	r25, Y+18	; 0x12
    1a24:	fc 01       	movw	r30, r24
    1a26:	e2 0f       	add	r30, r18
    1a28:	f3 1f       	adc	r31, r19
    1a2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a2c:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    1a2e:	8a e2       	ldi	r24, 0x2A	; 42
    1a30:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_displayCharacter>
			i++;
    1a34:	88 89       	ldd	r24, Y+16	; 0x10
    1a36:	8f 5f       	subi	r24, 0xFF	; 255
    1a38:	88 8b       	std	Y+16, r24	; 0x10
}
//get 5 digits length password from user
void Read_Password(uint8 password[]) {
	uint8 i = 0;
	uint8 temp;
	while (i < PASSWORD_LENGTH) {
    1a3a:	88 89       	ldd	r24, Y+16	; 0x10
    1a3c:	85 30       	cpi	r24, 0x05	; 5
    1a3e:	08 f4       	brcc	.+2      	; 0x1a42 <Read_Password+0x134>
    1a40:	74 cf       	rjmp	.-280    	; 0x192a <Read_Password+0x1c>
			password[i] = temp;
			LCD_displayCharacter('*');
			i++;
		}
	}
	while (KEYPAD_getPressedKey() != '#');
    1a42:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <KEYPAD_getPressedKey>
    1a46:	83 32       	cpi	r24, 0x23	; 35
    1a48:	e1 f7       	brne	.-8      	; 0x1a42 <Read_Password+0x134>
}
    1a4a:	62 96       	adiw	r28, 0x12	; 18
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	de bf       	out	0x3e, r29	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	cd bf       	out	0x3d, r28	; 61
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <Send_Password>:
//send password to control ecu
void Send_Password(uint8 password[]) {
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <Send_Password+0x6>
    1a62:	0f 92       	push	r0
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	9b 83       	std	Y+3, r25	; 0x03
    1a6a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1a6c:	19 82       	std	Y+1, r1	; 0x01
    1a6e:	12 c0       	rjmp	.+36     	; 0x1a94 <Send_Password+0x38>
	while (i < PASSWORD_LENGTH) {
		while (UART_recieveByte() != synchronize);
    1a70:	0e 94 71 18 	call	0x30e2	; 0x30e2 <UART_recieveByte>
    1a74:	80 3a       	cpi	r24, 0xA0	; 160
    1a76:	e1 f7       	brne	.-8      	; 0x1a70 <Send_Password+0x14>
		UART_sendByte(password[i]);
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
    1a7a:	28 2f       	mov	r18, r24
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	9b 81       	ldd	r25, Y+3	; 0x03
    1a82:	fc 01       	movw	r30, r24
    1a84:	e2 0f       	add	r30, r18
    1a86:	f3 1f       	adc	r31, r19
    1a88:	80 81       	ld	r24, Z
    1a8a:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <UART_sendByte>
		i++;
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	8f 5f       	subi	r24, 0xFF	; 255
    1a92:	89 83       	std	Y+1, r24	; 0x01
	while (KEYPAD_getPressedKey() != '#');
}
//send password to control ecu
void Send_Password(uint8 password[]) {
	uint8 i = 0;
	while (i < PASSWORD_LENGTH) {
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	85 30       	cpi	r24, 0x05	; 5
    1a98:	58 f3       	brcs	.-42     	; 0x1a70 <Send_Password+0x14>
		while (UART_recieveByte() != synchronize);
		UART_sendByte(password[i]);
		i++;
	}
}
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <Door_Delay>:
//15 sec door delay
void Door_Delay(void)
{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	2c 97       	sbiw	r28, 0x0c	; 12
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
	Timer_ConfigType timer_config = { TIMER_INITIAL_VALUE,FOR_ONE_SECOND_COMPARE_VALUE, TIMER1, F_CPU_div_256, CTC_MODE };
    1aba:	ce 01       	movw	r24, r28
    1abc:	01 96       	adiw	r24, 0x01	; 1
    1abe:	99 87       	std	Y+9, r25	; 0x09
    1ac0:	88 87       	std	Y+8, r24	; 0x08
    1ac2:	e5 e6       	ldi	r30, 0x65	; 101
    1ac4:	f1 e0       	ldi	r31, 0x01	; 1
    1ac6:	fb 87       	std	Y+11, r31	; 0x0b
    1ac8:	ea 87       	std	Y+10, r30	; 0x0a
    1aca:	f7 e0       	ldi	r31, 0x07	; 7
    1acc:	fc 87       	std	Y+12, r31	; 0x0c
    1ace:	ea 85       	ldd	r30, Y+10	; 0x0a
    1ad0:	fb 85       	ldd	r31, Y+11	; 0x0b
    1ad2:	00 80       	ld	r0, Z
    1ad4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ad6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ad8:	01 96       	adiw	r24, 0x01	; 1
    1ada:	9b 87       	std	Y+11, r25	; 0x0b
    1adc:	8a 87       	std	Y+10, r24	; 0x0a
    1ade:	e8 85       	ldd	r30, Y+8	; 0x08
    1ae0:	f9 85       	ldd	r31, Y+9	; 0x09
    1ae2:	00 82       	st	Z, r0
    1ae4:	88 85       	ldd	r24, Y+8	; 0x08
    1ae6:	99 85       	ldd	r25, Y+9	; 0x09
    1ae8:	01 96       	adiw	r24, 0x01	; 1
    1aea:	99 87       	std	Y+9, r25	; 0x09
    1aec:	88 87       	std	Y+8, r24	; 0x08
    1aee:	9c 85       	ldd	r25, Y+12	; 0x0c
    1af0:	91 50       	subi	r25, 0x01	; 1
    1af2:	9c 87       	std	Y+12, r25	; 0x0c
    1af4:	ec 85       	ldd	r30, Y+12	; 0x0c
    1af6:	ee 23       	and	r30, r30
    1af8:	51 f7       	brne	.-44     	; 0x1ace <Door_Delay+0x28>
	Timer_setCallBack(countOneSecond, TIMER1);
    1afa:	8d ed       	ldi	r24, 0xDD	; 221
    1afc:	9d e0       	ldi	r25, 0x0D	; 13
    1afe:	61 e0       	ldi	r22, 0x01	; 1
    1b00:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <Timer_setCallBack>
	TIMER_init(&timer_config);
    1b04:	ce 01       	movw	r24, r28
    1b06:	01 96       	adiw	r24, 0x01	; 1
    1b08:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <TIMER_init>
	while (g_tick_number < 15);
    1b0c:	80 91 74 01 	lds	r24, 0x0174
    1b10:	8f 30       	cpi	r24, 0x0F	; 15
    1b12:	e0 f3       	brcs	.-8      	; 0x1b0c <Door_Delay+0x66>
	g_tick_number = 0;
    1b14:	10 92 74 01 	sts	0x0174, r1
	Timer_deInit(TIMER1);
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	0e 94 03 16 	call	0x2c06	; 0x2c06 <Timer_deInit>

}
    1b1e:	2c 96       	adiw	r28, 0x0c	; 12
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	08 95       	ret

00001b30 <Buzzer_Delay>:
//60 sec buzzer delay
void Buzzer_Delay(void)
{
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	2c 97       	sbiw	r28, 0x0c	; 12
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	cd bf       	out	0x3d, r28	; 61
	Timer_ConfigType timer_config = { TIMER_INITIAL_VALUE,FOR_ONE_SECOND_COMPARE_VALUE, TIMER1, F_CPU_div_256, CTC_MODE };
    1b44:	ce 01       	movw	r24, r28
    1b46:	01 96       	adiw	r24, 0x01	; 1
    1b48:	99 87       	std	Y+9, r25	; 0x09
    1b4a:	88 87       	std	Y+8, r24	; 0x08
    1b4c:	ec e6       	ldi	r30, 0x6C	; 108
    1b4e:	f1 e0       	ldi	r31, 0x01	; 1
    1b50:	fb 87       	std	Y+11, r31	; 0x0b
    1b52:	ea 87       	std	Y+10, r30	; 0x0a
    1b54:	f7 e0       	ldi	r31, 0x07	; 7
    1b56:	fc 87       	std	Y+12, r31	; 0x0c
    1b58:	ea 85       	ldd	r30, Y+10	; 0x0a
    1b5a:	fb 85       	ldd	r31, Y+11	; 0x0b
    1b5c:	00 80       	ld	r0, Z
    1b5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b60:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b62:	01 96       	adiw	r24, 0x01	; 1
    1b64:	9b 87       	std	Y+11, r25	; 0x0b
    1b66:	8a 87       	std	Y+10, r24	; 0x0a
    1b68:	e8 85       	ldd	r30, Y+8	; 0x08
    1b6a:	f9 85       	ldd	r31, Y+9	; 0x09
    1b6c:	00 82       	st	Z, r0
    1b6e:	88 85       	ldd	r24, Y+8	; 0x08
    1b70:	99 85       	ldd	r25, Y+9	; 0x09
    1b72:	01 96       	adiw	r24, 0x01	; 1
    1b74:	99 87       	std	Y+9, r25	; 0x09
    1b76:	88 87       	std	Y+8, r24	; 0x08
    1b78:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b7a:	91 50       	subi	r25, 0x01	; 1
    1b7c:	9c 87       	std	Y+12, r25	; 0x0c
    1b7e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b80:	ee 23       	and	r30, r30
    1b82:	51 f7       	brne	.-44     	; 0x1b58 <Buzzer_Delay+0x28>
	Timer_setCallBack(countOneSecond, TIMER1);
    1b84:	8d ed       	ldi	r24, 0xDD	; 221
    1b86:	9d e0       	ldi	r25, 0x0D	; 13
    1b88:	61 e0       	ldi	r22, 0x01	; 1
    1b8a:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <Timer_setCallBack>
	TIMER_init(&timer_config);
    1b8e:	ce 01       	movw	r24, r28
    1b90:	01 96       	adiw	r24, 0x01	; 1
    1b92:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <TIMER_init>
	while (g_tick_number < 60);
    1b96:	80 91 74 01 	lds	r24, 0x0174
    1b9a:	8c 33       	cpi	r24, 0x3C	; 60
    1b9c:	e0 f3       	brcs	.-8      	; 0x1b96 <Buzzer_Delay+0x66>
	g_tick_number = 0;
    1b9e:	10 92 74 01 	sts	0x0174, r1
	Timer_deInit(TIMER1);
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	0e 94 03 16 	call	0x2c06	; 0x2c06 <Timer_deInit>

}
    1ba8:	2c 96       	adiw	r28, 0x0c	; 12
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	f8 94       	cli
    1bae:	de bf       	out	0x3e, r29	; 62
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	cd bf       	out	0x3d, r28	; 61
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	08 95       	ret

00001bba <countOneSecond>:
//call back function
void countOneSecond(void) {
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
	g_tick_number++;/*called every 1 sec*/
    1bc2:	80 91 74 01 	lds	r24, 0x0174
    1bc6:	8f 5f       	subi	r24, 0xFF	; 255
    1bc8:	80 93 74 01 	sts	0x0174, r24
}
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	60 97       	sbiw	r28, 0x10	; 16
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	f8 94       	cli
    1be0:	de bf       	out	0x3e, r29	; 62
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	60 e0       	ldi	r22, 0x00	; 0
    1bea:	40 e0       	ldi	r20, 0x00	; 0
    1bec:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	61 e0       	ldi	r22, 0x01	; 1
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	62 e0       	ldi	r22, 0x02	; 2
    1bfe:	40 e0       	ldi	r20, 0x00	; 0
    1c00:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	63 e0       	ldi	r22, 0x03	; 3
    1c08:	40 e0       	ldi	r20, 0x00	; 0
    1c0a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	64 e0       	ldi	r22, 0x04	; 4
    1c12:	40 e0       	ldi	r20, 0x00	; 0
    1c14:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	65 e0       	ldi	r22, 0x05	; 5
    1c1c:	40 e0       	ldi	r20, 0x00	; 0
    1c1e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	66 e0       	ldi	r22, 0x06	; 6
    1c26:	40 e0       	ldi	r20, 0x00	; 0
    1c28:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	67 e0       	ldi	r22, 0x07	; 7
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1c36:	1f 86       	std	Y+15, r1	; 0x0f
    1c38:	ab c0       	rjmp	.+342    	; 0x1d90 <KEYPAD_getPressedKey+0x1be>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c3e:	41 e0       	ldi	r20, 0x01	; 1
    1c40:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c48:	40 e0       	ldi	r20, 0x00	; 0
    1c4a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1c4e:	18 8a       	std	Y+16, r1	; 0x10
    1c50:	22 c0       	rjmp	.+68     	; 0x1c96 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1c52:	88 89       	ldd	r24, Y+16	; 0x10
    1c54:	98 2f       	mov	r25, r24
    1c56:	9c 5f       	subi	r25, 0xFC	; 252
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	69 2f       	mov	r22, r25
    1c5c:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    1c60:	88 23       	and	r24, r24
    1c62:	b1 f4       	brne	.+44     	; 0x1c90 <KEYPAD_getPressedKey+0xbe>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1c64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c66:	88 2f       	mov	r24, r24
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	98 2f       	mov	r25, r24
    1c74:	88 89       	ldd	r24, Y+16	; 0x10
    1c76:	89 0f       	add	r24, r25
    1c78:	8f 5f       	subi	r24, 0xFF	; 255
    1c7a:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    1c7e:	60 96       	adiw	r28, 0x10	; 16
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	cf 91       	pop	r28
    1c8c:	df 91       	pop	r29
    1c8e:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1c90:	88 89       	ldd	r24, Y+16	; 0x10
    1c92:	8f 5f       	subi	r24, 0xFF	; 255
    1c94:	88 8b       	std	Y+16, r24	; 0x10
    1c96:	88 89       	ldd	r24, Y+16	; 0x10
    1c98:	84 30       	cpi	r24, 0x04	; 4
    1c9a:	d8 f2       	brcs	.-74     	; 0x1c52 <KEYPAD_getPressedKey+0x80>
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ca0:	40 e0       	ldi	r20, 0x00	; 0
    1ca2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	a0 e2       	ldi	r26, 0x20	; 32
    1cac:	b1 e4       	ldi	r27, 0x41	; 65
    1cae:	8b 87       	std	Y+11, r24	; 0x0b
    1cb0:	9c 87       	std	Y+12, r25	; 0x0c
    1cb2:	ad 87       	std	Y+13, r26	; 0x0d
    1cb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	4a ef       	ldi	r20, 0xFA	; 250
    1cc4:	54 e4       	ldi	r21, 0x44	; 68
    1cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	8f 83       	std	Y+7, r24	; 0x07
    1cd0:	98 87       	std	Y+8, r25	; 0x08
    1cd2:	a9 87       	std	Y+9, r26	; 0x09
    1cd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd8:	78 85       	ldd	r23, Y+8	; 0x08
    1cda:	89 85       	ldd	r24, Y+9	; 0x09
    1cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	40 e8       	ldi	r20, 0x80	; 128
    1ce4:	5f e3       	ldi	r21, 0x3F	; 63
    1ce6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cea:	88 23       	and	r24, r24
    1cec:	2c f4       	brge	.+10     	; 0x1cf8 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	9e 83       	std	Y+6, r25	; 0x06
    1cf4:	8d 83       	std	Y+5, r24	; 0x05
    1cf6:	3f c0       	rjmp	.+126    	; 0x1d76 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1cf8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfa:	78 85       	ldd	r23, Y+8	; 0x08
    1cfc:	89 85       	ldd	r24, Y+9	; 0x09
    1cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	3f ef       	ldi	r19, 0xFF	; 255
    1d04:	4f e7       	ldi	r20, 0x7F	; 127
    1d06:	57 e4       	ldi	r21, 0x47	; 71
    1d08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d0c:	18 16       	cp	r1, r24
    1d0e:	4c f5       	brge	.+82     	; 0x1d62 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e2       	ldi	r20, 0x20	; 32
    1d1e:	51 e4       	ldi	r21, 0x41	; 65
    1d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	bc 01       	movw	r22, r24
    1d2a:	cd 01       	movw	r24, r26
    1d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	9e 83       	std	Y+6, r25	; 0x06
    1d36:	8d 83       	std	Y+5, r24	; 0x05
    1d38:	0f c0       	rjmp	.+30     	; 0x1d58 <KEYPAD_getPressedKey+0x186>
    1d3a:	88 ec       	ldi	r24, 0xC8	; 200
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	9c 83       	std	Y+4, r25	; 0x04
    1d40:	8b 83       	std	Y+3, r24	; 0x03
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	9c 81       	ldd	r25, Y+4	; 0x04
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	f1 f7       	brne	.-4      	; 0x1d46 <KEYPAD_getPressedKey+0x174>
    1d4a:	9c 83       	std	Y+4, r25	; 0x04
    1d4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d50:	9e 81       	ldd	r25, Y+6	; 0x06
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	9e 83       	std	Y+6, r25	; 0x06
    1d56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d58:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5c:	00 97       	sbiw	r24, 0x00	; 0
    1d5e:	69 f7       	brne	.-38     	; 0x1d3a <KEYPAD_getPressedKey+0x168>
    1d60:	14 c0       	rjmp	.+40     	; 0x1d8a <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d62:	6f 81       	ldd	r22, Y+7	; 0x07
    1d64:	78 85       	ldd	r23, Y+8	; 0x08
    1d66:	89 85       	ldd	r24, Y+9	; 0x09
    1d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	9e 83       	std	Y+6, r25	; 0x06
    1d74:	8d 83       	std	Y+5, r24	; 0x05
    1d76:	8d 81       	ldd	r24, Y+5	; 0x05
    1d78:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7a:	9a 83       	std	Y+2, r25	; 0x02
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	9a 81       	ldd	r25, Y+2	; 0x02
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	f1 f7       	brne	.-4      	; 0x1d82 <KEYPAD_getPressedKey+0x1b0>
    1d86:	9a 83       	std	Y+2, r25	; 0x02
    1d88:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1d8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d8c:	8f 5f       	subi	r24, 0xFF	; 255
    1d8e:	8f 87       	std	Y+15, r24	; 0x0f
    1d90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d92:	84 30       	cpi	r24, 0x04	; 4
    1d94:	08 f4       	brcc	.+2      	; 0x1d98 <KEYPAD_getPressedKey+0x1c6>
    1d96:	51 cf       	rjmp	.-350    	; 0x1c3a <KEYPAD_getPressedKey+0x68>
    1d98:	4e cf       	rjmp	.-356    	; 0x1c36 <KEYPAD_getPressedKey+0x64>

00001d9a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1da0:	00 d0       	rcall	.+0      	; 0x1da2 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1da8:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	28 2f       	mov	r18, r24
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	3c 83       	std	Y+4, r19	; 0x04
    1db2:	2b 83       	std	Y+3, r18	; 0x03
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	9c 81       	ldd	r25, Y+4	; 0x04
    1db8:	88 30       	cpi	r24, 0x08	; 8
    1dba:	91 05       	cpc	r25, r1
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1dbe:	70 c0       	rjmp	.+224    	; 0x1ea0 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1dc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc2:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc4:	29 30       	cpi	r18, 0x09	; 9
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	5c f5       	brge	.+86     	; 0x1e20 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dce:	84 30       	cpi	r24, 0x04	; 4
    1dd0:	91 05       	cpc	r25, r1
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1dd4:	59 c0       	rjmp	.+178    	; 0x1e88 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1dd6:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dda:	25 30       	cpi	r18, 0x05	; 5
    1ddc:	31 05       	cpc	r19, r1
    1dde:	9c f4       	brge	.+38     	; 0x1e06 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	9c 81       	ldd	r25, Y+4	; 0x04
    1de4:	82 30       	cpi	r24, 0x02	; 2
    1de6:	91 05       	cpc	r25, r1
    1de8:	09 f4       	brne	.+2      	; 0x1dec <KEYPAD_4x4_adjustKeyNumber+0x52>
    1dea:	48 c0       	rjmp	.+144    	; 0x1e7c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1dec:	2b 81       	ldd	r18, Y+3	; 0x03
    1dee:	3c 81       	ldd	r19, Y+4	; 0x04
    1df0:	23 30       	cpi	r18, 0x03	; 3
    1df2:	31 05       	cpc	r19, r1
    1df4:	0c f0       	brlt	.+2      	; 0x1df8 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1df6:	45 c0       	rjmp	.+138    	; 0x1e82 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfc:	81 30       	cpi	r24, 0x01	; 1
    1dfe:	91 05       	cpc	r25, r1
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1e02:	39 c0       	rjmp	.+114    	; 0x1e76 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1e04:	67 c0       	rjmp	.+206    	; 0x1ed4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1e06:	2b 81       	ldd	r18, Y+3	; 0x03
    1e08:	3c 81       	ldd	r19, Y+4	; 0x04
    1e0a:	26 30       	cpi	r18, 0x06	; 6
    1e0c:	31 05       	cpc	r19, r1
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1e10:	41 c0       	rjmp	.+130    	; 0x1e94 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1e12:	8b 81       	ldd	r24, Y+3	; 0x03
    1e14:	9c 81       	ldd	r25, Y+4	; 0x04
    1e16:	87 30       	cpi	r24, 0x07	; 7
    1e18:	91 05       	cpc	r25, r1
    1e1a:	0c f0       	brlt	.+2      	; 0x1e1e <KEYPAD_4x4_adjustKeyNumber+0x84>
    1e1c:	3e c0       	rjmp	.+124    	; 0x1e9a <KEYPAD_4x4_adjustKeyNumber+0x100>
    1e1e:	37 c0       	rjmp	.+110    	; 0x1e8e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1e20:	2b 81       	ldd	r18, Y+3	; 0x03
    1e22:	3c 81       	ldd	r19, Y+4	; 0x04
    1e24:	2c 30       	cpi	r18, 0x0C	; 12
    1e26:	31 05       	cpc	r19, r1
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <KEYPAD_4x4_adjustKeyNumber+0x92>
    1e2a:	46 c0       	rjmp	.+140    	; 0x1eb8 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e30:	8d 30       	cpi	r24, 0x0D	; 13
    1e32:	91 05       	cpc	r25, r1
    1e34:	5c f4       	brge	.+22     	; 0x1e4c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1e36:	2b 81       	ldd	r18, Y+3	; 0x03
    1e38:	3c 81       	ldd	r19, Y+4	; 0x04
    1e3a:	2a 30       	cpi	r18, 0x0A	; 10
    1e3c:	31 05       	cpc	r19, r1
    1e3e:	b1 f1       	breq	.+108    	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0x112>
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	9c 81       	ldd	r25, Y+4	; 0x04
    1e44:	8b 30       	cpi	r24, 0x0B	; 11
    1e46:	91 05       	cpc	r25, r1
    1e48:	a4 f5       	brge	.+104    	; 0x1eb2 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1e4a:	2d c0       	rjmp	.+90     	; 0x1ea6 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1e4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e50:	2e 30       	cpi	r18, 0x0E	; 14
    1e52:	31 05       	cpc	r19, r1
    1e54:	b9 f1       	breq	.+110    	; 0x1ec4 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5a:	8e 30       	cpi	r24, 0x0E	; 14
    1e5c:	91 05       	cpc	r25, r1
    1e5e:	7c f1       	brlt	.+94     	; 0x1ebe <KEYPAD_4x4_adjustKeyNumber+0x124>
    1e60:	2b 81       	ldd	r18, Y+3	; 0x03
    1e62:	3c 81       	ldd	r19, Y+4	; 0x04
    1e64:	2f 30       	cpi	r18, 0x0F	; 15
    1e66:	31 05       	cpc	r19, r1
    1e68:	79 f1       	breq	.+94     	; 0x1ec8 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6e:	80 31       	cpi	r24, 0x10	; 16
    1e70:	91 05       	cpc	r25, r1
    1e72:	69 f1       	breq	.+90     	; 0x1ece <KEYPAD_4x4_adjustKeyNumber+0x134>
    1e74:	2f c0       	rjmp	.+94     	; 0x1ed4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1: keypad_button = 7;
    1e76:	87 e0       	ldi	r24, 0x07	; 7
    1e78:	89 83       	std	Y+1, r24	; 0x01
    1e7a:	2e c0       	rjmp	.+92     	; 0x1ed8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1e7c:	88 e0       	ldi	r24, 0x08	; 8
    1e7e:	89 83       	std	Y+1, r24	; 0x01
    1e80:	2b c0       	rjmp	.+86     	; 0x1ed8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1e82:	89 e0       	ldi	r24, 0x09	; 9
    1e84:	89 83       	std	Y+1, r24	; 0x01
    1e86:	28 c0       	rjmp	.+80     	; 0x1ed8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1e88:	85 e2       	ldi	r24, 0x25	; 37
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	25 c0       	rjmp	.+74     	; 0x1ed8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1e8e:	84 e0       	ldi	r24, 0x04	; 4
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	22 c0       	rjmp	.+68     	; 0x1ed8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1e94:	85 e0       	ldi	r24, 0x05	; 5
    1e96:	89 83       	std	Y+1, r24	; 0x01
    1e98:	1f c0       	rjmp	.+62     	; 0x1ed8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1e9a:	86 e0       	ldi	r24, 0x06	; 6
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    1e9e:	1c c0       	rjmp	.+56     	; 0x1ed8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1ea0:	8a e2       	ldi	r24, 0x2A	; 42
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    1ea4:	19 c0       	rjmp	.+50     	; 0x1ed8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	16 c0       	rjmp	.+44     	; 0x1ed8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1eac:	82 e0       	ldi	r24, 0x02	; 2
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	13 c0       	rjmp	.+38     	; 0x1ed8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1eb2:	83 e0       	ldi	r24, 0x03	; 3
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	10 c0       	rjmp	.+32     	; 0x1ed8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '/' */
    1eb8:	8d e2       	ldi	r24, 0x2D	; 45
    1eba:	89 83       	std	Y+1, r24	; 0x01
    1ebc:	0d c0       	rjmp	.+26     	; 0x1ed8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = '=';  /* ASCII of '-' */
    1ebe:	8d e3       	ldi	r24, 0x3D	; 61
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	0a c0       	rjmp	.+20     	; 0x1ed8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1ec4:	19 82       	std	Y+1, r1	; 0x01
    1ec6:	08 c0       	rjmp	.+16     	; 0x1ed8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '#'; /* ASCII Code of '+' */
    1ec8:	83 e2       	ldi	r24, 0x23	; 35
    1eca:	89 83       	std	Y+1, r24	; 0x01
    1ecc:	05 c0       	rjmp	.+10     	; 0x1ed8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII of Enter */
    1ece:	8b e2       	ldi	r24, 0x2B	; 43
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	2e 97       	sbiw	r28, 0x0e	; 14
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1efc:	82 e0       	ldi	r24, 0x02	; 2
    1efe:	60 e0       	ldi	r22, 0x00	; 0
    1f00:	41 e0       	ldi	r20, 0x01	; 1
    1f02:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1f06:	82 e0       	ldi	r24, 0x02	; 2
    1f08:	61 e0       	ldi	r22, 0x01	; 1
    1f0a:	41 e0       	ldi	r20, 0x01	; 1
    1f0c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	a0 ea       	ldi	r26, 0xA0	; 160
    1f16:	b1 e4       	ldi	r27, 0x41	; 65
    1f18:	8b 87       	std	Y+11, r24	; 0x0b
    1f1a:	9c 87       	std	Y+12, r25	; 0x0c
    1f1c:	ad 87       	std	Y+13, r26	; 0x0d
    1f1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	4a ef       	ldi	r20, 0xFA	; 250
    1f2e:	54 e4       	ldi	r21, 0x44	; 68
    1f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	8f 83       	std	Y+7, r24	; 0x07
    1f3a:	98 87       	std	Y+8, r25	; 0x08
    1f3c:	a9 87       	std	Y+9, r26	; 0x09
    1f3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f40:	6f 81       	ldd	r22, Y+7	; 0x07
    1f42:	78 85       	ldd	r23, Y+8	; 0x08
    1f44:	89 85       	ldd	r24, Y+9	; 0x09
    1f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	40 e8       	ldi	r20, 0x80	; 128
    1f4e:	5f e3       	ldi	r21, 0x3F	; 63
    1f50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f54:	88 23       	and	r24, r24
    1f56:	2c f4       	brge	.+10     	; 0x1f62 <LCD_init+0x7a>
		__ticks = 1;
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	9e 83       	std	Y+6, r25	; 0x06
    1f5e:	8d 83       	std	Y+5, r24	; 0x05
    1f60:	3f c0       	rjmp	.+126    	; 0x1fe0 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1f62:	6f 81       	ldd	r22, Y+7	; 0x07
    1f64:	78 85       	ldd	r23, Y+8	; 0x08
    1f66:	89 85       	ldd	r24, Y+9	; 0x09
    1f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	3f ef       	ldi	r19, 0xFF	; 255
    1f6e:	4f e7       	ldi	r20, 0x7F	; 127
    1f70:	57 e4       	ldi	r21, 0x47	; 71
    1f72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f76:	18 16       	cp	r1, r24
    1f78:	4c f5       	brge	.+82     	; 0x1fcc <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e2       	ldi	r20, 0x20	; 32
    1f88:	51 e4       	ldi	r21, 0x41	; 65
    1f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	bc 01       	movw	r22, r24
    1f94:	cd 01       	movw	r24, r26
    1f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	9e 83       	std	Y+6, r25	; 0x06
    1fa0:	8d 83       	std	Y+5, r24	; 0x05
    1fa2:	0f c0       	rjmp	.+30     	; 0x1fc2 <LCD_init+0xda>
    1fa4:	88 ec       	ldi	r24, 0xC8	; 200
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	9c 83       	std	Y+4, r25	; 0x04
    1faa:	8b 83       	std	Y+3, r24	; 0x03
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	f1 f7       	brne	.-4      	; 0x1fb0 <LCD_init+0xc8>
    1fb4:	9c 83       	std	Y+4, r25	; 0x04
    1fb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fba:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	9e 83       	std	Y+6, r25	; 0x06
    1fc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc6:	00 97       	sbiw	r24, 0x00	; 0
    1fc8:	69 f7       	brne	.-38     	; 0x1fa4 <LCD_init+0xbc>
    1fca:	14 c0       	rjmp	.+40     	; 0x1ff4 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fce:	78 85       	ldd	r23, Y+8	; 0x08
    1fd0:	89 85       	ldd	r24, Y+9	; 0x09
    1fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	9e 83       	std	Y+6, r25	; 0x06
    1fde:	8d 83       	std	Y+5, r24	; 0x05
    1fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe4:	9a 83       	std	Y+2, r25	; 0x02
    1fe6:	89 83       	std	Y+1, r24	; 0x01
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	9a 81       	ldd	r25, Y+2	; 0x02
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <LCD_init+0x104>
    1ff0:	9a 83       	std	Y+2, r25	; 0x02
    1ff2:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	6f ef       	ldi	r22, 0xFF	; 255
    1ff8:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1ffc:	88 e3       	ldi	r24, 0x38	; 56
    1ffe:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2002:	8c e0       	ldi	r24, 0x0C	; 12
    2004:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_sendCommand>
}
    200e:	2e 96       	adiw	r28, 0x0e	; 14
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	cd bf       	out	0x3d, r28	; 61
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	e9 97       	sbiw	r28, 0x39	; 57
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2036:	82 e0       	ldi	r24, 0x02	; 2
    2038:	60 e0       	ldi	r22, 0x00	; 0
    203a:	40 e0       	ldi	r20, 0x00	; 0
    203c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	a0 e8       	ldi	r26, 0x80	; 128
    2046:	bf e3       	ldi	r27, 0x3F	; 63
    2048:	8d ab       	std	Y+53, r24	; 0x35
    204a:	9e ab       	std	Y+54, r25	; 0x36
    204c:	af ab       	std	Y+55, r26	; 0x37
    204e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2050:	6d a9       	ldd	r22, Y+53	; 0x35
    2052:	7e a9       	ldd	r23, Y+54	; 0x36
    2054:	8f a9       	ldd	r24, Y+55	; 0x37
    2056:	98 ad       	ldd	r25, Y+56	; 0x38
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	4a ef       	ldi	r20, 0xFA	; 250
    205e:	54 e4       	ldi	r21, 0x44	; 68
    2060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	89 ab       	std	Y+49, r24	; 0x31
    206a:	9a ab       	std	Y+50, r25	; 0x32
    206c:	ab ab       	std	Y+51, r26	; 0x33
    206e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2070:	69 a9       	ldd	r22, Y+49	; 0x31
    2072:	7a a9       	ldd	r23, Y+50	; 0x32
    2074:	8b a9       	ldd	r24, Y+51	; 0x33
    2076:	9c a9       	ldd	r25, Y+52	; 0x34
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e8       	ldi	r20, 0x80	; 128
    207e:	5f e3       	ldi	r21, 0x3F	; 63
    2080:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2084:	88 23       	and	r24, r24
    2086:	2c f4       	brge	.+10     	; 0x2092 <LCD_sendCommand+0x72>
		__ticks = 1;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	98 ab       	std	Y+48, r25	; 0x30
    208e:	8f a7       	std	Y+47, r24	; 0x2f
    2090:	3f c0       	rjmp	.+126    	; 0x2110 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2092:	69 a9       	ldd	r22, Y+49	; 0x31
    2094:	7a a9       	ldd	r23, Y+50	; 0x32
    2096:	8b a9       	ldd	r24, Y+51	; 0x33
    2098:	9c a9       	ldd	r25, Y+52	; 0x34
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	3f ef       	ldi	r19, 0xFF	; 255
    209e:	4f e7       	ldi	r20, 0x7F	; 127
    20a0:	57 e4       	ldi	r21, 0x47	; 71
    20a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20a6:	18 16       	cp	r1, r24
    20a8:	4c f5       	brge	.+82     	; 0x20fc <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20aa:	6d a9       	ldd	r22, Y+53	; 0x35
    20ac:	7e a9       	ldd	r23, Y+54	; 0x36
    20ae:	8f a9       	ldd	r24, Y+55	; 0x37
    20b0:	98 ad       	ldd	r25, Y+56	; 0x38
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e2       	ldi	r20, 0x20	; 32
    20b8:	51 e4       	ldi	r21, 0x41	; 65
    20ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	bc 01       	movw	r22, r24
    20c4:	cd 01       	movw	r24, r26
    20c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	98 ab       	std	Y+48, r25	; 0x30
    20d0:	8f a7       	std	Y+47, r24	; 0x2f
    20d2:	0f c0       	rjmp	.+30     	; 0x20f2 <LCD_sendCommand+0xd2>
    20d4:	88 ec       	ldi	r24, 0xC8	; 200
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	9e a7       	std	Y+46, r25	; 0x2e
    20da:	8d a7       	std	Y+45, r24	; 0x2d
    20dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    20de:	9e a5       	ldd	r25, Y+46	; 0x2e
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <LCD_sendCommand+0xc0>
    20e4:	9e a7       	std	Y+46, r25	; 0x2e
    20e6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ea:	98 a9       	ldd	r25, Y+48	; 0x30
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	98 ab       	std	Y+48, r25	; 0x30
    20f0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    20f4:	98 a9       	ldd	r25, Y+48	; 0x30
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	69 f7       	brne	.-38     	; 0x20d4 <LCD_sendCommand+0xb4>
    20fa:	14 c0       	rjmp	.+40     	; 0x2124 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fc:	69 a9       	ldd	r22, Y+49	; 0x31
    20fe:	7a a9       	ldd	r23, Y+50	; 0x32
    2100:	8b a9       	ldd	r24, Y+51	; 0x33
    2102:	9c a9       	ldd	r25, Y+52	; 0x34
    2104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	98 ab       	std	Y+48, r25	; 0x30
    210e:	8f a7       	std	Y+47, r24	; 0x2f
    2110:	8f a5       	ldd	r24, Y+47	; 0x2f
    2112:	98 a9       	ldd	r25, Y+48	; 0x30
    2114:	9c a7       	std	Y+44, r25	; 0x2c
    2116:	8b a7       	std	Y+43, r24	; 0x2b
    2118:	8b a5       	ldd	r24, Y+43	; 0x2b
    211a:	9c a5       	ldd	r25, Y+44	; 0x2c
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <LCD_sendCommand+0xfc>
    2120:	9c a7       	std	Y+44, r25	; 0x2c
    2122:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2124:	82 e0       	ldi	r24, 0x02	; 2
    2126:	61 e0       	ldi	r22, 0x01	; 1
    2128:	41 e0       	ldi	r20, 0x01	; 1
    212a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	a0 e8       	ldi	r26, 0x80	; 128
    2134:	bf e3       	ldi	r27, 0x3F	; 63
    2136:	8f a3       	std	Y+39, r24	; 0x27
    2138:	98 a7       	std	Y+40, r25	; 0x28
    213a:	a9 a7       	std	Y+41, r26	; 0x29
    213c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213e:	6f a1       	ldd	r22, Y+39	; 0x27
    2140:	78 a5       	ldd	r23, Y+40	; 0x28
    2142:	89 a5       	ldd	r24, Y+41	; 0x29
    2144:	9a a5       	ldd	r25, Y+42	; 0x2a
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	4a ef       	ldi	r20, 0xFA	; 250
    214c:	54 e4       	ldi	r21, 0x44	; 68
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	8b a3       	std	Y+35, r24	; 0x23
    2158:	9c a3       	std	Y+36, r25	; 0x24
    215a:	ad a3       	std	Y+37, r26	; 0x25
    215c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    215e:	6b a1       	ldd	r22, Y+35	; 0x23
    2160:	7c a1       	ldd	r23, Y+36	; 0x24
    2162:	8d a1       	ldd	r24, Y+37	; 0x25
    2164:	9e a1       	ldd	r25, Y+38	; 0x26
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e8       	ldi	r20, 0x80	; 128
    216c:	5f e3       	ldi	r21, 0x3F	; 63
    216e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2172:	88 23       	and	r24, r24
    2174:	2c f4       	brge	.+10     	; 0x2180 <LCD_sendCommand+0x160>
		__ticks = 1;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	9a a3       	std	Y+34, r25	; 0x22
    217c:	89 a3       	std	Y+33, r24	; 0x21
    217e:	3f c0       	rjmp	.+126    	; 0x21fe <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2180:	6b a1       	ldd	r22, Y+35	; 0x23
    2182:	7c a1       	ldd	r23, Y+36	; 0x24
    2184:	8d a1       	ldd	r24, Y+37	; 0x25
    2186:	9e a1       	ldd	r25, Y+38	; 0x26
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	3f ef       	ldi	r19, 0xFF	; 255
    218c:	4f e7       	ldi	r20, 0x7F	; 127
    218e:	57 e4       	ldi	r21, 0x47	; 71
    2190:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2194:	18 16       	cp	r1, r24
    2196:	4c f5       	brge	.+82     	; 0x21ea <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2198:	6f a1       	ldd	r22, Y+39	; 0x27
    219a:	78 a5       	ldd	r23, Y+40	; 0x28
    219c:	89 a5       	ldd	r24, Y+41	; 0x29
    219e:	9a a5       	ldd	r25, Y+42	; 0x2a
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e2       	ldi	r20, 0x20	; 32
    21a6:	51 e4       	ldi	r21, 0x41	; 65
    21a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	bc 01       	movw	r22, r24
    21b2:	cd 01       	movw	r24, r26
    21b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	9a a3       	std	Y+34, r25	; 0x22
    21be:	89 a3       	std	Y+33, r24	; 0x21
    21c0:	0f c0       	rjmp	.+30     	; 0x21e0 <LCD_sendCommand+0x1c0>
    21c2:	88 ec       	ldi	r24, 0xC8	; 200
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	98 a3       	std	Y+32, r25	; 0x20
    21c8:	8f 8f       	std	Y+31, r24	; 0x1f
    21ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21cc:	98 a1       	ldd	r25, Y+32	; 0x20
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <LCD_sendCommand+0x1ae>
    21d2:	98 a3       	std	Y+32, r25	; 0x20
    21d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d6:	89 a1       	ldd	r24, Y+33	; 0x21
    21d8:	9a a1       	ldd	r25, Y+34	; 0x22
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	9a a3       	std	Y+34, r25	; 0x22
    21de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e0:	89 a1       	ldd	r24, Y+33	; 0x21
    21e2:	9a a1       	ldd	r25, Y+34	; 0x22
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	69 f7       	brne	.-38     	; 0x21c2 <LCD_sendCommand+0x1a2>
    21e8:	14 c0       	rjmp	.+40     	; 0x2212 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ea:	6b a1       	ldd	r22, Y+35	; 0x23
    21ec:	7c a1       	ldd	r23, Y+36	; 0x24
    21ee:	8d a1       	ldd	r24, Y+37	; 0x25
    21f0:	9e a1       	ldd	r25, Y+38	; 0x26
    21f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	9a a3       	std	Y+34, r25	; 0x22
    21fc:	89 a3       	std	Y+33, r24	; 0x21
    21fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2200:	9a a1       	ldd	r25, Y+34	; 0x22
    2202:	9e 8f       	std	Y+30, r25	; 0x1e
    2204:	8d 8f       	std	Y+29, r24	; 0x1d
    2206:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2208:	9e 8d       	ldd	r25, Y+30	; 0x1e
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <LCD_sendCommand+0x1ea>
    220e:	9e 8f       	std	Y+30, r25	; 0x1e
    2210:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	69 ad       	ldd	r22, Y+57	; 0x39
    2216:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	a0 e8       	ldi	r26, 0x80	; 128
    2220:	bf e3       	ldi	r27, 0x3F	; 63
    2222:	89 8f       	std	Y+25, r24	; 0x19
    2224:	9a 8f       	std	Y+26, r25	; 0x1a
    2226:	ab 8f       	std	Y+27, r26	; 0x1b
    2228:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222a:	69 8d       	ldd	r22, Y+25	; 0x19
    222c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    222e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2230:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	4a ef       	ldi	r20, 0xFA	; 250
    2238:	54 e4       	ldi	r21, 0x44	; 68
    223a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	8d 8b       	std	Y+21, r24	; 0x15
    2244:	9e 8b       	std	Y+22, r25	; 0x16
    2246:	af 8b       	std	Y+23, r26	; 0x17
    2248:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    224a:	6d 89       	ldd	r22, Y+21	; 0x15
    224c:	7e 89       	ldd	r23, Y+22	; 0x16
    224e:	8f 89       	ldd	r24, Y+23	; 0x17
    2250:	98 8d       	ldd	r25, Y+24	; 0x18
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e8       	ldi	r20, 0x80	; 128
    2258:	5f e3       	ldi	r21, 0x3F	; 63
    225a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    225e:	88 23       	and	r24, r24
    2260:	2c f4       	brge	.+10     	; 0x226c <LCD_sendCommand+0x24c>
		__ticks = 1;
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	9c 8b       	std	Y+20, r25	; 0x14
    2268:	8b 8b       	std	Y+19, r24	; 0x13
    226a:	3f c0       	rjmp	.+126    	; 0x22ea <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    226c:	6d 89       	ldd	r22, Y+21	; 0x15
    226e:	7e 89       	ldd	r23, Y+22	; 0x16
    2270:	8f 89       	ldd	r24, Y+23	; 0x17
    2272:	98 8d       	ldd	r25, Y+24	; 0x18
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	3f ef       	ldi	r19, 0xFF	; 255
    2278:	4f e7       	ldi	r20, 0x7F	; 127
    227a:	57 e4       	ldi	r21, 0x47	; 71
    227c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2280:	18 16       	cp	r1, r24
    2282:	4c f5       	brge	.+82     	; 0x22d6 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2284:	69 8d       	ldd	r22, Y+25	; 0x19
    2286:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2288:	8b 8d       	ldd	r24, Y+27	; 0x1b
    228a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	40 e2       	ldi	r20, 0x20	; 32
    2292:	51 e4       	ldi	r21, 0x41	; 65
    2294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	bc 01       	movw	r22, r24
    229e:	cd 01       	movw	r24, r26
    22a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	9c 8b       	std	Y+20, r25	; 0x14
    22aa:	8b 8b       	std	Y+19, r24	; 0x13
    22ac:	0f c0       	rjmp	.+30     	; 0x22cc <LCD_sendCommand+0x2ac>
    22ae:	88 ec       	ldi	r24, 0xC8	; 200
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	9a 8b       	std	Y+18, r25	; 0x12
    22b4:	89 8b       	std	Y+17, r24	; 0x11
    22b6:	89 89       	ldd	r24, Y+17	; 0x11
    22b8:	9a 89       	ldd	r25, Y+18	; 0x12
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	f1 f7       	brne	.-4      	; 0x22ba <LCD_sendCommand+0x29a>
    22be:	9a 8b       	std	Y+18, r25	; 0x12
    22c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c2:	8b 89       	ldd	r24, Y+19	; 0x13
    22c4:	9c 89       	ldd	r25, Y+20	; 0x14
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	9c 8b       	std	Y+20, r25	; 0x14
    22ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22cc:	8b 89       	ldd	r24, Y+19	; 0x13
    22ce:	9c 89       	ldd	r25, Y+20	; 0x14
    22d0:	00 97       	sbiw	r24, 0x00	; 0
    22d2:	69 f7       	brne	.-38     	; 0x22ae <LCD_sendCommand+0x28e>
    22d4:	14 c0       	rjmp	.+40     	; 0x22fe <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d6:	6d 89       	ldd	r22, Y+21	; 0x15
    22d8:	7e 89       	ldd	r23, Y+22	; 0x16
    22da:	8f 89       	ldd	r24, Y+23	; 0x17
    22dc:	98 8d       	ldd	r25, Y+24	; 0x18
    22de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	9c 8b       	std	Y+20, r25	; 0x14
    22e8:	8b 8b       	std	Y+19, r24	; 0x13
    22ea:	8b 89       	ldd	r24, Y+19	; 0x13
    22ec:	9c 89       	ldd	r25, Y+20	; 0x14
    22ee:	98 8b       	std	Y+16, r25	; 0x10
    22f0:	8f 87       	std	Y+15, r24	; 0x0f
    22f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22f4:	98 89       	ldd	r25, Y+16	; 0x10
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	f1 f7       	brne	.-4      	; 0x22f6 <LCD_sendCommand+0x2d6>
    22fa:	98 8b       	std	Y+16, r25	; 0x10
    22fc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    22fe:	82 e0       	ldi	r24, 0x02	; 2
    2300:	61 e0       	ldi	r22, 0x01	; 1
    2302:	40 e0       	ldi	r20, 0x00	; 0
    2304:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	a0 e8       	ldi	r26, 0x80	; 128
    230e:	bf e3       	ldi	r27, 0x3F	; 63
    2310:	8b 87       	std	Y+11, r24	; 0x0b
    2312:	9c 87       	std	Y+12, r25	; 0x0c
    2314:	ad 87       	std	Y+13, r26	; 0x0d
    2316:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2318:	6b 85       	ldd	r22, Y+11	; 0x0b
    231a:	7c 85       	ldd	r23, Y+12	; 0x0c
    231c:	8d 85       	ldd	r24, Y+13	; 0x0d
    231e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	4a ef       	ldi	r20, 0xFA	; 250
    2326:	54 e4       	ldi	r21, 0x44	; 68
    2328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	8f 83       	std	Y+7, r24	; 0x07
    2332:	98 87       	std	Y+8, r25	; 0x08
    2334:	a9 87       	std	Y+9, r26	; 0x09
    2336:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2338:	6f 81       	ldd	r22, Y+7	; 0x07
    233a:	78 85       	ldd	r23, Y+8	; 0x08
    233c:	89 85       	ldd	r24, Y+9	; 0x09
    233e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	40 e8       	ldi	r20, 0x80	; 128
    2346:	5f e3       	ldi	r21, 0x3F	; 63
    2348:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    234c:	88 23       	and	r24, r24
    234e:	2c f4       	brge	.+10     	; 0x235a <LCD_sendCommand+0x33a>
		__ticks = 1;
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	9e 83       	std	Y+6, r25	; 0x06
    2356:	8d 83       	std	Y+5, r24	; 0x05
    2358:	3f c0       	rjmp	.+126    	; 0x23d8 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    235a:	6f 81       	ldd	r22, Y+7	; 0x07
    235c:	78 85       	ldd	r23, Y+8	; 0x08
    235e:	89 85       	ldd	r24, Y+9	; 0x09
    2360:	9a 85       	ldd	r25, Y+10	; 0x0a
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	3f ef       	ldi	r19, 0xFF	; 255
    2366:	4f e7       	ldi	r20, 0x7F	; 127
    2368:	57 e4       	ldi	r21, 0x47	; 71
    236a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    236e:	18 16       	cp	r1, r24
    2370:	4c f5       	brge	.+82     	; 0x23c4 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2372:	6b 85       	ldd	r22, Y+11	; 0x0b
    2374:	7c 85       	ldd	r23, Y+12	; 0x0c
    2376:	8d 85       	ldd	r24, Y+13	; 0x0d
    2378:	9e 85       	ldd	r25, Y+14	; 0x0e
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e2       	ldi	r20, 0x20	; 32
    2380:	51 e4       	ldi	r21, 0x41	; 65
    2382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	bc 01       	movw	r22, r24
    238c:	cd 01       	movw	r24, r26
    238e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	9e 83       	std	Y+6, r25	; 0x06
    2398:	8d 83       	std	Y+5, r24	; 0x05
    239a:	0f c0       	rjmp	.+30     	; 0x23ba <LCD_sendCommand+0x39a>
    239c:	88 ec       	ldi	r24, 0xC8	; 200
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	9c 83       	std	Y+4, r25	; 0x04
    23a2:	8b 83       	std	Y+3, r24	; 0x03
    23a4:	8b 81       	ldd	r24, Y+3	; 0x03
    23a6:	9c 81       	ldd	r25, Y+4	; 0x04
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <LCD_sendCommand+0x388>
    23ac:	9c 83       	std	Y+4, r25	; 0x04
    23ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b0:	8d 81       	ldd	r24, Y+5	; 0x05
    23b2:	9e 81       	ldd	r25, Y+6	; 0x06
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	9e 83       	std	Y+6, r25	; 0x06
    23b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ba:	8d 81       	ldd	r24, Y+5	; 0x05
    23bc:	9e 81       	ldd	r25, Y+6	; 0x06
    23be:	00 97       	sbiw	r24, 0x00	; 0
    23c0:	69 f7       	brne	.-38     	; 0x239c <LCD_sendCommand+0x37c>
    23c2:	14 c0       	rjmp	.+40     	; 0x23ec <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c4:	6f 81       	ldd	r22, Y+7	; 0x07
    23c6:	78 85       	ldd	r23, Y+8	; 0x08
    23c8:	89 85       	ldd	r24, Y+9	; 0x09
    23ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    23cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	9e 83       	std	Y+6, r25	; 0x06
    23d6:	8d 83       	std	Y+5, r24	; 0x05
    23d8:	8d 81       	ldd	r24, Y+5	; 0x05
    23da:	9e 81       	ldd	r25, Y+6	; 0x06
    23dc:	9a 83       	std	Y+2, r25	; 0x02
    23de:	89 83       	std	Y+1, r24	; 0x01
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	9a 81       	ldd	r25, Y+2	; 0x02
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	f1 f7       	brne	.-4      	; 0x23e4 <LCD_sendCommand+0x3c4>
    23e8:	9a 83       	std	Y+2, r25	; 0x02
    23ea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    23ec:	e9 96       	adiw	r28, 0x39	; 57
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	e9 97       	sbiw	r28, 0x39	; 57
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	de bf       	out	0x3e, r29	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	cd bf       	out	0x3d, r28	; 61
    2412:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2414:	82 e0       	ldi	r24, 0x02	; 2
    2416:	60 e0       	ldi	r22, 0x00	; 0
    2418:	41 e0       	ldi	r20, 0x01	; 1
    241a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	a0 e8       	ldi	r26, 0x80	; 128
    2424:	bf e3       	ldi	r27, 0x3F	; 63
    2426:	8d ab       	std	Y+53, r24	; 0x35
    2428:	9e ab       	std	Y+54, r25	; 0x36
    242a:	af ab       	std	Y+55, r26	; 0x37
    242c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242e:	6d a9       	ldd	r22, Y+53	; 0x35
    2430:	7e a9       	ldd	r23, Y+54	; 0x36
    2432:	8f a9       	ldd	r24, Y+55	; 0x37
    2434:	98 ad       	ldd	r25, Y+56	; 0x38
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	4a ef       	ldi	r20, 0xFA	; 250
    243c:	54 e4       	ldi	r21, 0x44	; 68
    243e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	89 ab       	std	Y+49, r24	; 0x31
    2448:	9a ab       	std	Y+50, r25	; 0x32
    244a:	ab ab       	std	Y+51, r26	; 0x33
    244c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    244e:	69 a9       	ldd	r22, Y+49	; 0x31
    2450:	7a a9       	ldd	r23, Y+50	; 0x32
    2452:	8b a9       	ldd	r24, Y+51	; 0x33
    2454:	9c a9       	ldd	r25, Y+52	; 0x34
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e8       	ldi	r20, 0x80	; 128
    245c:	5f e3       	ldi	r21, 0x3F	; 63
    245e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2462:	88 23       	and	r24, r24
    2464:	2c f4       	brge	.+10     	; 0x2470 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	98 ab       	std	Y+48, r25	; 0x30
    246c:	8f a7       	std	Y+47, r24	; 0x2f
    246e:	3f c0       	rjmp	.+126    	; 0x24ee <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2470:	69 a9       	ldd	r22, Y+49	; 0x31
    2472:	7a a9       	ldd	r23, Y+50	; 0x32
    2474:	8b a9       	ldd	r24, Y+51	; 0x33
    2476:	9c a9       	ldd	r25, Y+52	; 0x34
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	3f ef       	ldi	r19, 0xFF	; 255
    247c:	4f e7       	ldi	r20, 0x7F	; 127
    247e:	57 e4       	ldi	r21, 0x47	; 71
    2480:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2484:	18 16       	cp	r1, r24
    2486:	4c f5       	brge	.+82     	; 0x24da <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2488:	6d a9       	ldd	r22, Y+53	; 0x35
    248a:	7e a9       	ldd	r23, Y+54	; 0x36
    248c:	8f a9       	ldd	r24, Y+55	; 0x37
    248e:	98 ad       	ldd	r25, Y+56	; 0x38
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	40 e2       	ldi	r20, 0x20	; 32
    2496:	51 e4       	ldi	r21, 0x41	; 65
    2498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	bc 01       	movw	r22, r24
    24a2:	cd 01       	movw	r24, r26
    24a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	98 ab       	std	Y+48, r25	; 0x30
    24ae:	8f a7       	std	Y+47, r24	; 0x2f
    24b0:	0f c0       	rjmp	.+30     	; 0x24d0 <LCD_displayCharacter+0xd2>
    24b2:	88 ec       	ldi	r24, 0xC8	; 200
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	9e a7       	std	Y+46, r25	; 0x2e
    24b8:	8d a7       	std	Y+45, r24	; 0x2d
    24ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    24bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	f1 f7       	brne	.-4      	; 0x24be <LCD_displayCharacter+0xc0>
    24c2:	9e a7       	std	Y+46, r25	; 0x2e
    24c4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24c8:	98 a9       	ldd	r25, Y+48	; 0x30
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	98 ab       	std	Y+48, r25	; 0x30
    24ce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24d2:	98 a9       	ldd	r25, Y+48	; 0x30
    24d4:	00 97       	sbiw	r24, 0x00	; 0
    24d6:	69 f7       	brne	.-38     	; 0x24b2 <LCD_displayCharacter+0xb4>
    24d8:	14 c0       	rjmp	.+40     	; 0x2502 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24da:	69 a9       	ldd	r22, Y+49	; 0x31
    24dc:	7a a9       	ldd	r23, Y+50	; 0x32
    24de:	8b a9       	ldd	r24, Y+51	; 0x33
    24e0:	9c a9       	ldd	r25, Y+52	; 0x34
    24e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	98 ab       	std	Y+48, r25	; 0x30
    24ec:	8f a7       	std	Y+47, r24	; 0x2f
    24ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    24f0:	98 a9       	ldd	r25, Y+48	; 0x30
    24f2:	9c a7       	std	Y+44, r25	; 0x2c
    24f4:	8b a7       	std	Y+43, r24	; 0x2b
    24f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    24f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	f1 f7       	brne	.-4      	; 0x24fa <LCD_displayCharacter+0xfc>
    24fe:	9c a7       	std	Y+44, r25	; 0x2c
    2500:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2502:	82 e0       	ldi	r24, 0x02	; 2
    2504:	61 e0       	ldi	r22, 0x01	; 1
    2506:	41 e0       	ldi	r20, 0x01	; 1
    2508:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	a0 e8       	ldi	r26, 0x80	; 128
    2512:	bf e3       	ldi	r27, 0x3F	; 63
    2514:	8f a3       	std	Y+39, r24	; 0x27
    2516:	98 a7       	std	Y+40, r25	; 0x28
    2518:	a9 a7       	std	Y+41, r26	; 0x29
    251a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251c:	6f a1       	ldd	r22, Y+39	; 0x27
    251e:	78 a5       	ldd	r23, Y+40	; 0x28
    2520:	89 a5       	ldd	r24, Y+41	; 0x29
    2522:	9a a5       	ldd	r25, Y+42	; 0x2a
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	4a ef       	ldi	r20, 0xFA	; 250
    252a:	54 e4       	ldi	r21, 0x44	; 68
    252c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	8b a3       	std	Y+35, r24	; 0x23
    2536:	9c a3       	std	Y+36, r25	; 0x24
    2538:	ad a3       	std	Y+37, r26	; 0x25
    253a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    253c:	6b a1       	ldd	r22, Y+35	; 0x23
    253e:	7c a1       	ldd	r23, Y+36	; 0x24
    2540:	8d a1       	ldd	r24, Y+37	; 0x25
    2542:	9e a1       	ldd	r25, Y+38	; 0x26
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e8       	ldi	r20, 0x80	; 128
    254a:	5f e3       	ldi	r21, 0x3F	; 63
    254c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2550:	88 23       	and	r24, r24
    2552:	2c f4       	brge	.+10     	; 0x255e <LCD_displayCharacter+0x160>
		__ticks = 1;
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	9a a3       	std	Y+34, r25	; 0x22
    255a:	89 a3       	std	Y+33, r24	; 0x21
    255c:	3f c0       	rjmp	.+126    	; 0x25dc <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    255e:	6b a1       	ldd	r22, Y+35	; 0x23
    2560:	7c a1       	ldd	r23, Y+36	; 0x24
    2562:	8d a1       	ldd	r24, Y+37	; 0x25
    2564:	9e a1       	ldd	r25, Y+38	; 0x26
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	3f ef       	ldi	r19, 0xFF	; 255
    256a:	4f e7       	ldi	r20, 0x7F	; 127
    256c:	57 e4       	ldi	r21, 0x47	; 71
    256e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2572:	18 16       	cp	r1, r24
    2574:	4c f5       	brge	.+82     	; 0x25c8 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2576:	6f a1       	ldd	r22, Y+39	; 0x27
    2578:	78 a5       	ldd	r23, Y+40	; 0x28
    257a:	89 a5       	ldd	r24, Y+41	; 0x29
    257c:	9a a5       	ldd	r25, Y+42	; 0x2a
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e2       	ldi	r20, 0x20	; 32
    2584:	51 e4       	ldi	r21, 0x41	; 65
    2586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	bc 01       	movw	r22, r24
    2590:	cd 01       	movw	r24, r26
    2592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	9a a3       	std	Y+34, r25	; 0x22
    259c:	89 a3       	std	Y+33, r24	; 0x21
    259e:	0f c0       	rjmp	.+30     	; 0x25be <LCD_displayCharacter+0x1c0>
    25a0:	88 ec       	ldi	r24, 0xC8	; 200
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	98 a3       	std	Y+32, r25	; 0x20
    25a6:	8f 8f       	std	Y+31, r24	; 0x1f
    25a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25aa:	98 a1       	ldd	r25, Y+32	; 0x20
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <LCD_displayCharacter+0x1ae>
    25b0:	98 a3       	std	Y+32, r25	; 0x20
    25b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b4:	89 a1       	ldd	r24, Y+33	; 0x21
    25b6:	9a a1       	ldd	r25, Y+34	; 0x22
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	9a a3       	std	Y+34, r25	; 0x22
    25bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25be:	89 a1       	ldd	r24, Y+33	; 0x21
    25c0:	9a a1       	ldd	r25, Y+34	; 0x22
    25c2:	00 97       	sbiw	r24, 0x00	; 0
    25c4:	69 f7       	brne	.-38     	; 0x25a0 <LCD_displayCharacter+0x1a2>
    25c6:	14 c0       	rjmp	.+40     	; 0x25f0 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c8:	6b a1       	ldd	r22, Y+35	; 0x23
    25ca:	7c a1       	ldd	r23, Y+36	; 0x24
    25cc:	8d a1       	ldd	r24, Y+37	; 0x25
    25ce:	9e a1       	ldd	r25, Y+38	; 0x26
    25d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	9a a3       	std	Y+34, r25	; 0x22
    25da:	89 a3       	std	Y+33, r24	; 0x21
    25dc:	89 a1       	ldd	r24, Y+33	; 0x21
    25de:	9a a1       	ldd	r25, Y+34	; 0x22
    25e0:	9e 8f       	std	Y+30, r25	; 0x1e
    25e2:	8d 8f       	std	Y+29, r24	; 0x1d
    25e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	f1 f7       	brne	.-4      	; 0x25e8 <LCD_displayCharacter+0x1ea>
    25ec:	9e 8f       	std	Y+30, r25	; 0x1e
    25ee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	69 ad       	ldd	r22, Y+57	; 0x39
    25f4:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	a0 e8       	ldi	r26, 0x80	; 128
    25fe:	bf e3       	ldi	r27, 0x3F	; 63
    2600:	89 8f       	std	Y+25, r24	; 0x19
    2602:	9a 8f       	std	Y+26, r25	; 0x1a
    2604:	ab 8f       	std	Y+27, r26	; 0x1b
    2606:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2608:	69 8d       	ldd	r22, Y+25	; 0x19
    260a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    260c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    260e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	4a ef       	ldi	r20, 0xFA	; 250
    2616:	54 e4       	ldi	r21, 0x44	; 68
    2618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	8d 8b       	std	Y+21, r24	; 0x15
    2622:	9e 8b       	std	Y+22, r25	; 0x16
    2624:	af 8b       	std	Y+23, r26	; 0x17
    2626:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2628:	6d 89       	ldd	r22, Y+21	; 0x15
    262a:	7e 89       	ldd	r23, Y+22	; 0x16
    262c:	8f 89       	ldd	r24, Y+23	; 0x17
    262e:	98 8d       	ldd	r25, Y+24	; 0x18
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e8       	ldi	r20, 0x80	; 128
    2636:	5f e3       	ldi	r21, 0x3F	; 63
    2638:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    263c:	88 23       	and	r24, r24
    263e:	2c f4       	brge	.+10     	; 0x264a <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	9c 8b       	std	Y+20, r25	; 0x14
    2646:	8b 8b       	std	Y+19, r24	; 0x13
    2648:	3f c0       	rjmp	.+126    	; 0x26c8 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    264a:	6d 89       	ldd	r22, Y+21	; 0x15
    264c:	7e 89       	ldd	r23, Y+22	; 0x16
    264e:	8f 89       	ldd	r24, Y+23	; 0x17
    2650:	98 8d       	ldd	r25, Y+24	; 0x18
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	3f ef       	ldi	r19, 0xFF	; 255
    2656:	4f e7       	ldi	r20, 0x7F	; 127
    2658:	57 e4       	ldi	r21, 0x47	; 71
    265a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    265e:	18 16       	cp	r1, r24
    2660:	4c f5       	brge	.+82     	; 0x26b4 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2662:	69 8d       	ldd	r22, Y+25	; 0x19
    2664:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2666:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2668:	9c 8d       	ldd	r25, Y+28	; 0x1c
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e2       	ldi	r20, 0x20	; 32
    2670:	51 e4       	ldi	r21, 0x41	; 65
    2672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	bc 01       	movw	r22, r24
    267c:	cd 01       	movw	r24, r26
    267e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	9c 8b       	std	Y+20, r25	; 0x14
    2688:	8b 8b       	std	Y+19, r24	; 0x13
    268a:	0f c0       	rjmp	.+30     	; 0x26aa <LCD_displayCharacter+0x2ac>
    268c:	88 ec       	ldi	r24, 0xC8	; 200
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	9a 8b       	std	Y+18, r25	; 0x12
    2692:	89 8b       	std	Y+17, r24	; 0x11
    2694:	89 89       	ldd	r24, Y+17	; 0x11
    2696:	9a 89       	ldd	r25, Y+18	; 0x12
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <LCD_displayCharacter+0x29a>
    269c:	9a 8b       	std	Y+18, r25	; 0x12
    269e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a0:	8b 89       	ldd	r24, Y+19	; 0x13
    26a2:	9c 89       	ldd	r25, Y+20	; 0x14
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	9c 8b       	std	Y+20, r25	; 0x14
    26a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26aa:	8b 89       	ldd	r24, Y+19	; 0x13
    26ac:	9c 89       	ldd	r25, Y+20	; 0x14
    26ae:	00 97       	sbiw	r24, 0x00	; 0
    26b0:	69 f7       	brne	.-38     	; 0x268c <LCD_displayCharacter+0x28e>
    26b2:	14 c0       	rjmp	.+40     	; 0x26dc <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b4:	6d 89       	ldd	r22, Y+21	; 0x15
    26b6:	7e 89       	ldd	r23, Y+22	; 0x16
    26b8:	8f 89       	ldd	r24, Y+23	; 0x17
    26ba:	98 8d       	ldd	r25, Y+24	; 0x18
    26bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	9c 8b       	std	Y+20, r25	; 0x14
    26c6:	8b 8b       	std	Y+19, r24	; 0x13
    26c8:	8b 89       	ldd	r24, Y+19	; 0x13
    26ca:	9c 89       	ldd	r25, Y+20	; 0x14
    26cc:	98 8b       	std	Y+16, r25	; 0x10
    26ce:	8f 87       	std	Y+15, r24	; 0x0f
    26d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26d2:	98 89       	ldd	r25, Y+16	; 0x10
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	f1 f7       	brne	.-4      	; 0x26d4 <LCD_displayCharacter+0x2d6>
    26d8:	98 8b       	std	Y+16, r25	; 0x10
    26da:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    26dc:	82 e0       	ldi	r24, 0x02	; 2
    26de:	61 e0       	ldi	r22, 0x01	; 1
    26e0:	40 e0       	ldi	r20, 0x00	; 0
    26e2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	a0 e8       	ldi	r26, 0x80	; 128
    26ec:	bf e3       	ldi	r27, 0x3F	; 63
    26ee:	8b 87       	std	Y+11, r24	; 0x0b
    26f0:	9c 87       	std	Y+12, r25	; 0x0c
    26f2:	ad 87       	std	Y+13, r26	; 0x0d
    26f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    26fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	4a ef       	ldi	r20, 0xFA	; 250
    2704:	54 e4       	ldi	r21, 0x44	; 68
    2706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	8f 83       	std	Y+7, r24	; 0x07
    2710:	98 87       	std	Y+8, r25	; 0x08
    2712:	a9 87       	std	Y+9, r26	; 0x09
    2714:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2716:	6f 81       	ldd	r22, Y+7	; 0x07
    2718:	78 85       	ldd	r23, Y+8	; 0x08
    271a:	89 85       	ldd	r24, Y+9	; 0x09
    271c:	9a 85       	ldd	r25, Y+10	; 0x0a
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	40 e8       	ldi	r20, 0x80	; 128
    2724:	5f e3       	ldi	r21, 0x3F	; 63
    2726:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    272a:	88 23       	and	r24, r24
    272c:	2c f4       	brge	.+10     	; 0x2738 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	9e 83       	std	Y+6, r25	; 0x06
    2734:	8d 83       	std	Y+5, r24	; 0x05
    2736:	3f c0       	rjmp	.+126    	; 0x27b6 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2738:	6f 81       	ldd	r22, Y+7	; 0x07
    273a:	78 85       	ldd	r23, Y+8	; 0x08
    273c:	89 85       	ldd	r24, Y+9	; 0x09
    273e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	3f ef       	ldi	r19, 0xFF	; 255
    2744:	4f e7       	ldi	r20, 0x7F	; 127
    2746:	57 e4       	ldi	r21, 0x47	; 71
    2748:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    274c:	18 16       	cp	r1, r24
    274e:	4c f5       	brge	.+82     	; 0x27a2 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2750:	6b 85       	ldd	r22, Y+11	; 0x0b
    2752:	7c 85       	ldd	r23, Y+12	; 0x0c
    2754:	8d 85       	ldd	r24, Y+13	; 0x0d
    2756:	9e 85       	ldd	r25, Y+14	; 0x0e
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e2       	ldi	r20, 0x20	; 32
    275e:	51 e4       	ldi	r21, 0x41	; 65
    2760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	bc 01       	movw	r22, r24
    276a:	cd 01       	movw	r24, r26
    276c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	9e 83       	std	Y+6, r25	; 0x06
    2776:	8d 83       	std	Y+5, r24	; 0x05
    2778:	0f c0       	rjmp	.+30     	; 0x2798 <LCD_displayCharacter+0x39a>
    277a:	88 ec       	ldi	r24, 0xC8	; 200
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	9c 83       	std	Y+4, r25	; 0x04
    2780:	8b 83       	std	Y+3, r24	; 0x03
    2782:	8b 81       	ldd	r24, Y+3	; 0x03
    2784:	9c 81       	ldd	r25, Y+4	; 0x04
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	f1 f7       	brne	.-4      	; 0x2786 <LCD_displayCharacter+0x388>
    278a:	9c 83       	std	Y+4, r25	; 0x04
    278c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278e:	8d 81       	ldd	r24, Y+5	; 0x05
    2790:	9e 81       	ldd	r25, Y+6	; 0x06
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	9e 83       	std	Y+6, r25	; 0x06
    2796:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2798:	8d 81       	ldd	r24, Y+5	; 0x05
    279a:	9e 81       	ldd	r25, Y+6	; 0x06
    279c:	00 97       	sbiw	r24, 0x00	; 0
    279e:	69 f7       	brne	.-38     	; 0x277a <LCD_displayCharacter+0x37c>
    27a0:	14 c0       	rjmp	.+40     	; 0x27ca <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a2:	6f 81       	ldd	r22, Y+7	; 0x07
    27a4:	78 85       	ldd	r23, Y+8	; 0x08
    27a6:	89 85       	ldd	r24, Y+9	; 0x09
    27a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	9e 83       	std	Y+6, r25	; 0x06
    27b4:	8d 83       	std	Y+5, r24	; 0x05
    27b6:	8d 81       	ldd	r24, Y+5	; 0x05
    27b8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ba:	9a 83       	std	Y+2, r25	; 0x02
    27bc:	89 83       	std	Y+1, r24	; 0x01
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	9a 81       	ldd	r25, Y+2	; 0x02
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	f1 f7       	brne	.-4      	; 0x27c2 <LCD_displayCharacter+0x3c4>
    27c6:	9a 83       	std	Y+2, r25	; 0x02
    27c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    27ca:	e9 96       	adiw	r28, 0x39	; 57
    27cc:	0f b6       	in	r0, 0x3f	; 63
    27ce:	f8 94       	cli
    27d0:	de bf       	out	0x3e, r29	; 62
    27d2:	0f be       	out	0x3f, r0	; 63
    27d4:	cd bf       	out	0x3d, r28	; 61
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	08 95       	ret

000027dc <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	00 d0       	rcall	.+0      	; 0x27e2 <LCD_displayString+0x6>
    27e2:	0f 92       	push	r0
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
    27e8:	9b 83       	std	Y+3, r25	; 0x03
    27ea:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    27ec:	19 82       	std	Y+1, r1	; 0x01
    27ee:	0e c0       	rjmp	.+28     	; 0x280c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	28 2f       	mov	r18, r24
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	8a 81       	ldd	r24, Y+2	; 0x02
    27f8:	9b 81       	ldd	r25, Y+3	; 0x03
    27fa:	fc 01       	movw	r30, r24
    27fc:	e2 0f       	add	r30, r18
    27fe:	f3 1f       	adc	r31, r19
    2800:	80 81       	ld	r24, Z
    2802:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_displayCharacter>
		i++;
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	8f 5f       	subi	r24, 0xFF	; 255
    280a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	28 2f       	mov	r18, r24
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	8a 81       	ldd	r24, Y+2	; 0x02
    2814:	9b 81       	ldd	r25, Y+3	; 0x03
    2816:	fc 01       	movw	r30, r24
    2818:	e2 0f       	add	r30, r18
    281a:	f3 1f       	adc	r31, r19
    281c:	80 81       	ld	r24, Z
    281e:	88 23       	and	r24, r24
    2820:	39 f7       	brne	.-50     	; 0x27f0 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	cf 91       	pop	r28
    282a:	df 91       	pop	r29
    282c:	08 95       	ret

0000282e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    282e:	df 93       	push	r29
    2830:	cf 93       	push	r28
    2832:	00 d0       	rcall	.+0      	; 0x2834 <LCD_moveCursor+0x6>
    2834:	00 d0       	rcall	.+0      	; 0x2836 <LCD_moveCursor+0x8>
    2836:	0f 92       	push	r0
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
    283c:	8a 83       	std	Y+2, r24	; 0x02
    283e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2840:	8a 81       	ldd	r24, Y+2	; 0x02
    2842:	28 2f       	mov	r18, r24
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	3d 83       	std	Y+5, r19	; 0x05
    2848:	2c 83       	std	Y+4, r18	; 0x04
    284a:	8c 81       	ldd	r24, Y+4	; 0x04
    284c:	9d 81       	ldd	r25, Y+5	; 0x05
    284e:	81 30       	cpi	r24, 0x01	; 1
    2850:	91 05       	cpc	r25, r1
    2852:	c1 f0       	breq	.+48     	; 0x2884 <LCD_moveCursor+0x56>
    2854:	2c 81       	ldd	r18, Y+4	; 0x04
    2856:	3d 81       	ldd	r19, Y+5	; 0x05
    2858:	22 30       	cpi	r18, 0x02	; 2
    285a:	31 05       	cpc	r19, r1
    285c:	2c f4       	brge	.+10     	; 0x2868 <LCD_moveCursor+0x3a>
    285e:	8c 81       	ldd	r24, Y+4	; 0x04
    2860:	9d 81       	ldd	r25, Y+5	; 0x05
    2862:	00 97       	sbiw	r24, 0x00	; 0
    2864:	61 f0       	breq	.+24     	; 0x287e <LCD_moveCursor+0x50>
    2866:	19 c0       	rjmp	.+50     	; 0x289a <LCD_moveCursor+0x6c>
    2868:	2c 81       	ldd	r18, Y+4	; 0x04
    286a:	3d 81       	ldd	r19, Y+5	; 0x05
    286c:	22 30       	cpi	r18, 0x02	; 2
    286e:	31 05       	cpc	r19, r1
    2870:	69 f0       	breq	.+26     	; 0x288c <LCD_moveCursor+0x5e>
    2872:	8c 81       	ldd	r24, Y+4	; 0x04
    2874:	9d 81       	ldd	r25, Y+5	; 0x05
    2876:	83 30       	cpi	r24, 0x03	; 3
    2878:	91 05       	cpc	r25, r1
    287a:	61 f0       	breq	.+24     	; 0x2894 <LCD_moveCursor+0x66>
    287c:	0e c0       	rjmp	.+28     	; 0x289a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    287e:	8b 81       	ldd	r24, Y+3	; 0x03
    2880:	89 83       	std	Y+1, r24	; 0x01
    2882:	0b c0       	rjmp	.+22     	; 0x289a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2884:	8b 81       	ldd	r24, Y+3	; 0x03
    2886:	80 5c       	subi	r24, 0xC0	; 192
    2888:	89 83       	std	Y+1, r24	; 0x01
    288a:	07 c0       	rjmp	.+14     	; 0x289a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    288c:	8b 81       	ldd	r24, Y+3	; 0x03
    288e:	80 5f       	subi	r24, 0xF0	; 240
    2890:	89 83       	std	Y+1, r24	; 0x01
    2892:	03 c0       	rjmp	.+6      	; 0x289a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2894:	8b 81       	ldd	r24, Y+3	; 0x03
    2896:	80 5b       	subi	r24, 0xB0	; 176
    2898:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	80 68       	ori	r24, 0x80	; 128
    289e:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_sendCommand>
}
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	cf 91       	pop	r28
    28ae:	df 91       	pop	r29
    28b0:	08 95       	ret

000028b2 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	00 d0       	rcall	.+0      	; 0x28b8 <LCD_displayStringRowColumn+0x6>
    28b8:	00 d0       	rcall	.+0      	; 0x28ba <LCD_displayStringRowColumn+0x8>
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
    28be:	89 83       	std	Y+1, r24	; 0x01
    28c0:	6a 83       	std	Y+2, r22	; 0x02
    28c2:	5c 83       	std	Y+4, r21	; 0x04
    28c4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	6a 81       	ldd	r22, Y+2	; 0x02
    28ca:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    28ce:	8b 81       	ldd	r24, Y+3	; 0x03
    28d0:	9c 81       	ldd	r25, Y+4	; 0x04
    28d2:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LCD_displayString>
}
    28d6:	0f 90       	pop	r0
    28d8:	0f 90       	pop	r0
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	cf 91       	pop	r28
    28e0:	df 91       	pop	r29
    28e2:	08 95       	ret

000028e4 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    28e4:	df 93       	push	r29
    28e6:	cf 93       	push	r28
    28e8:	cd b7       	in	r28, 0x3d	; 61
    28ea:	de b7       	in	r29, 0x3e	; 62
    28ec:	62 97       	sbiw	r28, 0x12	; 18
    28ee:	0f b6       	in	r0, 0x3f	; 63
    28f0:	f8 94       	cli
    28f2:	de bf       	out	0x3e, r29	; 62
    28f4:	0f be       	out	0x3f, r0	; 63
    28f6:	cd bf       	out	0x3d, r28	; 61
    28f8:	9a 8b       	std	Y+18, r25	; 0x12
    28fa:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    28fc:	89 89       	ldd	r24, Y+17	; 0x11
    28fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2900:	9e 01       	movw	r18, r28
    2902:	2f 5f       	subi	r18, 0xFF	; 255
    2904:	3f 4f       	sbci	r19, 0xFF	; 255
    2906:	b9 01       	movw	r22, r18
    2908:	4a e0       	ldi	r20, 0x0A	; 10
    290a:	50 e0       	ldi	r21, 0x00	; 0
    290c:	0e 94 45 19 	call	0x328a	; 0x328a <itoa>
   LCD_displayString(buff); /* Display the string */
    2910:	ce 01       	movw	r24, r28
    2912:	01 96       	adiw	r24, 0x01	; 1
    2914:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LCD_displayString>
}
    2918:	62 96       	adiw	r28, 0x12	; 18
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	de bf       	out	0x3e, r29	; 62
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	cd bf       	out	0x3d, r28	; 61
    2924:	cf 91       	pop	r28
    2926:	df 91       	pop	r29
    2928:	08 95       	ret

0000292a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    292a:	df 93       	push	r29
    292c:	cf 93       	push	r28
    292e:	cd b7       	in	r28, 0x3d	; 61
    2930:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_sendCommand>
}
    2938:	cf 91       	pop	r28
    293a:	df 91       	pop	r29
    293c:	08 95       	ret

0000293e <__vector_11>:
/*********************************
 *Interrupt Service Routines
 **********************************/

ISR(TIMER0_OVF_vect)
{
    293e:	1f 92       	push	r1
    2940:	0f 92       	push	r0
    2942:	0f b6       	in	r0, 0x3f	; 63
    2944:	0f 92       	push	r0
    2946:	11 24       	eor	r1, r1
    2948:	2f 93       	push	r18
    294a:	3f 93       	push	r19
    294c:	4f 93       	push	r20
    294e:	5f 93       	push	r21
    2950:	6f 93       	push	r22
    2952:	7f 93       	push	r23
    2954:	8f 93       	push	r24
    2956:	9f 93       	push	r25
    2958:	af 93       	push	r26
    295a:	bf 93       	push	r27
    295c:	ef 93       	push	r30
    295e:	ff 93       	push	r31
    2960:	df 93       	push	r29
    2962:	cf 93       	push	r28
    2964:	cd b7       	in	r28, 0x3d	; 61
    2966:	de b7       	in	r29, 0x3e	; 62
	if(timer0_getcallBackPtr != NULL_PTR)
    2968:	80 91 75 01 	lds	r24, 0x0175
    296c:	90 91 76 01 	lds	r25, 0x0176
    2970:	00 97       	sbiw	r24, 0x00	; 0
    2972:	29 f0       	breq	.+10     	; 0x297e <__vector_11+0x40>
	{
		/* Call the Call Back function in the application*/
		(*timer0_getcallBackPtr)();
    2974:	e0 91 75 01 	lds	r30, 0x0175
    2978:	f0 91 76 01 	lds	r31, 0x0176
    297c:	09 95       	icall
	}
}
    297e:	cf 91       	pop	r28
    2980:	df 91       	pop	r29
    2982:	ff 91       	pop	r31
    2984:	ef 91       	pop	r30
    2986:	bf 91       	pop	r27
    2988:	af 91       	pop	r26
    298a:	9f 91       	pop	r25
    298c:	8f 91       	pop	r24
    298e:	7f 91       	pop	r23
    2990:	6f 91       	pop	r22
    2992:	5f 91       	pop	r21
    2994:	4f 91       	pop	r20
    2996:	3f 91       	pop	r19
    2998:	2f 91       	pop	r18
    299a:	0f 90       	pop	r0
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	0f 90       	pop	r0
    29a0:	1f 90       	pop	r1
    29a2:	18 95       	reti

000029a4 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    29a4:	1f 92       	push	r1
    29a6:	0f 92       	push	r0
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	0f 92       	push	r0
    29ac:	11 24       	eor	r1, r1
    29ae:	2f 93       	push	r18
    29b0:	3f 93       	push	r19
    29b2:	4f 93       	push	r20
    29b4:	5f 93       	push	r21
    29b6:	6f 93       	push	r22
    29b8:	7f 93       	push	r23
    29ba:	8f 93       	push	r24
    29bc:	9f 93       	push	r25
    29be:	af 93       	push	r26
    29c0:	bf 93       	push	r27
    29c2:	ef 93       	push	r30
    29c4:	ff 93       	push	r31
    29c6:	df 93       	push	r29
    29c8:	cf 93       	push	r28
    29ca:	cd b7       	in	r28, 0x3d	; 61
    29cc:	de b7       	in	r29, 0x3e	; 62
	if(timer0_getcallBackPtr != NULL_PTR)
    29ce:	80 91 75 01 	lds	r24, 0x0175
    29d2:	90 91 76 01 	lds	r25, 0x0176
    29d6:	00 97       	sbiw	r24, 0x00	; 0
    29d8:	29 f0       	breq	.+10     	; 0x29e4 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application*/
		(*timer0_getcallBackPtr)();
    29da:	e0 91 75 01 	lds	r30, 0x0175
    29de:	f0 91 76 01 	lds	r31, 0x0176
    29e2:	09 95       	icall
	}
}
    29e4:	cf 91       	pop	r28
    29e6:	df 91       	pop	r29
    29e8:	ff 91       	pop	r31
    29ea:	ef 91       	pop	r30
    29ec:	bf 91       	pop	r27
    29ee:	af 91       	pop	r26
    29f0:	9f 91       	pop	r25
    29f2:	8f 91       	pop	r24
    29f4:	7f 91       	pop	r23
    29f6:	6f 91       	pop	r22
    29f8:	5f 91       	pop	r21
    29fa:	4f 91       	pop	r20
    29fc:	3f 91       	pop	r19
    29fe:	2f 91       	pop	r18
    2a00:	0f 90       	pop	r0
    2a02:	0f be       	out	0x3f, r0	; 63
    2a04:	0f 90       	pop	r0
    2a06:	1f 90       	pop	r1
    2a08:	18 95       	reti

00002a0a <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    2a0a:	1f 92       	push	r1
    2a0c:	0f 92       	push	r0
    2a0e:	0f b6       	in	r0, 0x3f	; 63
    2a10:	0f 92       	push	r0
    2a12:	11 24       	eor	r1, r1
    2a14:	2f 93       	push	r18
    2a16:	3f 93       	push	r19
    2a18:	4f 93       	push	r20
    2a1a:	5f 93       	push	r21
    2a1c:	6f 93       	push	r22
    2a1e:	7f 93       	push	r23
    2a20:	8f 93       	push	r24
    2a22:	9f 93       	push	r25
    2a24:	af 93       	push	r26
    2a26:	bf 93       	push	r27
    2a28:	ef 93       	push	r30
    2a2a:	ff 93       	push	r31
    2a2c:	df 93       	push	r29
    2a2e:	cf 93       	push	r28
    2a30:	cd b7       	in	r28, 0x3d	; 61
    2a32:	de b7       	in	r29, 0x3e	; 62
	if(timer1_getcallBackPtr != NULL_PTR)
    2a34:	80 91 77 01 	lds	r24, 0x0177
    2a38:	90 91 78 01 	lds	r25, 0x0178
    2a3c:	00 97       	sbiw	r24, 0x00	; 0
    2a3e:	29 f0       	breq	.+10     	; 0x2a4a <__vector_9+0x40>
	{
		/* Call the Call Back function in the application*/
		(*timer1_getcallBackPtr)();
    2a40:	e0 91 77 01 	lds	r30, 0x0177
    2a44:	f0 91 78 01 	lds	r31, 0x0178
    2a48:	09 95       	icall
	}
}
    2a4a:	cf 91       	pop	r28
    2a4c:	df 91       	pop	r29
    2a4e:	ff 91       	pop	r31
    2a50:	ef 91       	pop	r30
    2a52:	bf 91       	pop	r27
    2a54:	af 91       	pop	r26
    2a56:	9f 91       	pop	r25
    2a58:	8f 91       	pop	r24
    2a5a:	7f 91       	pop	r23
    2a5c:	6f 91       	pop	r22
    2a5e:	5f 91       	pop	r21
    2a60:	4f 91       	pop	r20
    2a62:	3f 91       	pop	r19
    2a64:	2f 91       	pop	r18
    2a66:	0f 90       	pop	r0
    2a68:	0f be       	out	0x3f, r0	; 63
    2a6a:	0f 90       	pop	r0
    2a6c:	1f 90       	pop	r1
    2a6e:	18 95       	reti

00002a70 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    2a70:	1f 92       	push	r1
    2a72:	0f 92       	push	r0
    2a74:	0f b6       	in	r0, 0x3f	; 63
    2a76:	0f 92       	push	r0
    2a78:	11 24       	eor	r1, r1
    2a7a:	2f 93       	push	r18
    2a7c:	3f 93       	push	r19
    2a7e:	4f 93       	push	r20
    2a80:	5f 93       	push	r21
    2a82:	6f 93       	push	r22
    2a84:	7f 93       	push	r23
    2a86:	8f 93       	push	r24
    2a88:	9f 93       	push	r25
    2a8a:	af 93       	push	r26
    2a8c:	bf 93       	push	r27
    2a8e:	ef 93       	push	r30
    2a90:	ff 93       	push	r31
    2a92:	df 93       	push	r29
    2a94:	cf 93       	push	r28
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
	if(timer1_getcallBackPtr != NULL_PTR)
    2a9a:	80 91 77 01 	lds	r24, 0x0177
    2a9e:	90 91 78 01 	lds	r25, 0x0178
    2aa2:	00 97       	sbiw	r24, 0x00	; 0
    2aa4:	29 f0       	breq	.+10     	; 0x2ab0 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application*/
		(*timer1_getcallBackPtr)();
    2aa6:	e0 91 77 01 	lds	r30, 0x0177
    2aaa:	f0 91 78 01 	lds	r31, 0x0178
    2aae:	09 95       	icall
	}
}
    2ab0:	cf 91       	pop	r28
    2ab2:	df 91       	pop	r29
    2ab4:	ff 91       	pop	r31
    2ab6:	ef 91       	pop	r30
    2ab8:	bf 91       	pop	r27
    2aba:	af 91       	pop	r26
    2abc:	9f 91       	pop	r25
    2abe:	8f 91       	pop	r24
    2ac0:	7f 91       	pop	r23
    2ac2:	6f 91       	pop	r22
    2ac4:	5f 91       	pop	r21
    2ac6:	4f 91       	pop	r20
    2ac8:	3f 91       	pop	r19
    2aca:	2f 91       	pop	r18
    2acc:	0f 90       	pop	r0
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	0f 90       	pop	r0
    2ad2:	1f 90       	pop	r1
    2ad4:	18 95       	reti

00002ad6 <__vector_5>:


ISR(TIMER2_OVF_vect)
{
    2ad6:	1f 92       	push	r1
    2ad8:	0f 92       	push	r0
    2ada:	0f b6       	in	r0, 0x3f	; 63
    2adc:	0f 92       	push	r0
    2ade:	11 24       	eor	r1, r1
    2ae0:	2f 93       	push	r18
    2ae2:	3f 93       	push	r19
    2ae4:	4f 93       	push	r20
    2ae6:	5f 93       	push	r21
    2ae8:	6f 93       	push	r22
    2aea:	7f 93       	push	r23
    2aec:	8f 93       	push	r24
    2aee:	9f 93       	push	r25
    2af0:	af 93       	push	r26
    2af2:	bf 93       	push	r27
    2af4:	ef 93       	push	r30
    2af6:	ff 93       	push	r31
    2af8:	df 93       	push	r29
    2afa:	cf 93       	push	r28
    2afc:	cd b7       	in	r28, 0x3d	; 61
    2afe:	de b7       	in	r29, 0x3e	; 62
	if(timer2_getcallBackPtr != NULL_PTR)
    2b00:	80 91 79 01 	lds	r24, 0x0179
    2b04:	90 91 7a 01 	lds	r25, 0x017A
    2b08:	00 97       	sbiw	r24, 0x00	; 0
    2b0a:	29 f0       	breq	.+10     	; 0x2b16 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application*/
		(*timer2_getcallBackPtr)();
    2b0c:	e0 91 79 01 	lds	r30, 0x0179
    2b10:	f0 91 7a 01 	lds	r31, 0x017A
    2b14:	09 95       	icall
	}
}
    2b16:	cf 91       	pop	r28
    2b18:	df 91       	pop	r29
    2b1a:	ff 91       	pop	r31
    2b1c:	ef 91       	pop	r30
    2b1e:	bf 91       	pop	r27
    2b20:	af 91       	pop	r26
    2b22:	9f 91       	pop	r25
    2b24:	8f 91       	pop	r24
    2b26:	7f 91       	pop	r23
    2b28:	6f 91       	pop	r22
    2b2a:	5f 91       	pop	r21
    2b2c:	4f 91       	pop	r20
    2b2e:	3f 91       	pop	r19
    2b30:	2f 91       	pop	r18
    2b32:	0f 90       	pop	r0
    2b34:	0f be       	out	0x3f, r0	; 63
    2b36:	0f 90       	pop	r0
    2b38:	1f 90       	pop	r1
    2b3a:	18 95       	reti

00002b3c <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    2b3c:	1f 92       	push	r1
    2b3e:	0f 92       	push	r0
    2b40:	0f b6       	in	r0, 0x3f	; 63
    2b42:	0f 92       	push	r0
    2b44:	11 24       	eor	r1, r1
    2b46:	2f 93       	push	r18
    2b48:	3f 93       	push	r19
    2b4a:	4f 93       	push	r20
    2b4c:	5f 93       	push	r21
    2b4e:	6f 93       	push	r22
    2b50:	7f 93       	push	r23
    2b52:	8f 93       	push	r24
    2b54:	9f 93       	push	r25
    2b56:	af 93       	push	r26
    2b58:	bf 93       	push	r27
    2b5a:	ef 93       	push	r30
    2b5c:	ff 93       	push	r31
    2b5e:	df 93       	push	r29
    2b60:	cf 93       	push	r28
    2b62:	cd b7       	in	r28, 0x3d	; 61
    2b64:	de b7       	in	r29, 0x3e	; 62
	if(timer2_getcallBackPtr != NULL_PTR)
    2b66:	80 91 79 01 	lds	r24, 0x0179
    2b6a:	90 91 7a 01 	lds	r25, 0x017A
    2b6e:	00 97       	sbiw	r24, 0x00	; 0
    2b70:	29 f0       	breq	.+10     	; 0x2b7c <__vector_4+0x40>
	{
		/* Call the Call Back function in the application*/
		(*timer2_getcallBackPtr)();
    2b72:	e0 91 79 01 	lds	r30, 0x0179
    2b76:	f0 91 7a 01 	lds	r31, 0x017A
    2b7a:	09 95       	icall
	}
}
    2b7c:	cf 91       	pop	r28
    2b7e:	df 91       	pop	r29
    2b80:	ff 91       	pop	r31
    2b82:	ef 91       	pop	r30
    2b84:	bf 91       	pop	r27
    2b86:	af 91       	pop	r26
    2b88:	9f 91       	pop	r25
    2b8a:	8f 91       	pop	r24
    2b8c:	7f 91       	pop	r23
    2b8e:	6f 91       	pop	r22
    2b90:	5f 91       	pop	r21
    2b92:	4f 91       	pop	r20
    2b94:	3f 91       	pop	r19
    2b96:	2f 91       	pop	r18
    2b98:	0f 90       	pop	r0
    2b9a:	0f be       	out	0x3f, r0	; 63
    2b9c:	0f 90       	pop	r0
    2b9e:	1f 90       	pop	r1
    2ba0:	18 95       	reti

00002ba2 <TIMER_init>:
/*********************************
 *           Functions
 **********************************/
void TIMER_init(const Timer_ConfigType * Config_Ptr){
    2ba2:	df 93       	push	r29
    2ba4:	cf 93       	push	r28
    2ba6:	00 d0       	rcall	.+0      	; 0x2ba8 <TIMER_init+0x6>
    2ba8:	00 d0       	rcall	.+0      	; 0x2baa <TIMER_init+0x8>
    2baa:	cd b7       	in	r28, 0x3d	; 61
    2bac:	de b7       	in	r29, 0x3e	; 62
    2bae:	9a 83       	std	Y+2, r25	; 0x02
    2bb0:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->timer_ID) {
    2bb2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb6:	84 81       	ldd	r24, Z+4	; 0x04
    2bb8:	28 2f       	mov	r18, r24
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	3c 83       	std	Y+4, r19	; 0x04
    2bbe:	2b 83       	std	Y+3, r18	; 0x03
    2bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc4:	81 30       	cpi	r24, 0x01	; 1
    2bc6:	91 05       	cpc	r25, r1
    2bc8:	71 f0       	breq	.+28     	; 0x2be6 <TIMER_init+0x44>
    2bca:	2b 81       	ldd	r18, Y+3	; 0x03
    2bcc:	3c 81       	ldd	r19, Y+4	; 0x04
    2bce:	22 30       	cpi	r18, 0x02	; 2
    2bd0:	31 05       	cpc	r19, r1
    2bd2:	71 f0       	breq	.+28     	; 0x2bf0 <TIMER_init+0x4e>
    2bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd8:	00 97       	sbiw	r24, 0x00	; 0
    2bda:	71 f4       	brne	.+28     	; 0x2bf8 <TIMER_init+0x56>
	case TIMER0:
		Timer0_init(Config_Ptr);
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	9a 81       	ldd	r25, Y+2	; 0x02
    2be0:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <Timer0_init>
    2be4:	09 c0       	rjmp	.+18     	; 0x2bf8 <TIMER_init+0x56>
		break;
	case TIMER1:
		Timer1_init(Config_Ptr);
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bea:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <Timer1_init>
    2bee:	04 c0       	rjmp	.+8      	; 0x2bf8 <TIMER_init+0x56>
		break;
	case TIMER2:
		Timer2_init(Config_Ptr);
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf4:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <Timer2_init>
		break;
	}
}
    2bf8:	0f 90       	pop	r0
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	0f 90       	pop	r0
    2c00:	cf 91       	pop	r28
    2c02:	df 91       	pop	r29
    2c04:	08 95       	ret

00002c06 <Timer_deInit>:
void Timer_deInit(Timer_ID_Type timer_type) {
    2c06:	df 93       	push	r29
    2c08:	cf 93       	push	r28
    2c0a:	00 d0       	rcall	.+0      	; 0x2c0c <Timer_deInit+0x6>
    2c0c:	0f 92       	push	r0
    2c0e:	cd b7       	in	r28, 0x3d	; 61
    2c10:	de b7       	in	r29, 0x3e	; 62
    2c12:	89 83       	std	Y+1, r24	; 0x01
	switch (timer_type) {
    2c14:	89 81       	ldd	r24, Y+1	; 0x01
    2c16:	28 2f       	mov	r18, r24
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	3b 83       	std	Y+3, r19	; 0x03
    2c1c:	2a 83       	std	Y+2, r18	; 0x02
    2c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c20:	9b 81       	ldd	r25, Y+3	; 0x03
    2c22:	81 30       	cpi	r24, 0x01	; 1
    2c24:	91 05       	cpc	r25, r1
    2c26:	61 f0       	breq	.+24     	; 0x2c40 <Timer_deInit+0x3a>
    2c28:	2a 81       	ldd	r18, Y+2	; 0x02
    2c2a:	3b 81       	ldd	r19, Y+3	; 0x03
    2c2c:	22 30       	cpi	r18, 0x02	; 2
    2c2e:	31 05       	cpc	r19, r1
    2c30:	51 f0       	breq	.+20     	; 0x2c46 <Timer_deInit+0x40>
    2c32:	8a 81       	ldd	r24, Y+2	; 0x02
    2c34:	9b 81       	ldd	r25, Y+3	; 0x03
    2c36:	00 97       	sbiw	r24, 0x00	; 0
    2c38:	41 f4       	brne	.+16     	; 0x2c4a <Timer_deInit+0x44>
	case TIMER0:
		Timer0_deInit();
    2c3a:	0e 94 76 17 	call	0x2eec	; 0x2eec <Timer0_deInit>
    2c3e:	05 c0       	rjmp	.+10     	; 0x2c4a <Timer_deInit+0x44>
		break;
	case TIMER1:
		Timer1_deInit();
    2c40:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <Timer1_deInit>
    2c44:	02 c0       	rjmp	.+4      	; 0x2c4a <Timer_deInit+0x44>
		break;
	case TIMER2:
		Timer2_deInit();
    2c46:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <Timer2_deInit>
		break;
	}
}
    2c4a:	0f 90       	pop	r0
    2c4c:	0f 90       	pop	r0
    2c4e:	0f 90       	pop	r0
    2c50:	cf 91       	pop	r28
    2c52:	df 91       	pop	r29
    2c54:	08 95       	ret

00002c56 <Timer_setCallBack>:
void Timer_setCallBack(void (*ptr)(void), Timer_ID_Type timer_ID) {
    2c56:	df 93       	push	r29
    2c58:	cf 93       	push	r28
    2c5a:	00 d0       	rcall	.+0      	; 0x2c5c <Timer_setCallBack+0x6>
    2c5c:	00 d0       	rcall	.+0      	; 0x2c5e <Timer_setCallBack+0x8>
    2c5e:	0f 92       	push	r0
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
    2c64:	9a 83       	std	Y+2, r25	; 0x02
    2c66:	89 83       	std	Y+1, r24	; 0x01
    2c68:	6b 83       	std	Y+3, r22	; 0x03
	switch (timer_ID) {
    2c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6c:	28 2f       	mov	r18, r24
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	3d 83       	std	Y+5, r19	; 0x05
    2c72:	2c 83       	std	Y+4, r18	; 0x04
    2c74:	8c 81       	ldd	r24, Y+4	; 0x04
    2c76:	9d 81       	ldd	r25, Y+5	; 0x05
    2c78:	81 30       	cpi	r24, 0x01	; 1
    2c7a:	91 05       	cpc	r25, r1
    2c7c:	81 f0       	breq	.+32     	; 0x2c9e <Timer_setCallBack+0x48>
    2c7e:	2c 81       	ldd	r18, Y+4	; 0x04
    2c80:	3d 81       	ldd	r19, Y+5	; 0x05
    2c82:	22 30       	cpi	r18, 0x02	; 2
    2c84:	31 05       	cpc	r19, r1
    2c86:	91 f0       	breq	.+36     	; 0x2cac <Timer_setCallBack+0x56>
    2c88:	8c 81       	ldd	r24, Y+4	; 0x04
    2c8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c8c:	00 97       	sbiw	r24, 0x00	; 0
    2c8e:	a1 f4       	brne	.+40     	; 0x2cb8 <Timer_setCallBack+0x62>
	case TIMER0:
		timer0_getcallBackPtr=ptr;
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
    2c92:	9a 81       	ldd	r25, Y+2	; 0x02
    2c94:	90 93 76 01 	sts	0x0176, r25
    2c98:	80 93 75 01 	sts	0x0175, r24
    2c9c:	0d c0       	rjmp	.+26     	; 0x2cb8 <Timer_setCallBack+0x62>
		break;
	case TIMER1:
		timer1_getcallBackPtr=ptr;
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca2:	90 93 78 01 	sts	0x0178, r25
    2ca6:	80 93 77 01 	sts	0x0177, r24
    2caa:	06 c0       	rjmp	.+12     	; 0x2cb8 <Timer_setCallBack+0x62>
		break;
	case TIMER2:
		timer2_getcallBackPtr=ptr;
    2cac:	89 81       	ldd	r24, Y+1	; 0x01
    2cae:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb0:	90 93 7a 01 	sts	0x017A, r25
    2cb4:	80 93 79 01 	sts	0x0179, r24
		break;
	}
}
    2cb8:	0f 90       	pop	r0
    2cba:	0f 90       	pop	r0
    2cbc:	0f 90       	pop	r0
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	08 95       	ret

00002cc8 <Timer0_init>:

static void Timer0_init(const Timer_ConfigType *Config_Ptr)
{
    2cc8:	df 93       	push	r29
    2cca:	cf 93       	push	r28
    2ccc:	00 d0       	rcall	.+0      	; 0x2cce <Timer0_init+0x6>
    2cce:	cd b7       	in	r28, 0x3d	; 61
    2cd0:	de b7       	in	r29, 0x3e	; 62
    2cd2:	9a 83       	std	Y+2, r25	; 0x02
    2cd4:	89 83       	std	Y+1, r24	; 0x01
	/* non PWM Mode */
	TCCR0 = (1<<FOC0);
    2cd6:	e3 e5       	ldi	r30, 0x53	; 83
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 e8       	ldi	r24, 0x80	; 128
    2cdc:	80 83       	st	Z, r24
	/*set initial value */
	TCNT0 = Config_Ptr->timer_InitialValue;
    2cde:	a2 e5       	ldi	r26, 0x52	; 82
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ce4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ce6:	80 81       	ld	r24, Z
    2ce8:	91 81       	ldd	r25, Z+1	; 0x01
    2cea:	8c 93       	st	X, r24
	/* Set the prescaler*/
	TCCR0 = (TCCR0 & 0XF8) | (Config_Ptr->timer_clock & 0X07);
    2cec:	a3 e5       	ldi	r26, 0x53	; 83
    2cee:	b0 e0       	ldi	r27, 0x00	; 0
    2cf0:	e3 e5       	ldi	r30, 0x53	; 83
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	98 2f       	mov	r25, r24
    2cf8:	98 7f       	andi	r25, 0xF8	; 248
    2cfa:	e9 81       	ldd	r30, Y+1	; 0x01
    2cfc:	fa 81       	ldd	r31, Y+2	; 0x02
    2cfe:	85 81       	ldd	r24, Z+5	; 0x05
    2d00:	87 70       	andi	r24, 0x07	; 7
    2d02:	89 2b       	or	r24, r25
    2d04:	8c 93       	st	X, r24

	if((Config_Ptr->timer_mode) == NORMAL_MODE){
    2d06:	e9 81       	ldd	r30, Y+1	; 0x01
    2d08:	fa 81       	ldd	r31, Y+2	; 0x02
    2d0a:	86 81       	ldd	r24, Z+6	; 0x06
    2d0c:	88 23       	and	r24, r24
    2d0e:	41 f4       	brne	.+16     	; 0x2d20 <Timer0_init+0x58>
		/* Enable Timer0 overflow interrupt */
		TIMSK |= (1 << TOIE0);
    2d10:	a9 e5       	ldi	r26, 0x59	; 89
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	e9 e5       	ldi	r30, 0x59	; 89
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	81 60       	ori	r24, 0x01	; 1
    2d1c:	8c 93       	st	X, r24
    2d1e:	13 c0       	rjmp	.+38     	; 0x2d46 <Timer0_init+0x7e>
	}
	else if ( (Config_Ptr -> timer_mode) == CTC_MODE){
    2d20:	e9 81       	ldd	r30, Y+1	; 0x01
    2d22:	fa 81       	ldd	r31, Y+2	; 0x02
    2d24:	86 81       	ldd	r24, Z+6	; 0x06
    2d26:	81 30       	cpi	r24, 0x01	; 1
    2d28:	71 f4       	brne	.+28     	; 0x2d46 <Timer0_init+0x7e>
		/*set compare value for compare mode*/
		OCR0 = Config_Ptr->timer_compare_MatchValue;
    2d2a:	ac e5       	ldi	r26, 0x5C	; 92
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d30:	fa 81       	ldd	r31, Y+2	; 0x02
    2d32:	82 81       	ldd	r24, Z+2	; 0x02
    2d34:	93 81       	ldd	r25, Z+3	; 0x03
    2d36:	8c 93       	st	X, r24
		/* Enable Timer0 compare interrupt */
		TIMSK |= (1 << OCIE0);
    2d38:	a9 e5       	ldi	r26, 0x59	; 89
    2d3a:	b0 e0       	ldi	r27, 0x00	; 0
    2d3c:	e9 e5       	ldi	r30, 0x59	; 89
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	80 81       	ld	r24, Z
    2d42:	82 60       	ori	r24, 0x02	; 2
    2d44:	8c 93       	st	X, r24
	}
}
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
    2d4a:	cf 91       	pop	r28
    2d4c:	df 91       	pop	r29
    2d4e:	08 95       	ret

00002d50 <Timer1_init>:

static void Timer1_init(const Timer_ConfigType *Config_Ptr)
{
    2d50:	df 93       	push	r29
    2d52:	cf 93       	push	r28
    2d54:	00 d0       	rcall	.+0      	; 0x2d56 <Timer1_init+0x6>
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
    2d5a:	9a 83       	std	Y+2, r25	; 0x02
    2d5c:	89 83       	std	Y+1, r24	; 0x01
	/*  Non PWM Mode */
	TCCR1A = (1 << FOC1A) | (1 << FOC1B) ;
    2d5e:	ef e4       	ldi	r30, 0x4F	; 79
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	8c e0       	ldi	r24, 0x0C	; 12
    2d64:	80 83       	st	Z, r24
	/*set the initial value*/
	TCNT1 = ( (Config_Ptr -> timer_InitialValue) );
    2d66:	ac e4       	ldi	r26, 0x4C	; 76
    2d68:	b0 e0       	ldi	r27, 0x00	; 0
    2d6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d6e:	80 81       	ld	r24, Z
    2d70:	91 81       	ldd	r25, Z+1	; 0x01
    2d72:	11 96       	adiw	r26, 0x01	; 1
    2d74:	9c 93       	st	X, r25
    2d76:	8e 93       	st	-X, r24
	/*add WGM10 and WGM11 of TCCR1A Register and WGM12 and WGM13 TCCR1B Register*/
	if (Config_Ptr->timer_mode == NORMAL_MODE) {
    2d78:	e9 81       	ldd	r30, Y+1	; 0x01
    2d7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d7c:	86 81       	ldd	r24, Z+6	; 0x06
    2d7e:	88 23       	and	r24, r24
    2d80:	79 f4       	brne	.+30     	; 0x2da0 <Timer1_init+0x50>
		TCCR1A&= ~(1<<WGM10) & ~(1<<WGM11) & ~(1<<WGM12)& ~(1<<WGM13);
    2d82:	af e4       	ldi	r26, 0x4F	; 79
    2d84:	b0 e0       	ldi	r27, 0x00	; 0
    2d86:	ef e4       	ldi	r30, 0x4F	; 79
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	84 7e       	andi	r24, 0xE4	; 228
    2d8e:	8c 93       	st	X, r24
		TCCR1B&= ~(1<<WGM12)& ~(1<<WGM13);
    2d90:	ae e4       	ldi	r26, 0x4E	; 78
    2d92:	b0 e0       	ldi	r27, 0x00	; 0
    2d94:	ee e4       	ldi	r30, 0x4E	; 78
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	80 81       	ld	r24, Z
    2d9a:	87 7e       	andi	r24, 0xE7	; 231
    2d9c:	8c 93       	st	X, r24
    2d9e:	1a c0       	rjmp	.+52     	; 0x2dd4 <Timer1_init+0x84>
	} else if (Config_Ptr->timer_mode == CTC_MODE) {
    2da0:	e9 81       	ldd	r30, Y+1	; 0x01
    2da2:	fa 81       	ldd	r31, Y+2	; 0x02
    2da4:	86 81       	ldd	r24, Z+6	; 0x06
    2da6:	81 30       	cpi	r24, 0x01	; 1
    2da8:	a9 f4       	brne	.+42     	; 0x2dd4 <Timer1_init+0x84>
		TCCR1A&= ~(1<<WGM10) & ~(1<<WGM11);
    2daa:	af e4       	ldi	r26, 0x4F	; 79
    2dac:	b0 e0       	ldi	r27, 0x00	; 0
    2dae:	ef e4       	ldi	r30, 0x4F	; 79
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	80 81       	ld	r24, Z
    2db4:	8c 7f       	andi	r24, 0xFC	; 252
    2db6:	8c 93       	st	X, r24
		TCCR1B&=~(1<<WGM13);
    2db8:	ae e4       	ldi	r26, 0x4E	; 78
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	ee e4       	ldi	r30, 0x4E	; 78
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	8f 7e       	andi	r24, 0xEF	; 239
    2dc4:	8c 93       	st	X, r24
		TCCR1B|=(1<<WGM12);
    2dc6:	ae e4       	ldi	r26, 0x4E	; 78
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	ee e4       	ldi	r30, 0x4E	; 78
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	80 81       	ld	r24, Z
    2dd0:	88 60       	ori	r24, 0x08	; 8
    2dd2:	8c 93       	st	X, r24
	}
	/*set pre scaler*/
	TCCR1B = (TCCR1B&0xF8) | (Config_Ptr->timer_clock);
    2dd4:	ae e4       	ldi	r26, 0x4E	; 78
    2dd6:	b0 e0       	ldi	r27, 0x00	; 0
    2dd8:	ee e4       	ldi	r30, 0x4E	; 78
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	80 81       	ld	r24, Z
    2dde:	98 2f       	mov	r25, r24
    2de0:	98 7f       	andi	r25, 0xF8	; 248
    2de2:	e9 81       	ldd	r30, Y+1	; 0x01
    2de4:	fa 81       	ldd	r31, Y+2	; 0x02
    2de6:	85 81       	ldd	r24, Z+5	; 0x05
    2de8:	89 2b       	or	r24, r25
    2dea:	8c 93       	st	X, r24
	if( (Config_Ptr->timer_mode ) == NORMAL_MODE)
    2dec:	e9 81       	ldd	r30, Y+1	; 0x01
    2dee:	fa 81       	ldd	r31, Y+2	; 0x02
    2df0:	86 81       	ldd	r24, Z+6	; 0x06
    2df2:	88 23       	and	r24, r24
    2df4:	41 f4       	brne	.+16     	; 0x2e06 <Timer1_init+0xb6>
	{
		/* Enable interrupt FOR normal mode */
		TIMSK |= (1 << TOIE1);
    2df6:	a9 e5       	ldi	r26, 0x59	; 89
    2df8:	b0 e0       	ldi	r27, 0x00	; 0
    2dfa:	e9 e5       	ldi	r30, 0x59	; 89
    2dfc:	f0 e0       	ldi	r31, 0x00	; 0
    2dfe:	80 81       	ld	r24, Z
    2e00:	84 60       	ori	r24, 0x04	; 4
    2e02:	8c 93       	st	X, r24
    2e04:	15 c0       	rjmp	.+42     	; 0x2e30 <Timer1_init+0xe0>
	}
	else if ((Config_Ptr->timer_mode) == CTC_MODE)
    2e06:	e9 81       	ldd	r30, Y+1	; 0x01
    2e08:	fa 81       	ldd	r31, Y+2	; 0x02
    2e0a:	86 81       	ldd	r24, Z+6	; 0x06
    2e0c:	81 30       	cpi	r24, 0x01	; 1
    2e0e:	81 f4       	brne	.+32     	; 0x2e30 <Timer1_init+0xe0>
	{
		/*set compare value for compare mode channel A*/
		OCR1A  = ((Config_Ptr->timer_compare_MatchValue));
    2e10:	aa e4       	ldi	r26, 0x4A	; 74
    2e12:	b0 e0       	ldi	r27, 0x00	; 0
    2e14:	e9 81       	ldd	r30, Y+1	; 0x01
    2e16:	fa 81       	ldd	r31, Y+2	; 0x02
    2e18:	82 81       	ldd	r24, Z+2	; 0x02
    2e1a:	93 81       	ldd	r25, Z+3	; 0x03
    2e1c:	11 96       	adiw	r26, 0x01	; 1
    2e1e:	9c 93       	st	X, r25
    2e20:	8e 93       	st	-X, r24
		/* Enable interrupt for compare mode channel A */
		TIMSK |= (1 << OCIE1A);
    2e22:	a9 e5       	ldi	r26, 0x59	; 89
    2e24:	b0 e0       	ldi	r27, 0x00	; 0
    2e26:	e9 e5       	ldi	r30, 0x59	; 89
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	80 81       	ld	r24, Z
    2e2c:	80 61       	ori	r24, 0x10	; 16
    2e2e:	8c 93       	st	X, r24
	}
}
    2e30:	0f 90       	pop	r0
    2e32:	0f 90       	pop	r0
    2e34:	cf 91       	pop	r28
    2e36:	df 91       	pop	r29
    2e38:	08 95       	ret

00002e3a <Timer2_init>:

static void Timer2_init(const Timer_ConfigType *Config_Ptr)
{
    2e3a:	df 93       	push	r29
    2e3c:	cf 93       	push	r28
    2e3e:	00 d0       	rcall	.+0      	; 0x2e40 <Timer2_init+0x6>
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
    2e44:	9a 83       	std	Y+2, r25	; 0x02
    2e46:	89 83       	std	Y+1, r24	; 0x01
	/*set the initail value of the timer*/
	TCNT2 = Config_Ptr->timer_InitialValue;
    2e48:	a4 e4       	ldi	r26, 0x44	; 68
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
    2e4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e50:	80 81       	ld	r24, Z
    2e52:	91 81       	ldd	r25, Z+1	; 0x01
    2e54:	8c 93       	st	X, r24
	/*non PWM mode*/
	TCCR2 = (1<<FOC2);
    2e56:	e5 e4       	ldi	r30, 0x45	; 69
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	80 e8       	ldi	r24, 0x80	; 128
    2e5c:	80 83       	st	Z, r24
	/* choose the timer clock (F_CPU / prescaler)*/
	TCCR2 = (TCCR2 & 0XF8) | (Config_Ptr->timer_clock & 0X07);
    2e5e:	a5 e4       	ldi	r26, 0x45	; 69
    2e60:	b0 e0       	ldi	r27, 0x00	; 0
    2e62:	e5 e4       	ldi	r30, 0x45	; 69
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	80 81       	ld	r24, Z
    2e68:	98 2f       	mov	r25, r24
    2e6a:	98 7f       	andi	r25, 0xF8	; 248
    2e6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e70:	85 81       	ldd	r24, Z+5	; 0x05
    2e72:	87 70       	andi	r24, 0x07	; 7
    2e74:	89 2b       	or	r24, r25
    2e76:	8c 93       	st	X, r24
	/* Check which timer mode is chosen */
	if( (Config_Ptr -> timer_mode ) == NORMAL_MODE) {
    2e78:	e9 81       	ldd	r30, Y+1	; 0x01
    2e7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e7c:	86 81       	ldd	r24, Z+6	; 0x06
    2e7e:	88 23       	and	r24, r24
    2e80:	79 f4       	brne	.+30     	; 0x2ea0 <Timer2_init+0x66>
		TCCR2&= ~(1<<WGM20) & ~(1<<WGM21);
    2e82:	a5 e4       	ldi	r26, 0x45	; 69
    2e84:	b0 e0       	ldi	r27, 0x00	; 0
    2e86:	e5 e4       	ldi	r30, 0x45	; 69
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	80 81       	ld	r24, Z
    2e8c:	87 7b       	andi	r24, 0xB7	; 183
    2e8e:	8c 93       	st	X, r24
		/*	Enable interrupt for normal mode */
		TIMSK |= (1 << TOIE2);
    2e90:	a9 e5       	ldi	r26, 0x59	; 89
    2e92:	b0 e0       	ldi	r27, 0x00	; 0
    2e94:	e9 e5       	ldi	r30, 0x59	; 89
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	80 81       	ld	r24, Z
    2e9a:	80 64       	ori	r24, 0x40	; 64
    2e9c:	8c 93       	st	X, r24
    2e9e:	21 c0       	rjmp	.+66     	; 0x2ee2 <Timer2_init+0xa8>
	}
	else if ( (Config_Ptr -> timer_mode) == CTC_MODE){
    2ea0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ea2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ea4:	86 81       	ldd	r24, Z+6	; 0x06
    2ea6:	81 30       	cpi	r24, 0x01	; 1
    2ea8:	e1 f4       	brne	.+56     	; 0x2ee2 <Timer2_init+0xa8>
		TCCR2&= ~(1<<WGM20);
    2eaa:	a5 e4       	ldi	r26, 0x45	; 69
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
    2eae:	e5 e4       	ldi	r30, 0x45	; 69
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	80 81       	ld	r24, Z
    2eb4:	8f 7b       	andi	r24, 0xBF	; 191
    2eb6:	8c 93       	st	X, r24
		TCCR2|=(1<<WGM21);
    2eb8:	a5 e4       	ldi	r26, 0x45	; 69
    2eba:	b0 e0       	ldi	r27, 0x00	; 0
    2ebc:	e5 e4       	ldi	r30, 0x45	; 69
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	80 81       	ld	r24, Z
    2ec2:	88 60       	ori	r24, 0x08	; 8
    2ec4:	8c 93       	st	X, r24
		/*set the compare value of the compare mode timer*/
		OCR2 = Config_Ptr->timer_compare_MatchValue;
    2ec6:	a3 e4       	ldi	r26, 0x43	; 67
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	e9 81       	ldd	r30, Y+1	; 0x01
    2ecc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ece:	82 81       	ldd	r24, Z+2	; 0x02
    2ed0:	93 81       	ldd	r25, Z+3	; 0x03
    2ed2:	8c 93       	st	X, r24
		/*	 Enable interrupt for compare mode */
		TIMSK |= (1 << OCIE2);
    2ed4:	a9 e5       	ldi	r26, 0x59	; 89
    2ed6:	b0 e0       	ldi	r27, 0x00	; 0
    2ed8:	e9 e5       	ldi	r30, 0x59	; 89
    2eda:	f0 e0       	ldi	r31, 0x00	; 0
    2edc:	80 81       	ld	r24, Z
    2ede:	80 68       	ori	r24, 0x80	; 128
    2ee0:	8c 93       	st	X, r24
	}
}
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	cf 91       	pop	r28
    2ee8:	df 91       	pop	r29
    2eea:	08 95       	ret

00002eec <Timer0_deInit>:

static void Timer0_deInit()
{
    2eec:	df 93       	push	r29
    2eee:	cf 93       	push	r28
    2ef0:	cd b7       	in	r28, 0x3d	; 61
    2ef2:	de b7       	in	r29, 0x3e	; 62
	/* disable timer */
	TCCR0 = 0;
    2ef4:	e3 e5       	ldi	r30, 0x53	; 83
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	10 82       	st	Z, r1
	/* clear timer */
	TCNT1=0;
    2efa:	ec e4       	ldi	r30, 0x4C	; 76
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	11 82       	std	Z+1, r1	; 0x01
    2f00:	10 82       	st	Z, r1
	/*disable interrupt*/
	TIMSK&=~(1<<TOIE0);
    2f02:	a9 e5       	ldi	r26, 0x59	; 89
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	e9 e5       	ldi	r30, 0x59	; 89
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	8e 7f       	andi	r24, 0xFE	; 254
    2f0e:	8c 93       	st	X, r24
	TIMSK&=~(1<<OCIE0);
    2f10:	a9 e5       	ldi	r26, 0x59	; 89
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	e9 e5       	ldi	r30, 0x59	; 89
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z
    2f1a:	8d 7f       	andi	r24, 0xFD	; 253
    2f1c:	8c 93       	st	X, r24
	/*remove get back function*/
	timer0_getcallBackPtr=NULL_PTR;
    2f1e:	10 92 76 01 	sts	0x0176, r1
    2f22:	10 92 75 01 	sts	0x0175, r1
}
    2f26:	cf 91       	pop	r28
    2f28:	df 91       	pop	r29
    2f2a:	08 95       	ret

00002f2c <Timer1_deInit>:

static void Timer1_deInit(){
    2f2c:	df 93       	push	r29
    2f2e:	cf 93       	push	r28
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
	/* disable timer */
	TCCR1A=0;
    2f34:	ef e4       	ldi	r30, 0x4F	; 79
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	10 82       	st	Z, r1
	TCCR1B=0;
    2f3a:	ee e4       	ldi	r30, 0x4E	; 78
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	10 82       	st	Z, r1
	/* clear timer */
	TCNT1=0;
    2f40:	ec e4       	ldi	r30, 0x4C	; 76
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	11 82       	std	Z+1, r1	; 0x01
    2f46:	10 82       	st	Z, r1
	OCR1A=0;
    2f48:	ea e4       	ldi	r30, 0x4A	; 74
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	11 82       	std	Z+1, r1	; 0x01
    2f4e:	10 82       	st	Z, r1
	/*disable interrupt*/
	TIMSK&=~(1<<TOIE1) & ~(1<<OCIE1A);
    2f50:	a9 e5       	ldi	r26, 0x59	; 89
    2f52:	b0 e0       	ldi	r27, 0x00	; 0
    2f54:	e9 e5       	ldi	r30, 0x59	; 89
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	80 81       	ld	r24, Z
    2f5a:	8b 7e       	andi	r24, 0xEB	; 235
    2f5c:	8c 93       	st	X, r24
	/*remove get back function*/
	timer1_getcallBackPtr=NULL_PTR;
    2f5e:	10 92 78 01 	sts	0x0178, r1
    2f62:	10 92 77 01 	sts	0x0177, r1
}
    2f66:	cf 91       	pop	r28
    2f68:	df 91       	pop	r29
    2f6a:	08 95       	ret

00002f6c <Timer2_deInit>:

static void Timer2_deInit(){
    2f6c:	df 93       	push	r29
    2f6e:	cf 93       	push	r28
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
	/* disable timer */
	TCCR2=0;
    2f74:	e5 e4       	ldi	r30, 0x45	; 69
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	10 82       	st	Z, r1
	/* clear timer */
	TCNT2=0;
    2f7a:	e4 e4       	ldi	r30, 0x44	; 68
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	10 82       	st	Z, r1
	OCR2=0;
    2f80:	e3 e4       	ldi	r30, 0x43	; 67
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	10 82       	st	Z, r1
	/*disable interrupt*/
	TIMSK&=~(1<<TOIE2) & ~(1<<OCIE2);
    2f86:	a9 e5       	ldi	r26, 0x59	; 89
    2f88:	b0 e0       	ldi	r27, 0x00	; 0
    2f8a:	e9 e5       	ldi	r30, 0x59	; 89
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	80 81       	ld	r24, Z
    2f90:	8f 73       	andi	r24, 0x3F	; 63
    2f92:	8c 93       	st	X, r24
	/*remove get back function*/
	timer2_getcallBackPtr=NULL_PTR;
    2f94:	10 92 7a 01 	sts	0x017A, r1
    2f98:	10 92 79 01 	sts	0x0179, r1

}
    2f9c:	cf 91       	pop	r28
    2f9e:	df 91       	pop	r29
    2fa0:	08 95       	ret

00002fa2 <UART_init>:
 */

//UART_ConfigType uart_config = { UART_DATA_8_BITS,
			//UART_NO_PARITY, UART_ONE_STOP_BIT, 9600 };
void UART_init(const UART_ConfigType *Config_Ptr)
{
    2fa2:	df 93       	push	r29
    2fa4:	cf 93       	push	r28
    2fa6:	00 d0       	rcall	.+0      	; 0x2fa8 <UART_init+0x6>
    2fa8:	00 d0       	rcall	.+0      	; 0x2faa <UART_init+0x8>
    2faa:	cd b7       	in	r28, 0x3d	; 61
    2fac:	de b7       	in	r29, 0x3e	; 62
    2fae:	9c 83       	std	Y+4, r25	; 0x04
    2fb0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2fb2:	1a 82       	std	Y+2, r1	; 0x02
    2fb4:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2fb6:	eb e2       	ldi	r30, 0x2B	; 43
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	82 e0       	ldi	r24, 0x02	; 2
    2fbc:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2fbe:	ea e2       	ldi	r30, 0x2A	; 42
    2fc0:	f0 e0       	ldi	r31, 0x00	; 0
    2fc2:	88 e1       	ldi	r24, 0x18	; 24
    2fc4:	80 83       	st	Z, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) ;
    2fc6:	e0 e4       	ldi	r30, 0x40	; 64
    2fc8:	f0 e0       	ldi	r31, 0x00	; 0
    2fca:	80 e8       	ldi	r24, 0x80	; 128
    2fcc:	80 83       	st	Z, r24
	UCSRC&=~(1<<UCPOL) & ~(1<<UMSEL);
    2fce:	a0 e4       	ldi	r26, 0x40	; 64
    2fd0:	b0 e0       	ldi	r27, 0x00	; 0
    2fd2:	e0 e4       	ldi	r30, 0x40	; 64
    2fd4:	f0 e0       	ldi	r31, 0x00	; 0
    2fd6:	80 81       	ld	r24, Z
    2fd8:	8e 7b       	andi	r24, 0xBE	; 190
    2fda:	8c 93       	st	X, r24

	/*
	 * parity bit UPM1:0 of UCSRC Register
	 */
	UCSRC=(UCSRC& 0xCF) | ((Config_Ptr->parity) << 4);
    2fdc:	a0 e4       	ldi	r26, 0x40	; 64
    2fde:	b0 e0       	ldi	r27, 0x00	; 0
    2fe0:	e0 e4       	ldi	r30, 0x40	; 64
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	80 81       	ld	r24, Z
    2fe6:	28 2f       	mov	r18, r24
    2fe8:	2f 7c       	andi	r18, 0xCF	; 207
    2fea:	eb 81       	ldd	r30, Y+3	; 0x03
    2fec:	fc 81       	ldd	r31, Y+4	; 0x04
    2fee:	81 81       	ldd	r24, Z+1	; 0x01
    2ff0:	88 2f       	mov	r24, r24
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	82 95       	swap	r24
    2ff6:	92 95       	swap	r25
    2ff8:	90 7f       	andi	r25, 0xF0	; 240
    2ffa:	98 27       	eor	r25, r24
    2ffc:	80 7f       	andi	r24, 0xF0	; 240
    2ffe:	98 27       	eor	r25, r24
    3000:	82 2b       	or	r24, r18
    3002:	8c 93       	st	X, r24
	/*
	* stop bit in USBS of UCSRC Register
	*/
	UCSRC=(UCSRC& 0xF7) | ((Config_Ptr->stop_bit) << 3);
    3004:	a0 e4       	ldi	r26, 0x40	; 64
    3006:	b0 e0       	ldi	r27, 0x00	; 0
    3008:	e0 e4       	ldi	r30, 0x40	; 64
    300a:	f0 e0       	ldi	r31, 0x00	; 0
    300c:	80 81       	ld	r24, Z
    300e:	28 2f       	mov	r18, r24
    3010:	27 7f       	andi	r18, 0xF7	; 247
    3012:	eb 81       	ldd	r30, Y+3	; 0x03
    3014:	fc 81       	ldd	r31, Y+4	; 0x04
    3016:	82 81       	ldd	r24, Z+2	; 0x02
    3018:	88 2f       	mov	r24, r24
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	88 0f       	add	r24, r24
    301e:	99 1f       	adc	r25, r25
    3020:	88 0f       	add	r24, r24
    3022:	99 1f       	adc	r25, r25
    3024:	88 0f       	add	r24, r24
    3026:	99 1f       	adc	r25, r25
    3028:	82 2b       	or	r24, r18
    302a:	8c 93       	st	X, r24
	/*
	* data mode in UCSZ1:0 of UCSRC Register
     */
	UCSRC=(UCSRC& 0xF9) | (((Config_Ptr->bit_data) << 1) & 0x06);
    302c:	a0 e4       	ldi	r26, 0x40	; 64
    302e:	b0 e0       	ldi	r27, 0x00	; 0
    3030:	e0 e4       	ldi	r30, 0x40	; 64
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	80 81       	ld	r24, Z
    3036:	28 2f       	mov	r18, r24
    3038:	29 7f       	andi	r18, 0xF9	; 249
    303a:	eb 81       	ldd	r30, Y+3	; 0x03
    303c:	fc 81       	ldd	r31, Y+4	; 0x04
    303e:	80 81       	ld	r24, Z
    3040:	88 2f       	mov	r24, r24
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	88 0f       	add	r24, r24
    3046:	99 1f       	adc	r25, r25
    3048:	86 70       	andi	r24, 0x06	; 6
    304a:	82 2b       	or	r24, r18
    304c:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    304e:	eb 81       	ldd	r30, Y+3	; 0x03
    3050:	fc 81       	ldd	r31, Y+4	; 0x04
    3052:	83 81       	ldd	r24, Z+3	; 0x03
    3054:	94 81       	ldd	r25, Z+4	; 0x04
    3056:	a5 81       	ldd	r26, Z+5	; 0x05
    3058:	b6 81       	ldd	r27, Z+6	; 0x06
    305a:	88 0f       	add	r24, r24
    305c:	99 1f       	adc	r25, r25
    305e:	aa 1f       	adc	r26, r26
    3060:	bb 1f       	adc	r27, r27
    3062:	88 0f       	add	r24, r24
    3064:	99 1f       	adc	r25, r25
    3066:	aa 1f       	adc	r26, r26
    3068:	bb 1f       	adc	r27, r27
    306a:	88 0f       	add	r24, r24
    306c:	99 1f       	adc	r25, r25
    306e:	aa 1f       	adc	r26, r26
    3070:	bb 1f       	adc	r27, r27
    3072:	9c 01       	movw	r18, r24
    3074:	ad 01       	movw	r20, r26
    3076:	80 e0       	ldi	r24, 0x00	; 0
    3078:	92 e1       	ldi	r25, 0x12	; 18
    307a:	aa e7       	ldi	r26, 0x7A	; 122
    307c:	b0 e0       	ldi	r27, 0x00	; 0
    307e:	bc 01       	movw	r22, r24
    3080:	cd 01       	movw	r24, r26
    3082:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <__udivmodsi4>
    3086:	da 01       	movw	r26, r20
    3088:	c9 01       	movw	r24, r18
    308a:	01 97       	sbiw	r24, 0x01	; 1
    308c:	9a 83       	std	Y+2, r25	; 0x02
    308e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3090:	e0 e4       	ldi	r30, 0x40	; 64
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	89 81       	ldd	r24, Y+1	; 0x01
    3096:	9a 81       	ldd	r25, Y+2	; 0x02
    3098:	89 2f       	mov	r24, r25
    309a:	99 27       	eor	r25, r25
    309c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    309e:	e9 e2       	ldi	r30, 0x29	; 41
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	89 81       	ldd	r24, Y+1	; 0x01
    30a4:	80 83       	st	Z, r24
}
    30a6:	0f 90       	pop	r0
    30a8:	0f 90       	pop	r0
    30aa:	0f 90       	pop	r0
    30ac:	0f 90       	pop	r0
    30ae:	cf 91       	pop	r28
    30b0:	df 91       	pop	r29
    30b2:	08 95       	ret

000030b4 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    30b4:	df 93       	push	r29
    30b6:	cf 93       	push	r28
    30b8:	0f 92       	push	r0
    30ba:	cd b7       	in	r28, 0x3d	; 61
    30bc:	de b7       	in	r29, 0x3e	; 62
    30be:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    30c0:	eb e2       	ldi	r30, 0x2B	; 43
    30c2:	f0 e0       	ldi	r31, 0x00	; 0
    30c4:	80 81       	ld	r24, Z
    30c6:	88 2f       	mov	r24, r24
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	80 72       	andi	r24, 0x20	; 32
    30cc:	90 70       	andi	r25, 0x00	; 0
    30ce:	00 97       	sbiw	r24, 0x00	; 0
    30d0:	b9 f3       	breq	.-18     	; 0x30c0 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    30d2:	ec e2       	ldi	r30, 0x2C	; 44
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	89 81       	ldd	r24, Y+1	; 0x01
    30d8:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    30da:	0f 90       	pop	r0
    30dc:	cf 91       	pop	r28
    30de:	df 91       	pop	r29
    30e0:	08 95       	ret

000030e2 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    30e2:	df 93       	push	r29
    30e4:	cf 93       	push	r28
    30e6:	cd b7       	in	r28, 0x3d	; 61
    30e8:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    30ea:	eb e2       	ldi	r30, 0x2B	; 43
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	80 81       	ld	r24, Z
    30f0:	88 23       	and	r24, r24
    30f2:	dc f7       	brge	.-10     	; 0x30ea <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    30f4:	ec e2       	ldi	r30, 0x2C	; 44
    30f6:	f0 e0       	ldi	r31, 0x00	; 0
    30f8:	80 81       	ld	r24, Z
}
    30fa:	cf 91       	pop	r28
    30fc:	df 91       	pop	r29
    30fe:	08 95       	ret

00003100 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3100:	df 93       	push	r29
    3102:	cf 93       	push	r28
    3104:	00 d0       	rcall	.+0      	; 0x3106 <UART_sendString+0x6>
    3106:	0f 92       	push	r0
    3108:	cd b7       	in	r28, 0x3d	; 61
    310a:	de b7       	in	r29, 0x3e	; 62
    310c:	9b 83       	std	Y+3, r25	; 0x03
    310e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3110:	19 82       	std	Y+1, r1	; 0x01
    3112:	0e c0       	rjmp	.+28     	; 0x3130 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3114:	89 81       	ldd	r24, Y+1	; 0x01
    3116:	28 2f       	mov	r18, r24
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	8a 81       	ldd	r24, Y+2	; 0x02
    311c:	9b 81       	ldd	r25, Y+3	; 0x03
    311e:	fc 01       	movw	r30, r24
    3120:	e2 0f       	add	r30, r18
    3122:	f3 1f       	adc	r31, r19
    3124:	80 81       	ld	r24, Z
    3126:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <UART_sendByte>
		i++;
    312a:	89 81       	ldd	r24, Y+1	; 0x01
    312c:	8f 5f       	subi	r24, 0xFF	; 255
    312e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3130:	89 81       	ldd	r24, Y+1	; 0x01
    3132:	28 2f       	mov	r18, r24
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	8a 81       	ldd	r24, Y+2	; 0x02
    3138:	9b 81       	ldd	r25, Y+3	; 0x03
    313a:	fc 01       	movw	r30, r24
    313c:	e2 0f       	add	r30, r18
    313e:	f3 1f       	adc	r31, r19
    3140:	80 81       	ld	r24, Z
    3142:	88 23       	and	r24, r24
    3144:	39 f7       	brne	.-50     	; 0x3114 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    3146:	0f 90       	pop	r0
    3148:	0f 90       	pop	r0
    314a:	0f 90       	pop	r0
    314c:	cf 91       	pop	r28
    314e:	df 91       	pop	r29
    3150:	08 95       	ret

00003152 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3152:	0f 93       	push	r16
    3154:	1f 93       	push	r17
    3156:	df 93       	push	r29
    3158:	cf 93       	push	r28
    315a:	00 d0       	rcall	.+0      	; 0x315c <UART_receiveString+0xa>
    315c:	0f 92       	push	r0
    315e:	cd b7       	in	r28, 0x3d	; 61
    3160:	de b7       	in	r29, 0x3e	; 62
    3162:	9b 83       	std	Y+3, r25	; 0x03
    3164:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3166:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3168:	89 81       	ldd	r24, Y+1	; 0x01
    316a:	28 2f       	mov	r18, r24
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	8a 81       	ldd	r24, Y+2	; 0x02
    3170:	9b 81       	ldd	r25, Y+3	; 0x03
    3172:	8c 01       	movw	r16, r24
    3174:	02 0f       	add	r16, r18
    3176:	13 1f       	adc	r17, r19
    3178:	0e 94 71 18 	call	0x30e2	; 0x30e2 <UART_recieveByte>
    317c:	f8 01       	movw	r30, r16
    317e:	80 83       	st	Z, r24
    3180:	0f c0       	rjmp	.+30     	; 0x31a0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3182:	89 81       	ldd	r24, Y+1	; 0x01
    3184:	8f 5f       	subi	r24, 0xFF	; 255
    3186:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3188:	89 81       	ldd	r24, Y+1	; 0x01
    318a:	28 2f       	mov	r18, r24
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	8a 81       	ldd	r24, Y+2	; 0x02
    3190:	9b 81       	ldd	r25, Y+3	; 0x03
    3192:	8c 01       	movw	r16, r24
    3194:	02 0f       	add	r16, r18
    3196:	13 1f       	adc	r17, r19
    3198:	0e 94 71 18 	call	0x30e2	; 0x30e2 <UART_recieveByte>
    319c:	f8 01       	movw	r30, r16
    319e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    31a0:	89 81       	ldd	r24, Y+1	; 0x01
    31a2:	28 2f       	mov	r18, r24
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	8a 81       	ldd	r24, Y+2	; 0x02
    31a8:	9b 81       	ldd	r25, Y+3	; 0x03
    31aa:	fc 01       	movw	r30, r24
    31ac:	e2 0f       	add	r30, r18
    31ae:	f3 1f       	adc	r31, r19
    31b0:	80 81       	ld	r24, Z
    31b2:	83 32       	cpi	r24, 0x23	; 35
    31b4:	31 f7       	brne	.-52     	; 0x3182 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    31b6:	89 81       	ldd	r24, Y+1	; 0x01
    31b8:	28 2f       	mov	r18, r24
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	8a 81       	ldd	r24, Y+2	; 0x02
    31be:	9b 81       	ldd	r25, Y+3	; 0x03
    31c0:	fc 01       	movw	r30, r24
    31c2:	e2 0f       	add	r30, r18
    31c4:	f3 1f       	adc	r31, r19
    31c6:	10 82       	st	Z, r1
}
    31c8:	0f 90       	pop	r0
    31ca:	0f 90       	pop	r0
    31cc:	0f 90       	pop	r0
    31ce:	cf 91       	pop	r28
    31d0:	df 91       	pop	r29
    31d2:	1f 91       	pop	r17
    31d4:	0f 91       	pop	r16
    31d6:	08 95       	ret

000031d8 <__udivmodsi4>:
    31d8:	a1 e2       	ldi	r26, 0x21	; 33
    31da:	1a 2e       	mov	r1, r26
    31dc:	aa 1b       	sub	r26, r26
    31de:	bb 1b       	sub	r27, r27
    31e0:	fd 01       	movw	r30, r26
    31e2:	0d c0       	rjmp	.+26     	; 0x31fe <__udivmodsi4_ep>

000031e4 <__udivmodsi4_loop>:
    31e4:	aa 1f       	adc	r26, r26
    31e6:	bb 1f       	adc	r27, r27
    31e8:	ee 1f       	adc	r30, r30
    31ea:	ff 1f       	adc	r31, r31
    31ec:	a2 17       	cp	r26, r18
    31ee:	b3 07       	cpc	r27, r19
    31f0:	e4 07       	cpc	r30, r20
    31f2:	f5 07       	cpc	r31, r21
    31f4:	20 f0       	brcs	.+8      	; 0x31fe <__udivmodsi4_ep>
    31f6:	a2 1b       	sub	r26, r18
    31f8:	b3 0b       	sbc	r27, r19
    31fa:	e4 0b       	sbc	r30, r20
    31fc:	f5 0b       	sbc	r31, r21

000031fe <__udivmodsi4_ep>:
    31fe:	66 1f       	adc	r22, r22
    3200:	77 1f       	adc	r23, r23
    3202:	88 1f       	adc	r24, r24
    3204:	99 1f       	adc	r25, r25
    3206:	1a 94       	dec	r1
    3208:	69 f7       	brne	.-38     	; 0x31e4 <__udivmodsi4_loop>
    320a:	60 95       	com	r22
    320c:	70 95       	com	r23
    320e:	80 95       	com	r24
    3210:	90 95       	com	r25
    3212:	9b 01       	movw	r18, r22
    3214:	ac 01       	movw	r20, r24
    3216:	bd 01       	movw	r22, r26
    3218:	cf 01       	movw	r24, r30
    321a:	08 95       	ret

0000321c <__prologue_saves__>:
    321c:	2f 92       	push	r2
    321e:	3f 92       	push	r3
    3220:	4f 92       	push	r4
    3222:	5f 92       	push	r5
    3224:	6f 92       	push	r6
    3226:	7f 92       	push	r7
    3228:	8f 92       	push	r8
    322a:	9f 92       	push	r9
    322c:	af 92       	push	r10
    322e:	bf 92       	push	r11
    3230:	cf 92       	push	r12
    3232:	df 92       	push	r13
    3234:	ef 92       	push	r14
    3236:	ff 92       	push	r15
    3238:	0f 93       	push	r16
    323a:	1f 93       	push	r17
    323c:	cf 93       	push	r28
    323e:	df 93       	push	r29
    3240:	cd b7       	in	r28, 0x3d	; 61
    3242:	de b7       	in	r29, 0x3e	; 62
    3244:	ca 1b       	sub	r28, r26
    3246:	db 0b       	sbc	r29, r27
    3248:	0f b6       	in	r0, 0x3f	; 63
    324a:	f8 94       	cli
    324c:	de bf       	out	0x3e, r29	; 62
    324e:	0f be       	out	0x3f, r0	; 63
    3250:	cd bf       	out	0x3d, r28	; 61
    3252:	09 94       	ijmp

00003254 <__epilogue_restores__>:
    3254:	2a 88       	ldd	r2, Y+18	; 0x12
    3256:	39 88       	ldd	r3, Y+17	; 0x11
    3258:	48 88       	ldd	r4, Y+16	; 0x10
    325a:	5f 84       	ldd	r5, Y+15	; 0x0f
    325c:	6e 84       	ldd	r6, Y+14	; 0x0e
    325e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3260:	8c 84       	ldd	r8, Y+12	; 0x0c
    3262:	9b 84       	ldd	r9, Y+11	; 0x0b
    3264:	aa 84       	ldd	r10, Y+10	; 0x0a
    3266:	b9 84       	ldd	r11, Y+9	; 0x09
    3268:	c8 84       	ldd	r12, Y+8	; 0x08
    326a:	df 80       	ldd	r13, Y+7	; 0x07
    326c:	ee 80       	ldd	r14, Y+6	; 0x06
    326e:	fd 80       	ldd	r15, Y+5	; 0x05
    3270:	0c 81       	ldd	r16, Y+4	; 0x04
    3272:	1b 81       	ldd	r17, Y+3	; 0x03
    3274:	aa 81       	ldd	r26, Y+2	; 0x02
    3276:	b9 81       	ldd	r27, Y+1	; 0x01
    3278:	ce 0f       	add	r28, r30
    327a:	d1 1d       	adc	r29, r1
    327c:	0f b6       	in	r0, 0x3f	; 63
    327e:	f8 94       	cli
    3280:	de bf       	out	0x3e, r29	; 62
    3282:	0f be       	out	0x3f, r0	; 63
    3284:	cd bf       	out	0x3d, r28	; 61
    3286:	ed 01       	movw	r28, r26
    3288:	08 95       	ret

0000328a <itoa>:
    328a:	fb 01       	movw	r30, r22
    328c:	9f 01       	movw	r18, r30
    328e:	e8 94       	clt
    3290:	42 30       	cpi	r20, 0x02	; 2
    3292:	c4 f0       	brlt	.+48     	; 0x32c4 <itoa+0x3a>
    3294:	45 32       	cpi	r20, 0x25	; 37
    3296:	b4 f4       	brge	.+44     	; 0x32c4 <itoa+0x3a>
    3298:	4a 30       	cpi	r20, 0x0A	; 10
    329a:	29 f4       	brne	.+10     	; 0x32a6 <itoa+0x1c>
    329c:	97 fb       	bst	r25, 7
    329e:	1e f4       	brtc	.+6      	; 0x32a6 <itoa+0x1c>
    32a0:	90 95       	com	r25
    32a2:	81 95       	neg	r24
    32a4:	9f 4f       	sbci	r25, 0xFF	; 255
    32a6:	64 2f       	mov	r22, r20
    32a8:	77 27       	eor	r23, r23
    32aa:	0e 94 76 19 	call	0x32ec	; 0x32ec <__udivmodhi4>
    32ae:	80 5d       	subi	r24, 0xD0	; 208
    32b0:	8a 33       	cpi	r24, 0x3A	; 58
    32b2:	0c f0       	brlt	.+2      	; 0x32b6 <itoa+0x2c>
    32b4:	89 5d       	subi	r24, 0xD9	; 217
    32b6:	81 93       	st	Z+, r24
    32b8:	cb 01       	movw	r24, r22
    32ba:	00 97       	sbiw	r24, 0x00	; 0
    32bc:	a1 f7       	brne	.-24     	; 0x32a6 <itoa+0x1c>
    32be:	16 f4       	brtc	.+4      	; 0x32c4 <itoa+0x3a>
    32c0:	5d e2       	ldi	r21, 0x2D	; 45
    32c2:	51 93       	st	Z+, r21
    32c4:	10 82       	st	Z, r1
    32c6:	c9 01       	movw	r24, r18
    32c8:	0c 94 66 19 	jmp	0x32cc	; 0x32cc <strrev>

000032cc <strrev>:
    32cc:	dc 01       	movw	r26, r24
    32ce:	fc 01       	movw	r30, r24
    32d0:	67 2f       	mov	r22, r23
    32d2:	71 91       	ld	r23, Z+
    32d4:	77 23       	and	r23, r23
    32d6:	e1 f7       	brne	.-8      	; 0x32d0 <strrev+0x4>
    32d8:	32 97       	sbiw	r30, 0x02	; 2
    32da:	04 c0       	rjmp	.+8      	; 0x32e4 <strrev+0x18>
    32dc:	7c 91       	ld	r23, X
    32de:	6d 93       	st	X+, r22
    32e0:	70 83       	st	Z, r23
    32e2:	62 91       	ld	r22, -Z
    32e4:	ae 17       	cp	r26, r30
    32e6:	bf 07       	cpc	r27, r31
    32e8:	c8 f3       	brcs	.-14     	; 0x32dc <strrev+0x10>
    32ea:	08 95       	ret

000032ec <__udivmodhi4>:
    32ec:	aa 1b       	sub	r26, r26
    32ee:	bb 1b       	sub	r27, r27
    32f0:	51 e1       	ldi	r21, 0x11	; 17
    32f2:	07 c0       	rjmp	.+14     	; 0x3302 <__udivmodhi4_ep>

000032f4 <__udivmodhi4_loop>:
    32f4:	aa 1f       	adc	r26, r26
    32f6:	bb 1f       	adc	r27, r27
    32f8:	a6 17       	cp	r26, r22
    32fa:	b7 07       	cpc	r27, r23
    32fc:	10 f0       	brcs	.+4      	; 0x3302 <__udivmodhi4_ep>
    32fe:	a6 1b       	sub	r26, r22
    3300:	b7 0b       	sbc	r27, r23

00003302 <__udivmodhi4_ep>:
    3302:	88 1f       	adc	r24, r24
    3304:	99 1f       	adc	r25, r25
    3306:	5a 95       	dec	r21
    3308:	a9 f7       	brne	.-22     	; 0x32f4 <__udivmodhi4_loop>
    330a:	80 95       	com	r24
    330c:	90 95       	com	r25
    330e:	bc 01       	movw	r22, r24
    3310:	cd 01       	movw	r24, r26
    3312:	08 95       	ret

00003314 <_exit>:
    3314:	f8 94       	cli

00003316 <__stop_program>:
    3316:	ff cf       	rjmp	.-2      	; 0x3316 <__stop_program>
