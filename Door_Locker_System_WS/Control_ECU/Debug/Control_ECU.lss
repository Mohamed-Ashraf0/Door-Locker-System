
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002420  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00002420  000024b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800082  00800082  000024d6  2**0
                  ALLOC
  3 .stab         000029f4  00000000  00000000  000024d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000172f  00000000  00000000  00004ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000065fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000673b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000068ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000084f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000093df  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a18c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a2ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a579  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ad47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <__vector_4>
      14:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <__vector_9>
      28:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__vector_10>
      2c:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cc 05 	call	0xb98	; 0xb98 <main>
      8a:	0c 94 0e 12 	jmp	0x241c	; 0x241c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:

#include "GPIO.h"
#include "Buzzer.h"

void Buzzer_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTC_ID,PIN7_ID,PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 68 08 	call	0x10d0	; 0x10d0 <GPIO_setupPinDirection>
	GPIO_writePin(PORTC_ID, PIN7_ID, LOGIC_LOW);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:

void Buzzer_on(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID, PIN7_ID, LOGIC_HIGH);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	67 e0       	ldi	r22, 0x07	; 7
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 53 09 	call	0x12a6	; 0x12a6 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:

void Buzzer_off(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID, PIN7_ID, LOGIC_LOW);
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <main>:
//call back function
void countOneSecond(void);
/************************************
 *        main
 ************************************/
int main(){
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	6b 97       	sbiw	r28, 0x1b	; 27
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
	/*initialization function */
	uint8 state,check,door_opened=0,buzzer=0,password_changed=0;
     bac:	1b 82       	std	Y+3, r1	; 0x03
     bae:	1a 82       	std	Y+2, r1	; 0x02
     bb0:	19 82       	std	Y+1, r1	; 0x01
	SREG |= (1<<7);
     bb2:	af e5       	ldi	r26, 0x5F	; 95
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	ef e5       	ldi	r30, 0x5F	; 95
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	80 68       	ori	r24, 0x80	; 128
     bbe:	8c 93       	st	X, r24
	UART_ConfigType uart_config = {UART_DATA_8_BITS,UART_NO_PARITY, UART_ONE_STOP_BIT,BAUD_RATE};//uart config
     bc0:	ce 01       	movw	r24, r28
     bc2:	06 96       	adiw	r24, 0x06	; 6
     bc4:	9b 8b       	std	Y+19, r25	; 0x13
     bc6:	8a 8b       	std	Y+18, r24	; 0x12
     bc8:	ed e6       	ldi	r30, 0x6D	; 109
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	fd 8b       	std	Y+21, r31	; 0x15
     bce:	ec 8b       	std	Y+20, r30	; 0x14
     bd0:	f7 e0       	ldi	r31, 0x07	; 7
     bd2:	fe 8b       	std	Y+22, r31	; 0x16
     bd4:	ec 89       	ldd	r30, Y+20	; 0x14
     bd6:	fd 89       	ldd	r31, Y+21	; 0x15
     bd8:	00 80       	ld	r0, Z
     bda:	8c 89       	ldd	r24, Y+20	; 0x14
     bdc:	9d 89       	ldd	r25, Y+21	; 0x15
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	9d 8b       	std	Y+21, r25	; 0x15
     be2:	8c 8b       	std	Y+20, r24	; 0x14
     be4:	ea 89       	ldd	r30, Y+18	; 0x12
     be6:	fb 89       	ldd	r31, Y+19	; 0x13
     be8:	00 82       	st	Z, r0
     bea:	8a 89       	ldd	r24, Y+18	; 0x12
     bec:	9b 89       	ldd	r25, Y+19	; 0x13
     bee:	01 96       	adiw	r24, 0x01	; 1
     bf0:	9b 8b       	std	Y+19, r25	; 0x13
     bf2:	8a 8b       	std	Y+18, r24	; 0x12
     bf4:	9e 89       	ldd	r25, Y+22	; 0x16
     bf6:	91 50       	subi	r25, 0x01	; 1
     bf8:	9e 8b       	std	Y+22, r25	; 0x16
     bfa:	ee 89       	ldd	r30, Y+22	; 0x16
     bfc:	ee 23       	and	r30, r30
     bfe:	51 f7       	brne	.-44     	; 0xbd4 <main+0x3c>
	UART_init(&uart_config);
     c00:	ce 01       	movw	r24, r28
     c02:	06 96       	adiw	r24, 0x06	; 6
     c04:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <UART_init>
	TWI_ConfigType twi_config =	{SLAVE_ADDRESS,BIT_RATE};//i2c config
     c08:	ce 01       	movw	r24, r28
     c0a:	0d 96       	adiw	r24, 0x0d	; 13
     c0c:	98 8f       	std	Y+24, r25	; 0x18
     c0e:	8f 8b       	std	Y+23, r24	; 0x17
     c10:	e8 e6       	ldi	r30, 0x68	; 104
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	fa 8f       	std	Y+26, r31	; 0x1a
     c16:	e9 8f       	std	Y+25, r30	; 0x19
     c18:	f5 e0       	ldi	r31, 0x05	; 5
     c1a:	fb 8f       	std	Y+27, r31	; 0x1b
     c1c:	e9 8d       	ldd	r30, Y+25	; 0x19
     c1e:	fa 8d       	ldd	r31, Y+26	; 0x1a
     c20:	00 80       	ld	r0, Z
     c22:	89 8d       	ldd	r24, Y+25	; 0x19
     c24:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	9a 8f       	std	Y+26, r25	; 0x1a
     c2a:	89 8f       	std	Y+25, r24	; 0x19
     c2c:	ef 89       	ldd	r30, Y+23	; 0x17
     c2e:	f8 8d       	ldd	r31, Y+24	; 0x18
     c30:	00 82       	st	Z, r0
     c32:	8f 89       	ldd	r24, Y+23	; 0x17
     c34:	98 8d       	ldd	r25, Y+24	; 0x18
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	98 8f       	std	Y+24, r25	; 0x18
     c3a:	8f 8b       	std	Y+23, r24	; 0x17
     c3c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c3e:	91 50       	subi	r25, 0x01	; 1
     c40:	9b 8f       	std	Y+27, r25	; 0x1b
     c42:	eb 8d       	ldd	r30, Y+27	; 0x1b
     c44:	ee 23       	and	r30, r30
     c46:	51 f7       	brne	.-44     	; 0xc1c <main+0x84>
	TWI_init(&twi_config);
     c48:	ce 01       	movw	r24, r28
     c4a:	0d 96       	adiw	r24, 0x0d	; 13
     c4c:	0e 94 de 10 	call	0x21bc	; 0x21bc <TWI_init>
	PWM_Timer0_Start(0);
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	0e 94 bd 0b 	call	0x177a	; 0x177a <PWM_Timer0_Start>
	DcMotor_Init();
     c56:	0e 94 08 08 	call	0x1010	; 0x1010 <DcMotor_Init>
	Buzzer_init();
     c5a:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	PIR_init();
     c5e:	0e 94 a6 0b 	call	0x174c	; 0x174c <PIR_init>
	while(1)
	{
		state=UART_recieveByte();//get first state to be ready
     c62:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <UART_recieveByte>
     c66:	8d 83       	std	Y+5, r24	; 0x05
		if(state==CREATE_NEW_PASSWORD)//change password state
     c68:	8d 81       	ldd	r24, Y+5	; 0x05
     c6a:	81 30       	cpi	r24, 0x01	; 1
     c6c:	19 f4       	brne	.+6      	; 0xc74 <main+0xdc>
		{
			Recive_Store_Password_In_EEPROM();//store new password in eeprom
     c6e:	0e 94 d6 06 	call	0xdac	; 0xdac <Recive_Store_Password_In_EEPROM>
     c72:	f7 cf       	rjmp	.-18     	; 0xc62 <main+0xca>

		}
		else if(state==OPEN_DOOR)//open door
     c74:	8d 81       	ldd	r24, Y+5	; 0x05
     c76:	83 30       	cpi	r24, 0x03	; 3
     c78:	09 f0       	breq	.+2      	; 0xc7c <main+0xe4>
     c7a:	41 c0       	rjmp	.+130    	; 0xcfe <main+0x166>
     c7c:	37 c0       	rjmp	.+110    	; 0xcec <main+0x154>
		{
			//loop over this part until user enter 1 valid pass or 3 wrong ones
			while(door_opened==0 && buzzer==0){
				check=Compare_Recived_Passwoed_OldPassword();//compare entered pass by one in eeprom
     c7e:	0e 94 a7 06 	call	0xd4e	; 0xd4e <Compare_Recived_Passwoed_OldPassword>
     c82:	8c 83       	std	Y+4, r24	; 0x04
				UART_sendByte(check);//tell hiu ecu wheather wrong or correct pass
     c84:	8c 81       	ldd	r24, Y+4	; 0x04
     c86:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <UART_sendByte>
				if(check==CORRECT_PASSWORD){
     c8a:	8c 81       	ldd	r24, Y+4	; 0x04
     c8c:	84 30       	cpi	r24, 0x04	; 4
     c8e:	11 f5       	brne	.+68     	; 0xcd4 <main+0x13c>
					DcMotor_Rotate(CW, 100);//open door
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	64 e6       	ldi	r22, 0x64	; 100
     c94:	0e 94 23 08 	call	0x1046	; 0x1046 <DcMotor_Rotate>
					Door_Delay();//15 sec delay for open
     c98:	0e 94 72 07 	call	0xee4	; 0xee4 <Door_Delay>
					DcMotor_Rotate(stop, 0);
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	0e 94 23 08 	call	0x1046	; 0x1046 <DcMotor_Rotate>
					while(1)//check pir sensor if some one exist on door before locking it
					{
						if(PIR_getValue())
     ca4:	0e 94 b2 0b 	call	0x1764	; 0x1764 <PIR_getValue>
     ca8:	88 23       	and	r24, r24
     caa:	21 f0       	breq	.+8      	; 0xcb4 <main+0x11c>
						{
							UART_sendByte(PEOPLE_ENTERING);
     cac:	86 e0       	ldi	r24, 0x06	; 6
     cae:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <UART_sendByte>
     cb2:	f8 cf       	rjmp	.-16     	; 0xca4 <main+0x10c>
						}
						else{
							UART_sendByte(NO_PEOPLE_ENTERING);
     cb4:	87 e0       	ldi	r24, 0x07	; 7
     cb6:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <UART_sendByte>
							break;
						}
					}
					DcMotor_Rotate(A_CW, 100);//clode door
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	64 e6       	ldi	r22, 0x64	; 100
     cbe:	0e 94 23 08 	call	0x1046	; 0x1046 <DcMotor_Rotate>
					Door_Delay();//15 sec delay for cloosing
     cc2:	0e 94 72 07 	call	0xee4	; 0xee4 <Door_Delay>
					DcMotor_Rotate(stop, 0);
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	0e 94 23 08 	call	0x1046	; 0x1046 <DcMotor_Rotate>
					door_opened=1;
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	8b 83       	std	Y+3, r24	; 0x03
     cd2:	0c c0       	rjmp	.+24     	; 0xcec <main+0x154>
				}
				else{
					if (UART_recieveByte() == BUZZER_ON) {
     cd4:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <UART_recieveByte>
     cd8:	88 30       	cpi	r24, 0x08	; 8
     cda:	41 f4       	brne	.+16     	; 0xcec <main+0x154>
						Buzzer_on(); //if user entered wrong pass 3 times in a row hmi ecu tell control ecu to turn on buzzzer
     cdc:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
						Buzzer_Delay();//60 sec delay forbuzzer to work on
     ce0:	0e 94 b7 07 	call	0xf6e	; 0xf6e <Buzzer_Delay>
						Buzzer_off();
     ce4:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
						buzzer=1;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	8a 83       	std	Y+2, r24	; 0x02

		}
		else if(state==OPEN_DOOR)//open door
		{
			//loop over this part until user enter 1 valid pass or 3 wrong ones
			while(door_opened==0 && buzzer==0){
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	88 23       	and	r24, r24
     cf0:	19 f4       	brne	.+6      	; 0xcf8 <main+0x160>
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	88 23       	and	r24, r24
     cf6:	19 f2       	breq	.-122    	; 0xc7e <main+0xe6>
					}

				}
			}

			door_opened=0;
     cf8:	1b 82       	std	Y+3, r1	; 0x03
			buzzer=0;
     cfa:	1a 82       	std	Y+2, r1	; 0x02
     cfc:	b2 cf       	rjmp	.-156    	; 0xc62 <main+0xca>
		}

		else if(state==CHANGE_OLD_PASSWORD)//change password
     cfe:	8d 81       	ldd	r24, Y+5	; 0x05
     d00:	8a 30       	cpi	r24, 0x0A	; 10
     d02:	09 f0       	breq	.+2      	; 0xd06 <main+0x16e>
     d04:	ae cf       	rjmp	.-164    	; 0xc62 <main+0xca>
     d06:	1a c0       	rjmp	.+52     	; 0xd3c <main+0x1a4>
		{
			//loop over this part until user enter correct pass then change old password or enter 3 wrong password
			while(password_changed==0 && buzzer==0)
			{
				check=Compare_Recived_Passwoed_OldPassword();//check entered pass and one in eeprom
     d08:	0e 94 a7 06 	call	0xd4e	; 0xd4e <Compare_Recived_Passwoed_OldPassword>
     d0c:	8c 83       	std	Y+4, r24	; 0x04
				UART_sendByte(check);//tells hiu ecu wheather password is correct or wrong
     d0e:	8c 81       	ldd	r24, Y+4	; 0x04
     d10:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <UART_sendByte>
				if(check==CORRECT_PASSWORD){//if user enter correct password will be able to change old password
     d14:	8c 81       	ldd	r24, Y+4	; 0x04
     d16:	84 30       	cpi	r24, 0x04	; 4
     d18:	29 f4       	brne	.+10     	; 0xd24 <main+0x18c>
					Recive_Store_Password_In_EEPROM();
     d1a:	0e 94 d6 06 	call	0xdac	; 0xdac <Recive_Store_Password_In_EEPROM>
					password_changed=1;
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	89 83       	std	Y+1, r24	; 0x01
     d22:	0c c0       	rjmp	.+24     	; 0xd3c <main+0x1a4>
				}
				else{
					if (UART_recieveByte() == BUZZER_ON) {
     d24:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <UART_recieveByte>
     d28:	88 30       	cpi	r24, 0x08	; 8
     d2a:	41 f4       	brne	.+16     	; 0xd3c <main+0x1a4>
						Buzzer_on();//if user entered wrong pass 3 times in a row hmi ecu tell control ecu to turn on buzzzer
     d2c:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
						Buzzer_Delay();//60 sec delay forbuzzer to work on
     d30:	0e 94 b7 07 	call	0xf6e	; 0xf6e <Buzzer_Delay>
						Buzzer_off();
     d34:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
						buzzer=1;
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	8a 83       	std	Y+2, r24	; 0x02
		}

		else if(state==CHANGE_OLD_PASSWORD)//change password
		{
			//loop over this part until user enter correct pass then change old password or enter 3 wrong password
			while(password_changed==0 && buzzer==0)
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	88 23       	and	r24, r24
     d40:	19 f4       	brne	.+6      	; 0xd48 <main+0x1b0>
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	88 23       	and	r24, r24
     d46:	01 f3       	breq	.-64     	; 0xd08 <main+0x170>
					}

				}

			}
			password_changed=0;
     d48:	19 82       	std	Y+1, r1	; 0x01
			buzzer=0;
     d4a:	1a 82       	std	Y+2, r1	; 0x02
     d4c:	8a cf       	rjmp	.-236    	; 0xc62 <main+0xca>

00000d4e <Compare_Recived_Passwoed_OldPassword>:
		}
	}
}
//function check if entered password entered equal to eeprom one
uint8 Compare_Recived_Passwoed_OldPassword()
{
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	00 d0       	rcall	.+0      	; 0xd54 <Compare_Recived_Passwoed_OldPassword+0x6>
     d54:	00 d0       	rcall	.+0      	; 0xd56 <Compare_Recived_Passwoed_OldPassword+0x8>
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
	uint8 temp1, temp2,check=CORRECT_PASSWORD;
     d5a:	84 e0       	ldi	r24, 0x04	; 4
     d5c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     d5e:	19 82       	std	Y+1, r1	; 0x01
     d60:	1a c0       	rjmp	.+52     	; 0xd96 <Compare_Recived_Passwoed_OldPassword+0x48>
	while (i < PASSWORD_LENGTH) {
		UART_sendByte(synchronize);
     d62:	80 ea       	ldi	r24, 0xA0	; 160
     d64:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <UART_sendByte>
		temp1 = UART_recieveByte();
     d68:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <UART_recieveByte>
     d6c:	8b 83       	std	Y+3, r24	; 0x03
		EEPROM_readByte(EEPROM_FIRST_ADDRESS + i, &temp2);
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	88 2f       	mov	r24, r24
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	8f 5e       	subi	r24, 0xEF	; 239
     d76:	9c 4f       	sbci	r25, 0xFC	; 252
     d78:	9e 01       	movw	r18, r28
     d7a:	2c 5f       	subi	r18, 0xFC	; 252
     d7c:	3f 4f       	sbci	r19, 0xFF	; 255
     d7e:	b9 01       	movw	r22, r18
     d80:	0e 94 7e 10 	call	0x20fc	; 0x20fc <EEPROM_readByte>
		if (temp1 != temp2) {
     d84:	9c 81       	ldd	r25, Y+4	; 0x04
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	89 17       	cp	r24, r25
     d8a:	11 f0       	breq	.+4      	; 0xd90 <Compare_Recived_Passwoed_OldPassword+0x42>
			check=WRONG_PASSWORD;
     d8c:	85 e0       	ldi	r24, 0x05	; 5
     d8e:	8a 83       	std	Y+2, r24	; 0x02
		}
		i++;
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	8f 5f       	subi	r24, 0xFF	; 255
     d94:	89 83       	std	Y+1, r24	; 0x01
//function check if entered password entered equal to eeprom one
uint8 Compare_Recived_Passwoed_OldPassword()
{
	uint8 temp1, temp2,check=CORRECT_PASSWORD;
	uint8 i = 0;
	while (i < PASSWORD_LENGTH) {
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	85 30       	cpi	r24, 0x05	; 5
     d9a:	18 f3       	brcs	.-58     	; 0xd62 <Compare_Recived_Passwoed_OldPassword+0x14>
			check=WRONG_PASSWORD;
		}
		i++;
	}

	return check;
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
}
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <Recive_Store_Password_In_EEPROM>:
//function new entered password and put it in eeprom
void Recive_Store_Password_In_EEPROM() {
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	60 97       	sbiw	r28, 0x10	; 16
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
	uint8 i = 0;
     dc0:	18 8a       	std	Y+16, r1	; 0x10
     dc2:	83 c0       	rjmp	.+262    	; 0xeca <Recive_Store_Password_In_EEPROM+0x11e>
	uint8 temp;
	while (i < PASSWORD_LENGTH) {
		UART_sendByte(synchronize);
     dc4:	80 ea       	ldi	r24, 0xA0	; 160
     dc6:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <UART_sendByte>
		temp = UART_recieveByte();
     dca:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <UART_recieveByte>
     dce:	8f 87       	std	Y+15, r24	; 0x0f
		EEPROM_writeByte(EEPROM_FIRST_ADDRESS + i, temp);
     dd0:	88 89       	ldd	r24, Y+16	; 0x10
     dd2:	88 2f       	mov	r24, r24
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	8f 5e       	subi	r24, 0xEF	; 239
     dd8:	9c 4f       	sbci	r25, 0xFC	; 252
     dda:	6f 85       	ldd	r22, Y+15	; 0x0f
     ddc:	0e 94 3d 10 	call	0x207a	; 0x207a <EEPROM_writeByte>
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	a0 e2       	ldi	r26, 0x20	; 32
     de6:	b1 e4       	ldi	r27, 0x41	; 65
     de8:	8b 87       	std	Y+11, r24	; 0x0b
     dea:	9c 87       	std	Y+12, r25	; 0x0c
     dec:	ad 87       	std	Y+13, r26	; 0x0d
     dee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     df0:	6b 85       	ldd	r22, Y+11	; 0x0b
     df2:	7c 85       	ldd	r23, Y+12	; 0x0c
     df4:	8d 85       	ldd	r24, Y+13	; 0x0d
     df6:	9e 85       	ldd	r25, Y+14	; 0x0e
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	4a ef       	ldi	r20, 0xFA	; 250
     dfe:	54 e4       	ldi	r21, 0x44	; 68
     e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e04:	dc 01       	movw	r26, r24
     e06:	cb 01       	movw	r24, r22
     e08:	8f 83       	std	Y+7, r24	; 0x07
     e0a:	98 87       	std	Y+8, r25	; 0x08
     e0c:	a9 87       	std	Y+9, r26	; 0x09
     e0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e10:	6f 81       	ldd	r22, Y+7	; 0x07
     e12:	78 85       	ldd	r23, Y+8	; 0x08
     e14:	89 85       	ldd	r24, Y+9	; 0x09
     e16:	9a 85       	ldd	r25, Y+10	; 0x0a
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e8       	ldi	r20, 0x80	; 128
     e1e:	5f e3       	ldi	r21, 0x3F	; 63
     e20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e24:	88 23       	and	r24, r24
     e26:	2c f4       	brge	.+10     	; 0xe32 <Recive_Store_Password_In_EEPROM+0x86>
		__ticks = 1;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	9e 83       	std	Y+6, r25	; 0x06
     e2e:	8d 83       	std	Y+5, r24	; 0x05
     e30:	3f c0       	rjmp	.+126    	; 0xeb0 <Recive_Store_Password_In_EEPROM+0x104>
	else if (__tmp > 65535)
     e32:	6f 81       	ldd	r22, Y+7	; 0x07
     e34:	78 85       	ldd	r23, Y+8	; 0x08
     e36:	89 85       	ldd	r24, Y+9	; 0x09
     e38:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	3f ef       	ldi	r19, 0xFF	; 255
     e3e:	4f e7       	ldi	r20, 0x7F	; 127
     e40:	57 e4       	ldi	r21, 0x47	; 71
     e42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e46:	18 16       	cp	r1, r24
     e48:	4c f5       	brge	.+82     	; 0xe9c <Recive_Store_Password_In_EEPROM+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e4a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e4c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e4e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e50:	9e 85       	ldd	r25, Y+14	; 0x0e
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	40 e2       	ldi	r20, 0x20	; 32
     e58:	51 e4       	ldi	r21, 0x41	; 65
     e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e5e:	dc 01       	movw	r26, r24
     e60:	cb 01       	movw	r24, r22
     e62:	bc 01       	movw	r22, r24
     e64:	cd 01       	movw	r24, r26
     e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	9e 83       	std	Y+6, r25	; 0x06
     e70:	8d 83       	std	Y+5, r24	; 0x05
     e72:	0f c0       	rjmp	.+30     	; 0xe92 <Recive_Store_Password_In_EEPROM+0xe6>
     e74:	88 ec       	ldi	r24, 0xC8	; 200
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	9c 83       	std	Y+4, r25	; 0x04
     e7a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	9c 81       	ldd	r25, Y+4	; 0x04
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	f1 f7       	brne	.-4      	; 0xe80 <Recive_Store_Password_In_EEPROM+0xd4>
     e84:	9c 83       	std	Y+4, r25	; 0x04
     e86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e88:	8d 81       	ldd	r24, Y+5	; 0x05
     e8a:	9e 81       	ldd	r25, Y+6	; 0x06
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	9e 83       	std	Y+6, r25	; 0x06
     e90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e92:	8d 81       	ldd	r24, Y+5	; 0x05
     e94:	9e 81       	ldd	r25, Y+6	; 0x06
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	69 f7       	brne	.-38     	; 0xe74 <Recive_Store_Password_In_EEPROM+0xc8>
     e9a:	14 c0       	rjmp	.+40     	; 0xec4 <Recive_Store_Password_In_EEPROM+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e9c:	6f 81       	ldd	r22, Y+7	; 0x07
     e9e:	78 85       	ldd	r23, Y+8	; 0x08
     ea0:	89 85       	ldd	r24, Y+9	; 0x09
     ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	9e 83       	std	Y+6, r25	; 0x06
     eae:	8d 83       	std	Y+5, r24	; 0x05
     eb0:	8d 81       	ldd	r24, Y+5	; 0x05
     eb2:	9e 81       	ldd	r25, Y+6	; 0x06
     eb4:	9a 83       	std	Y+2, r25	; 0x02
     eb6:	89 83       	std	Y+1, r24	; 0x01
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	9a 81       	ldd	r25, Y+2	; 0x02
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	f1 f7       	brne	.-4      	; 0xebc <Recive_Store_Password_In_EEPROM+0x110>
     ec0:	9a 83       	std	Y+2, r25	; 0x02
     ec2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10); /* delay for EEPROM*/
		i++;
     ec4:	88 89       	ldd	r24, Y+16	; 0x10
     ec6:	8f 5f       	subi	r24, 0xFF	; 255
     ec8:	88 8b       	std	Y+16, r24	; 0x10
}
//function new entered password and put it in eeprom
void Recive_Store_Password_In_EEPROM() {
	uint8 i = 0;
	uint8 temp;
	while (i < PASSWORD_LENGTH) {
     eca:	88 89       	ldd	r24, Y+16	; 0x10
     ecc:	85 30       	cpi	r24, 0x05	; 5
     ece:	08 f4       	brcc	.+2      	; 0xed2 <Recive_Store_Password_In_EEPROM+0x126>
     ed0:	79 cf       	rjmp	.-270    	; 0xdc4 <Recive_Store_Password_In_EEPROM+0x18>
		temp = UART_recieveByte();
		EEPROM_writeByte(EEPROM_FIRST_ADDRESS + i, temp);
		_delay_ms(10); /* delay for EEPROM*/
		i++;
	}
}
     ed2:	60 96       	adiw	r28, 0x10	; 16
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	f8 94       	cli
     ed8:	de bf       	out	0x3e, r29	; 62
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	cd bf       	out	0x3d, r28	; 61
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <Door_Delay>:
//15 sec door delay
void Door_Delay(void)
{
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	2c 97       	sbiw	r28, 0x0c	; 12
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
	Timer_ConfigType timer_config = { TIMER_INITIAL_VALUE,FOR_ONE_SECOND_COMPARE_VALUE, TIMER1, F_CPU_div_256, CTC_MODE };
     ef8:	ce 01       	movw	r24, r28
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	99 87       	std	Y+9, r25	; 0x09
     efe:	88 87       	std	Y+8, r24	; 0x08
     f00:	e4 e7       	ldi	r30, 0x74	; 116
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	fb 87       	std	Y+11, r31	; 0x0b
     f06:	ea 87       	std	Y+10, r30	; 0x0a
     f08:	f7 e0       	ldi	r31, 0x07	; 7
     f0a:	fc 87       	std	Y+12, r31	; 0x0c
     f0c:	ea 85       	ldd	r30, Y+10	; 0x0a
     f0e:	fb 85       	ldd	r31, Y+11	; 0x0b
     f10:	00 80       	ld	r0, Z
     f12:	8a 85       	ldd	r24, Y+10	; 0x0a
     f14:	9b 85       	ldd	r25, Y+11	; 0x0b
     f16:	01 96       	adiw	r24, 0x01	; 1
     f18:	9b 87       	std	Y+11, r25	; 0x0b
     f1a:	8a 87       	std	Y+10, r24	; 0x0a
     f1c:	e8 85       	ldd	r30, Y+8	; 0x08
     f1e:	f9 85       	ldd	r31, Y+9	; 0x09
     f20:	00 82       	st	Z, r0
     f22:	88 85       	ldd	r24, Y+8	; 0x08
     f24:	99 85       	ldd	r25, Y+9	; 0x09
     f26:	01 96       	adiw	r24, 0x01	; 1
     f28:	99 87       	std	Y+9, r25	; 0x09
     f2a:	88 87       	std	Y+8, r24	; 0x08
     f2c:	9c 85       	ldd	r25, Y+12	; 0x0c
     f2e:	91 50       	subi	r25, 0x01	; 1
     f30:	9c 87       	std	Y+12, r25	; 0x0c
     f32:	ec 85       	ldd	r30, Y+12	; 0x0c
     f34:	ee 23       	and	r30, r30
     f36:	51 f7       	brne	.-44     	; 0xf0c <Door_Delay+0x28>
	Timer_setCallBack(countOneSecond, TIMER1);
     f38:	8c ef       	ldi	r24, 0xFC	; 252
     f3a:	97 e0       	ldi	r25, 0x07	; 7
     f3c:	61 e0       	ldi	r22, 0x01	; 1
     f3e:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <Timer_setCallBack>
	TIMER_init(&timer_config);
     f42:	ce 01       	movw	r24, r28
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <TIMER_init>
	while (g_tick_number < 15);
     f4a:	80 91 82 00 	lds	r24, 0x0082
     f4e:	8f 30       	cpi	r24, 0x0F	; 15
     f50:	e0 f3       	brcs	.-8      	; 0xf4a <Door_Delay+0x66>
	g_tick_number = 0;
     f52:	10 92 82 00 	sts	0x0082, r1
	Timer_deInit(TIMER1);
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <Timer_deInit>

}
     f5c:	2c 96       	adiw	r28, 0x0c	; 12
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <Buzzer_Delay>:
//60 sec buzzer delay
void Buzzer_Delay(void)
{
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	2c 97       	sbiw	r28, 0x0c	; 12
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	de bf       	out	0x3e, r29	; 62
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	cd bf       	out	0x3d, r28	; 61
	Timer_ConfigType timer_config = { TIMER_INITIAL_VALUE,FOR_ONE_SECOND_COMPARE_VALUE, TIMER1, F_CPU_div_256, CTC_MODE };
     f82:	ce 01       	movw	r24, r28
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	99 87       	std	Y+9, r25	; 0x09
     f88:	88 87       	std	Y+8, r24	; 0x08
     f8a:	eb e7       	ldi	r30, 0x7B	; 123
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	fb 87       	std	Y+11, r31	; 0x0b
     f90:	ea 87       	std	Y+10, r30	; 0x0a
     f92:	f7 e0       	ldi	r31, 0x07	; 7
     f94:	fc 87       	std	Y+12, r31	; 0x0c
     f96:	ea 85       	ldd	r30, Y+10	; 0x0a
     f98:	fb 85       	ldd	r31, Y+11	; 0x0b
     f9a:	00 80       	ld	r0, Z
     f9c:	8a 85       	ldd	r24, Y+10	; 0x0a
     f9e:	9b 85       	ldd	r25, Y+11	; 0x0b
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	9b 87       	std	Y+11, r25	; 0x0b
     fa4:	8a 87       	std	Y+10, r24	; 0x0a
     fa6:	e8 85       	ldd	r30, Y+8	; 0x08
     fa8:	f9 85       	ldd	r31, Y+9	; 0x09
     faa:	00 82       	st	Z, r0
     fac:	88 85       	ldd	r24, Y+8	; 0x08
     fae:	99 85       	ldd	r25, Y+9	; 0x09
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	99 87       	std	Y+9, r25	; 0x09
     fb4:	88 87       	std	Y+8, r24	; 0x08
     fb6:	9c 85       	ldd	r25, Y+12	; 0x0c
     fb8:	91 50       	subi	r25, 0x01	; 1
     fba:	9c 87       	std	Y+12, r25	; 0x0c
     fbc:	ec 85       	ldd	r30, Y+12	; 0x0c
     fbe:	ee 23       	and	r30, r30
     fc0:	51 f7       	brne	.-44     	; 0xf96 <Buzzer_Delay+0x28>
	Timer_setCallBack(countOneSecond, TIMER1);
     fc2:	8c ef       	ldi	r24, 0xFC	; 252
     fc4:	97 e0       	ldi	r25, 0x07	; 7
     fc6:	61 e0       	ldi	r22, 0x01	; 1
     fc8:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <Timer_setCallBack>
	TIMER_init(&timer_config);
     fcc:	ce 01       	movw	r24, r28
     fce:	01 96       	adiw	r24, 0x01	; 1
     fd0:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <TIMER_init>
	while (g_tick_number < 60);
     fd4:	80 91 82 00 	lds	r24, 0x0082
     fd8:	8c 33       	cpi	r24, 0x3C	; 60
     fda:	e0 f3       	brcs	.-8      	; 0xfd4 <Buzzer_Delay+0x66>
	g_tick_number = 0;
     fdc:	10 92 82 00 	sts	0x0082, r1
	Timer_deInit(TIMER1);
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <Timer_deInit>

}
     fe6:	2c 96       	adiw	r28, 0x0c	; 12
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <countOneSecond>:
//call back function
void countOneSecond(void) {
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
	g_tick_number++;/*called every 1 sec*/
    1000:	80 91 82 00 	lds	r24, 0x0082
    1004:	8f 5f       	subi	r24, 0xFF	; 255
    1006:	80 93 82 00 	sts	0x0082, r24
}
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <DcMotor_Init>:

#include "GPIO.h"
#include "PWM.h"
#include "DC_Motor.h"
 void DcMotor_Init(void)
 {
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
	 /* configure pin PB0 and PB1 as output pins */
	 GPIO_setupPinDirection(PORTD_ID,PIN6_ID,PIN_OUTPUT);
    1018:	83 e0       	ldi	r24, 0x03	; 3
    101a:	66 e0       	ldi	r22, 0x06	; 6
    101c:	41 e0       	ldi	r20, 0x01	; 1
    101e:	0e 94 68 08 	call	0x10d0	; 0x10d0 <GPIO_setupPinDirection>
	 GPIO_setupPinDirection(PORTD_ID,PIN7_ID,PIN_OUTPUT);
    1022:	83 e0       	ldi	r24, 0x03	; 3
    1024:	67 e0       	ldi	r22, 0x07	; 7
    1026:	41 e0       	ldi	r20, 0x01	; 1
    1028:	0e 94 68 08 	call	0x10d0	; 0x10d0 <GPIO_setupPinDirection>
	 /* Motor is stop at the beginning */
	 GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_LOW);
    102c:	83 e0       	ldi	r24, 0x03	; 3
    102e:	66 e0       	ldi	r22, 0x06	; 6
    1030:	40 e0       	ldi	r20, 0x00	; 0
    1032:	0e 94 53 09 	call	0x12a6	; 0x12a6 <GPIO_writePin>
	 GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_LOW);
    1036:	83 e0       	ldi	r24, 0x03	; 3
    1038:	67 e0       	ldi	r22, 0x07	; 7
    103a:	40 e0       	ldi	r20, 0x00	; 0
    103c:	0e 94 53 09 	call	0x12a6	; 0x12a6 <GPIO_writePin>

 }
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <DcMotor_Rotate>:
 void DcMotor_Rotate(DcMotor_State state, uint8 speed)
 {
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	00 d0       	rcall	.+0      	; 0x104c <DcMotor_Rotate+0x6>
    104c:	00 d0       	rcall	.+0      	; 0x104e <DcMotor_Rotate+0x8>
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	89 83       	std	Y+1, r24	; 0x01
    1054:	6a 83       	std	Y+2, r22	; 0x02
	 PWM_Timer0_Start(speed);
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	0e 94 bd 0b 	call	0x177a	; 0x177a <PWM_Timer0_Start>
	 switch (state){
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	3c 83       	std	Y+4, r19	; 0x04
    1064:	2b 83       	std	Y+3, r18	; 0x03
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	9c 81       	ldd	r25, Y+4	; 0x04
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	91 05       	cpc	r25, r1
    106e:	a1 f0       	breq	.+40     	; 0x1098 <DcMotor_Rotate+0x52>
    1070:	2b 81       	ldd	r18, Y+3	; 0x03
    1072:	3c 81       	ldd	r19, Y+4	; 0x04
    1074:	22 30       	cpi	r18, 0x02	; 2
    1076:	31 05       	cpc	r19, r1
    1078:	d1 f0       	breq	.+52     	; 0x10ae <DcMotor_Rotate+0x68>
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	9c 81       	ldd	r25, Y+4	; 0x04
    107e:	00 97       	sbiw	r24, 0x00	; 0
    1080:	01 f5       	brne	.+64     	; 0x10c2 <DcMotor_Rotate+0x7c>
	 case CW:
		 GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_LOW);
    1082:	83 e0       	ldi	r24, 0x03	; 3
    1084:	66 e0       	ldi	r22, 0x06	; 6
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	0e 94 53 09 	call	0x12a6	; 0x12a6 <GPIO_writePin>
		 GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_HIGH);
    108c:	83 e0       	ldi	r24, 0x03	; 3
    108e:	67 e0       	ldi	r22, 0x07	; 7
    1090:	41 e0       	ldi	r20, 0x01	; 1
    1092:	0e 94 53 09 	call	0x12a6	; 0x12a6 <GPIO_writePin>
    1096:	15 c0       	rjmp	.+42     	; 0x10c2 <DcMotor_Rotate+0x7c>
		 break;
	 case A_CW:
		 GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_HIGH);
    1098:	83 e0       	ldi	r24, 0x03	; 3
    109a:	66 e0       	ldi	r22, 0x06	; 6
    109c:	41 e0       	ldi	r20, 0x01	; 1
    109e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <GPIO_writePin>
		 GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_LOW);
    10a2:	83 e0       	ldi	r24, 0x03	; 3
    10a4:	67 e0       	ldi	r22, 0x07	; 7
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	0e 94 53 09 	call	0x12a6	; 0x12a6 <GPIO_writePin>
    10ac:	0a c0       	rjmp	.+20     	; 0x10c2 <DcMotor_Rotate+0x7c>
		 break;
	 case stop:
		 GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_LOW);
    10ae:	83 e0       	ldi	r24, 0x03	; 3
    10b0:	66 e0       	ldi	r22, 0x06	; 6
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	0e 94 53 09 	call	0x12a6	; 0x12a6 <GPIO_writePin>
		 GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_LOW);
    10b8:	83 e0       	ldi	r24, 0x03	; 3
    10ba:	67 e0       	ldi	r22, 0x07	; 7
    10bc:	40 e0       	ldi	r20, 0x00	; 0
    10be:	0e 94 53 09 	call	0x12a6	; 0x12a6 <GPIO_writePin>
		 break;

	 }

 }
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <GPIO_setupPinDirection+0x6>
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <GPIO_setupPinDirection+0x8>
    10d8:	0f 92       	push	r0
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	6a 83       	std	Y+2, r22	; 0x02
    10e2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	88 30       	cpi	r24, 0x08	; 8
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <GPIO_setupPinDirection+0x1c>
    10ea:	d5 c0       	rjmp	.+426    	; 0x1296 <GPIO_setupPinDirection+0x1c6>
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	84 30       	cpi	r24, 0x04	; 4
    10f0:	08 f0       	brcs	.+2      	; 0x10f4 <GPIO_setupPinDirection+0x24>
    10f2:	d1 c0       	rjmp	.+418    	; 0x1296 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	3d 83       	std	Y+5, r19	; 0x05
    10fc:	2c 83       	std	Y+4, r18	; 0x04
    10fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1100:	9d 81       	ldd	r25, Y+5	; 0x05
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	91 05       	cpc	r25, r1
    1106:	09 f4       	brne	.+2      	; 0x110a <GPIO_setupPinDirection+0x3a>
    1108:	43 c0       	rjmp	.+134    	; 0x1190 <GPIO_setupPinDirection+0xc0>
    110a:	2c 81       	ldd	r18, Y+4	; 0x04
    110c:	3d 81       	ldd	r19, Y+5	; 0x05
    110e:	22 30       	cpi	r18, 0x02	; 2
    1110:	31 05       	cpc	r19, r1
    1112:	2c f4       	brge	.+10     	; 0x111e <GPIO_setupPinDirection+0x4e>
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	9d 81       	ldd	r25, Y+5	; 0x05
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	71 f0       	breq	.+28     	; 0x1138 <GPIO_setupPinDirection+0x68>
    111c:	bc c0       	rjmp	.+376    	; 0x1296 <GPIO_setupPinDirection+0x1c6>
    111e:	2c 81       	ldd	r18, Y+4	; 0x04
    1120:	3d 81       	ldd	r19, Y+5	; 0x05
    1122:	22 30       	cpi	r18, 0x02	; 2
    1124:	31 05       	cpc	r19, r1
    1126:	09 f4       	brne	.+2      	; 0x112a <GPIO_setupPinDirection+0x5a>
    1128:	5f c0       	rjmp	.+190    	; 0x11e8 <GPIO_setupPinDirection+0x118>
    112a:	8c 81       	ldd	r24, Y+4	; 0x04
    112c:	9d 81       	ldd	r25, Y+5	; 0x05
    112e:	83 30       	cpi	r24, 0x03	; 3
    1130:	91 05       	cpc	r25, r1
    1132:	09 f4       	brne	.+2      	; 0x1136 <GPIO_setupPinDirection+0x66>
    1134:	85 c0       	rjmp	.+266    	; 0x1240 <GPIO_setupPinDirection+0x170>
    1136:	af c0       	rjmp	.+350    	; 0x1296 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	a1 f4       	brne	.+40     	; 0x1166 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    113e:	aa e3       	ldi	r26, 0x3A	; 58
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	ea e3       	ldi	r30, 0x3A	; 58
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 2e       	mov	r0, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <GPIO_setupPinDirection+0x8c>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <GPIO_setupPinDirection+0x88>
    1160:	84 2b       	or	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	98 c0       	rjmp	.+304    	; 0x1296 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1166:	aa e3       	ldi	r26, 0x3A	; 58
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	ea e3       	ldi	r30, 0x3A	; 58
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	48 2f       	mov	r20, r24
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	02 2e       	mov	r0, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <GPIO_setupPinDirection+0xb4>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	0a 94       	dec	r0
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <GPIO_setupPinDirection+0xb0>
    1188:	80 95       	com	r24
    118a:	84 23       	and	r24, r20
    118c:	8c 93       	st	X, r24
    118e:	83 c0       	rjmp	.+262    	; 0x1296 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	a1 f4       	brne	.+40     	; 0x11be <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1196:	a7 e3       	ldi	r26, 0x37	; 55
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e7 e3       	ldi	r30, 0x37	; 55
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	48 2f       	mov	r20, r24
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 2e       	mov	r0, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <GPIO_setupPinDirection+0xe4>
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	0a 94       	dec	r0
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <GPIO_setupPinDirection+0xe0>
    11b8:	84 2b       	or	r24, r20
    11ba:	8c 93       	st	X, r24
    11bc:	6c c0       	rjmp	.+216    	; 0x1296 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    11be:	a7 e3       	ldi	r26, 0x37	; 55
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e7 e3       	ldi	r30, 0x37	; 55
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <GPIO_setupPinDirection+0x10c>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <GPIO_setupPinDirection+0x108>
    11e0:	80 95       	com	r24
    11e2:	84 23       	and	r24, r20
    11e4:	8c 93       	st	X, r24
    11e6:	57 c0       	rjmp	.+174    	; 0x1296 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	a1 f4       	brne	.+40     	; 0x1216 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    11ee:	a4 e3       	ldi	r26, 0x34	; 52
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e4 e3       	ldi	r30, 0x34	; 52
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <GPIO_setupPinDirection+0x13c>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <GPIO_setupPinDirection+0x138>
    1210:	84 2b       	or	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	40 c0       	rjmp	.+128    	; 0x1296 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1216:	a4 e3       	ldi	r26, 0x34	; 52
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e4 e3       	ldi	r30, 0x34	; 52
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <GPIO_setupPinDirection+0x164>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <GPIO_setupPinDirection+0x160>
    1238:	80 95       	com	r24
    123a:	84 23       	and	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	2b c0       	rjmp	.+86     	; 0x1296 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	a1 f4       	brne	.+40     	; 0x126e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1246:	a1 e3       	ldi	r26, 0x31	; 49
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e1 e3       	ldi	r30, 0x31	; 49
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	48 2f       	mov	r20, r24
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	02 2e       	mov	r0, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <GPIO_setupPinDirection+0x194>
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	0a 94       	dec	r0
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <GPIO_setupPinDirection+0x190>
    1268:	84 2b       	or	r24, r20
    126a:	8c 93       	st	X, r24
    126c:	14 c0       	rjmp	.+40     	; 0x1296 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    126e:	a1 e3       	ldi	r26, 0x31	; 49
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e1 e3       	ldi	r30, 0x31	; 49
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	48 2f       	mov	r20, r24
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	02 2e       	mov	r0, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <GPIO_setupPinDirection+0x1bc>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	0a 94       	dec	r0
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <GPIO_setupPinDirection+0x1b8>
    1290:	80 95       	com	r24
    1292:	84 23       	and	r24, r20
    1294:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <GPIO_writePin+0x6>
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <GPIO_writePin+0x8>
    12ae:	0f 92       	push	r0
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	89 83       	std	Y+1, r24	; 0x01
    12b6:	6a 83       	std	Y+2, r22	; 0x02
    12b8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	88 30       	cpi	r24, 0x08	; 8
    12be:	08 f0       	brcs	.+2      	; 0x12c2 <GPIO_writePin+0x1c>
    12c0:	d5 c0       	rjmp	.+426    	; 0x146c <GPIO_writePin+0x1c6>
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	84 30       	cpi	r24, 0x04	; 4
    12c6:	08 f0       	brcs	.+2      	; 0x12ca <GPIO_writePin+0x24>
    12c8:	d1 c0       	rjmp	.+418    	; 0x146c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	3d 83       	std	Y+5, r19	; 0x05
    12d2:	2c 83       	std	Y+4, r18	; 0x04
    12d4:	8c 81       	ldd	r24, Y+4	; 0x04
    12d6:	9d 81       	ldd	r25, Y+5	; 0x05
    12d8:	81 30       	cpi	r24, 0x01	; 1
    12da:	91 05       	cpc	r25, r1
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <GPIO_writePin+0x3a>
    12de:	43 c0       	rjmp	.+134    	; 0x1366 <GPIO_writePin+0xc0>
    12e0:	2c 81       	ldd	r18, Y+4	; 0x04
    12e2:	3d 81       	ldd	r19, Y+5	; 0x05
    12e4:	22 30       	cpi	r18, 0x02	; 2
    12e6:	31 05       	cpc	r19, r1
    12e8:	2c f4       	brge	.+10     	; 0x12f4 <GPIO_writePin+0x4e>
    12ea:	8c 81       	ldd	r24, Y+4	; 0x04
    12ec:	9d 81       	ldd	r25, Y+5	; 0x05
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	71 f0       	breq	.+28     	; 0x130e <GPIO_writePin+0x68>
    12f2:	bc c0       	rjmp	.+376    	; 0x146c <GPIO_writePin+0x1c6>
    12f4:	2c 81       	ldd	r18, Y+4	; 0x04
    12f6:	3d 81       	ldd	r19, Y+5	; 0x05
    12f8:	22 30       	cpi	r18, 0x02	; 2
    12fa:	31 05       	cpc	r19, r1
    12fc:	09 f4       	brne	.+2      	; 0x1300 <GPIO_writePin+0x5a>
    12fe:	5f c0       	rjmp	.+190    	; 0x13be <GPIO_writePin+0x118>
    1300:	8c 81       	ldd	r24, Y+4	; 0x04
    1302:	9d 81       	ldd	r25, Y+5	; 0x05
    1304:	83 30       	cpi	r24, 0x03	; 3
    1306:	91 05       	cpc	r25, r1
    1308:	09 f4       	brne	.+2      	; 0x130c <GPIO_writePin+0x66>
    130a:	85 c0       	rjmp	.+266    	; 0x1416 <GPIO_writePin+0x170>
    130c:	af c0       	rjmp	.+350    	; 0x146c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	a1 f4       	brne	.+40     	; 0x133c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1314:	ab e3       	ldi	r26, 0x3B	; 59
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	eb e3       	ldi	r30, 0x3B	; 59
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	48 2f       	mov	r20, r24
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	02 2e       	mov	r0, r18
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <GPIO_writePin+0x8c>
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	0a 94       	dec	r0
    1334:	e2 f7       	brpl	.-8      	; 0x132e <GPIO_writePin+0x88>
    1336:	84 2b       	or	r24, r20
    1338:	8c 93       	st	X, r24
    133a:	98 c0       	rjmp	.+304    	; 0x146c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    133c:	ab e3       	ldi	r26, 0x3B	; 59
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	eb e3       	ldi	r30, 0x3B	; 59
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	48 2f       	mov	r20, r24
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	02 2e       	mov	r0, r18
    1354:	02 c0       	rjmp	.+4      	; 0x135a <GPIO_writePin+0xb4>
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	0a 94       	dec	r0
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <GPIO_writePin+0xb0>
    135e:	80 95       	com	r24
    1360:	84 23       	and	r24, r20
    1362:	8c 93       	st	X, r24
    1364:	83 c0       	rjmp	.+262    	; 0x146c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	a1 f4       	brne	.+40     	; 0x1394 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    136c:	a8 e3       	ldi	r26, 0x38	; 56
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e8 e3       	ldi	r30, 0x38	; 56
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	48 2f       	mov	r20, r24
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	02 2e       	mov	r0, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <GPIO_writePin+0xe4>
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	0a 94       	dec	r0
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <GPIO_writePin+0xe0>
    138e:	84 2b       	or	r24, r20
    1390:	8c 93       	st	X, r24
    1392:	6c c0       	rjmp	.+216    	; 0x146c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1394:	a8 e3       	ldi	r26, 0x38	; 56
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e8 e3       	ldi	r30, 0x38	; 56
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	48 2f       	mov	r20, r24
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	02 2e       	mov	r0, r18
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <GPIO_writePin+0x10c>
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	0a 94       	dec	r0
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <GPIO_writePin+0x108>
    13b6:	80 95       	com	r24
    13b8:	84 23       	and	r24, r20
    13ba:	8c 93       	st	X, r24
    13bc:	57 c0       	rjmp	.+174    	; 0x146c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	a1 f4       	brne	.+40     	; 0x13ec <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    13c4:	a5 e3       	ldi	r26, 0x35	; 53
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e5 e3       	ldi	r30, 0x35	; 53
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	48 2f       	mov	r20, r24
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 2e       	mov	r0, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <GPIO_writePin+0x13c>
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	0a 94       	dec	r0
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <GPIO_writePin+0x138>
    13e6:	84 2b       	or	r24, r20
    13e8:	8c 93       	st	X, r24
    13ea:	40 c0       	rjmp	.+128    	; 0x146c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    13ec:	a5 e3       	ldi	r26, 0x35	; 53
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e5 e3       	ldi	r30, 0x35	; 53
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	48 2f       	mov	r20, r24
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	02 2e       	mov	r0, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <GPIO_writePin+0x164>
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	0a 94       	dec	r0
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <GPIO_writePin+0x160>
    140e:	80 95       	com	r24
    1410:	84 23       	and	r24, r20
    1412:	8c 93       	st	X, r24
    1414:	2b c0       	rjmp	.+86     	; 0x146c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	a1 f4       	brne	.+40     	; 0x1444 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    141c:	a2 e3       	ldi	r26, 0x32	; 50
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e2 e3       	ldi	r30, 0x32	; 50
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	48 2f       	mov	r20, r24
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	02 2e       	mov	r0, r18
    1434:	02 c0       	rjmp	.+4      	; 0x143a <GPIO_writePin+0x194>
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	0a 94       	dec	r0
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <GPIO_writePin+0x190>
    143e:	84 2b       	or	r24, r20
    1440:	8c 93       	st	X, r24
    1442:	14 c0       	rjmp	.+40     	; 0x146c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1444:	a2 e3       	ldi	r26, 0x32	; 50
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e2 e3       	ldi	r30, 0x32	; 50
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 2e       	mov	r0, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <GPIO_writePin+0x1bc>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <GPIO_writePin+0x1b8>
    1466:	80 95       	com	r24
    1468:	84 23       	and	r24, r20
    146a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	00 d0       	rcall	.+0      	; 0x1482 <GPIO_readPin+0x6>
    1482:	00 d0       	rcall	.+0      	; 0x1484 <GPIO_readPin+0x8>
    1484:	0f 92       	push	r0
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	8a 83       	std	Y+2, r24	; 0x02
    148c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    148e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	88 30       	cpi	r24, 0x08	; 8
    1494:	08 f0       	brcs	.+2      	; 0x1498 <GPIO_readPin+0x1c>
    1496:	84 c0       	rjmp	.+264    	; 0x15a0 <GPIO_readPin+0x124>
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	84 30       	cpi	r24, 0x04	; 4
    149c:	08 f0       	brcs	.+2      	; 0x14a0 <GPIO_readPin+0x24>
    149e:	80 c0       	rjmp	.+256    	; 0x15a0 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	3d 83       	std	Y+5, r19	; 0x05
    14a8:	2c 83       	std	Y+4, r18	; 0x04
    14aa:	4c 81       	ldd	r20, Y+4	; 0x04
    14ac:	5d 81       	ldd	r21, Y+5	; 0x05
    14ae:	41 30       	cpi	r20, 0x01	; 1
    14b0:	51 05       	cpc	r21, r1
    14b2:	79 f1       	breq	.+94     	; 0x1512 <GPIO_readPin+0x96>
    14b4:	8c 81       	ldd	r24, Y+4	; 0x04
    14b6:	9d 81       	ldd	r25, Y+5	; 0x05
    14b8:	82 30       	cpi	r24, 0x02	; 2
    14ba:	91 05       	cpc	r25, r1
    14bc:	34 f4       	brge	.+12     	; 0x14ca <GPIO_readPin+0x4e>
    14be:	2c 81       	ldd	r18, Y+4	; 0x04
    14c0:	3d 81       	ldd	r19, Y+5	; 0x05
    14c2:	21 15       	cp	r18, r1
    14c4:	31 05       	cpc	r19, r1
    14c6:	69 f0       	breq	.+26     	; 0x14e2 <GPIO_readPin+0x66>
    14c8:	6b c0       	rjmp	.+214    	; 0x15a0 <GPIO_readPin+0x124>
    14ca:	4c 81       	ldd	r20, Y+4	; 0x04
    14cc:	5d 81       	ldd	r21, Y+5	; 0x05
    14ce:	42 30       	cpi	r20, 0x02	; 2
    14d0:	51 05       	cpc	r21, r1
    14d2:	b9 f1       	breq	.+110    	; 0x1542 <GPIO_readPin+0xc6>
    14d4:	8c 81       	ldd	r24, Y+4	; 0x04
    14d6:	9d 81       	ldd	r25, Y+5	; 0x05
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	91 05       	cpc	r25, r1
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <GPIO_readPin+0x64>
    14de:	49 c0       	rjmp	.+146    	; 0x1572 <GPIO_readPin+0xf6>
    14e0:	5f c0       	rjmp	.+190    	; 0x15a0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    14e2:	e9 e3       	ldi	r30, 0x39	; 57
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	a9 01       	movw	r20, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <GPIO_readPin+0x7e>
    14f6:	55 95       	asr	r21
    14f8:	47 95       	ror	r20
    14fa:	8a 95       	dec	r24
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <GPIO_readPin+0x7a>
    14fe:	ca 01       	movw	r24, r20
    1500:	81 70       	andi	r24, 0x01	; 1
    1502:	90 70       	andi	r25, 0x00	; 0
    1504:	88 23       	and	r24, r24
    1506:	19 f0       	breq	.+6      	; 0x150e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	49 c0       	rjmp	.+146    	; 0x15a0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    150e:	19 82       	std	Y+1, r1	; 0x01
    1510:	47 c0       	rjmp	.+142    	; 0x15a0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1512:	e6 e3       	ldi	r30, 0x36	; 54
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	88 2f       	mov	r24, r24
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	a9 01       	movw	r20, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <GPIO_readPin+0xae>
    1526:	55 95       	asr	r21
    1528:	47 95       	ror	r20
    152a:	8a 95       	dec	r24
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <GPIO_readPin+0xaa>
    152e:	ca 01       	movw	r24, r20
    1530:	81 70       	andi	r24, 0x01	; 1
    1532:	90 70       	andi	r25, 0x00	; 0
    1534:	88 23       	and	r24, r24
    1536:	19 f0       	breq	.+6      	; 0x153e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	89 83       	std	Y+1, r24	; 0x01
    153c:	31 c0       	rjmp	.+98     	; 0x15a0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    153e:	19 82       	std	Y+1, r1	; 0x01
    1540:	2f c0       	rjmp	.+94     	; 0x15a0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1542:	e3 e3       	ldi	r30, 0x33	; 51
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	88 2f       	mov	r24, r24
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	a9 01       	movw	r20, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <GPIO_readPin+0xde>
    1556:	55 95       	asr	r21
    1558:	47 95       	ror	r20
    155a:	8a 95       	dec	r24
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <GPIO_readPin+0xda>
    155e:	ca 01       	movw	r24, r20
    1560:	81 70       	andi	r24, 0x01	; 1
    1562:	90 70       	andi	r25, 0x00	; 0
    1564:	88 23       	and	r24, r24
    1566:	19 f0       	breq	.+6      	; 0x156e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	19 c0       	rjmp	.+50     	; 0x15a0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    156e:	19 82       	std	Y+1, r1	; 0x01
    1570:	17 c0       	rjmp	.+46     	; 0x15a0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1572:	e0 e3       	ldi	r30, 0x30	; 48
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	88 2f       	mov	r24, r24
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	a9 01       	movw	r20, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <GPIO_readPin+0x10e>
    1586:	55 95       	asr	r21
    1588:	47 95       	ror	r20
    158a:	8a 95       	dec	r24
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <GPIO_readPin+0x10a>
    158e:	ca 01       	movw	r24, r20
    1590:	81 70       	andi	r24, 0x01	; 1
    1592:	90 70       	andi	r25, 0x00	; 0
    1594:	88 23       	and	r24, r24
    1596:	19 f0       	breq	.+6      	; 0x159e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	01 c0       	rjmp	.+2      	; 0x15a0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    159e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <GPIO_setupPortDirection+0x6>
    15b8:	00 d0       	rcall	.+0      	; 0x15ba <GPIO_setupPortDirection+0x8>
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	84 30       	cpi	r24, 0x04	; 4
    15c6:	90 f5       	brcc	.+100    	; 0x162c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	3c 83       	std	Y+4, r19	; 0x04
    15d0:	2b 83       	std	Y+3, r18	; 0x03
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	81 30       	cpi	r24, 0x01	; 1
    15d8:	91 05       	cpc	r25, r1
    15da:	d1 f0       	breq	.+52     	; 0x1610 <GPIO_setupPortDirection+0x5e>
    15dc:	2b 81       	ldd	r18, Y+3	; 0x03
    15de:	3c 81       	ldd	r19, Y+4	; 0x04
    15e0:	22 30       	cpi	r18, 0x02	; 2
    15e2:	31 05       	cpc	r19, r1
    15e4:	2c f4       	brge	.+10     	; 0x15f0 <GPIO_setupPortDirection+0x3e>
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	61 f0       	breq	.+24     	; 0x1606 <GPIO_setupPortDirection+0x54>
    15ee:	1e c0       	rjmp	.+60     	; 0x162c <GPIO_setupPortDirection+0x7a>
    15f0:	2b 81       	ldd	r18, Y+3	; 0x03
    15f2:	3c 81       	ldd	r19, Y+4	; 0x04
    15f4:	22 30       	cpi	r18, 0x02	; 2
    15f6:	31 05       	cpc	r19, r1
    15f8:	81 f0       	breq	.+32     	; 0x161a <GPIO_setupPortDirection+0x68>
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	83 30       	cpi	r24, 0x03	; 3
    1600:	91 05       	cpc	r25, r1
    1602:	81 f0       	breq	.+32     	; 0x1624 <GPIO_setupPortDirection+0x72>
    1604:	13 c0       	rjmp	.+38     	; 0x162c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1606:	ea e3       	ldi	r30, 0x3A	; 58
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	80 83       	st	Z, r24
    160e:	0e c0       	rjmp	.+28     	; 0x162c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1610:	e7 e3       	ldi	r30, 0x37	; 55
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	80 83       	st	Z, r24
    1618:	09 c0       	rjmp	.+18     	; 0x162c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    161a:	e4 e3       	ldi	r30, 0x34	; 52
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	80 83       	st	Z, r24
    1622:	04 c0       	rjmp	.+8      	; 0x162c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1624:	e1 e3       	ldi	r30, 0x31	; 49
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	80 83       	st	Z, r24
			break;
		}
	}
}
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	00 d0       	rcall	.+0      	; 0x1640 <GPIO_writePort+0x6>
    1640:	00 d0       	rcall	.+0      	; 0x1642 <GPIO_writePort+0x8>
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	89 83       	std	Y+1, r24	; 0x01
    1648:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	84 30       	cpi	r24, 0x04	; 4
    164e:	90 f5       	brcc	.+100    	; 0x16b4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	3c 83       	std	Y+4, r19	; 0x04
    1658:	2b 83       	std	Y+3, r18	; 0x03
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	9c 81       	ldd	r25, Y+4	; 0x04
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	91 05       	cpc	r25, r1
    1662:	d1 f0       	breq	.+52     	; 0x1698 <GPIO_writePort+0x5e>
    1664:	2b 81       	ldd	r18, Y+3	; 0x03
    1666:	3c 81       	ldd	r19, Y+4	; 0x04
    1668:	22 30       	cpi	r18, 0x02	; 2
    166a:	31 05       	cpc	r19, r1
    166c:	2c f4       	brge	.+10     	; 0x1678 <GPIO_writePort+0x3e>
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	9c 81       	ldd	r25, Y+4	; 0x04
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	61 f0       	breq	.+24     	; 0x168e <GPIO_writePort+0x54>
    1676:	1e c0       	rjmp	.+60     	; 0x16b4 <GPIO_writePort+0x7a>
    1678:	2b 81       	ldd	r18, Y+3	; 0x03
    167a:	3c 81       	ldd	r19, Y+4	; 0x04
    167c:	22 30       	cpi	r18, 0x02	; 2
    167e:	31 05       	cpc	r19, r1
    1680:	81 f0       	breq	.+32     	; 0x16a2 <GPIO_writePort+0x68>
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	9c 81       	ldd	r25, Y+4	; 0x04
    1686:	83 30       	cpi	r24, 0x03	; 3
    1688:	91 05       	cpc	r25, r1
    168a:	81 f0       	breq	.+32     	; 0x16ac <GPIO_writePort+0x72>
    168c:	13 c0       	rjmp	.+38     	; 0x16b4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    168e:	eb e3       	ldi	r30, 0x3B	; 59
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	80 83       	st	Z, r24
    1696:	0e c0       	rjmp	.+28     	; 0x16b4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1698:	e8 e3       	ldi	r30, 0x38	; 56
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	80 83       	st	Z, r24
    16a0:	09 c0       	rjmp	.+18     	; 0x16b4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    16a2:	e5 e3       	ldi	r30, 0x35	; 53
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	80 83       	st	Z, r24
    16aa:	04 c0       	rjmp	.+8      	; 0x16b4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    16ac:	e2 e3       	ldi	r30, 0x32	; 50
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	80 83       	st	Z, r24
			break;
		}
	}
}
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <GPIO_readPort+0x6>
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <GPIO_readPort+0x8>
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    16d0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	84 30       	cpi	r24, 0x04	; 4
    16d6:	90 f5       	brcc	.+100    	; 0x173c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	3c 83       	std	Y+4, r19	; 0x04
    16e0:	2b 83       	std	Y+3, r18	; 0x03
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	9c 81       	ldd	r25, Y+4	; 0x04
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	91 05       	cpc	r25, r1
    16ea:	d1 f0       	breq	.+52     	; 0x1720 <GPIO_readPort+0x5e>
    16ec:	2b 81       	ldd	r18, Y+3	; 0x03
    16ee:	3c 81       	ldd	r19, Y+4	; 0x04
    16f0:	22 30       	cpi	r18, 0x02	; 2
    16f2:	31 05       	cpc	r19, r1
    16f4:	2c f4       	brge	.+10     	; 0x1700 <GPIO_readPort+0x3e>
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	9c 81       	ldd	r25, Y+4	; 0x04
    16fa:	00 97       	sbiw	r24, 0x00	; 0
    16fc:	61 f0       	breq	.+24     	; 0x1716 <GPIO_readPort+0x54>
    16fe:	1e c0       	rjmp	.+60     	; 0x173c <GPIO_readPort+0x7a>
    1700:	2b 81       	ldd	r18, Y+3	; 0x03
    1702:	3c 81       	ldd	r19, Y+4	; 0x04
    1704:	22 30       	cpi	r18, 0x02	; 2
    1706:	31 05       	cpc	r19, r1
    1708:	81 f0       	breq	.+32     	; 0x172a <GPIO_readPort+0x68>
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	9c 81       	ldd	r25, Y+4	; 0x04
    170e:	83 30       	cpi	r24, 0x03	; 3
    1710:	91 05       	cpc	r25, r1
    1712:	81 f0       	breq	.+32     	; 0x1734 <GPIO_readPort+0x72>
    1714:	13 c0       	rjmp	.+38     	; 0x173c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1716:	e9 e3       	ldi	r30, 0x39	; 57
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	89 83       	std	Y+1, r24	; 0x01
    171e:	0e c0       	rjmp	.+28     	; 0x173c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1720:	e6 e3       	ldi	r30, 0x36	; 54
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	89 83       	std	Y+1, r24	; 0x01
    1728:	09 c0       	rjmp	.+18     	; 0x173c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    172a:	e3 e3       	ldi	r30, 0x33	; 51
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	04 c0       	rjmp	.+8      	; 0x173c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1734:	e0 e3       	ldi	r30, 0x30	; 48
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    173c:	89 81       	ldd	r24, Y+1	; 0x01
}
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <PIR_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

/* initializes the PIR sensor pin direction */
void PIR_init(void) {
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    GPIO_setupPinDirection(PIR_SENSOR_PORT, PIR_SENSOR_PIN, PIN_INPUT);
    1754:	82 e0       	ldi	r24, 0x02	; 2
    1756:	62 e0       	ldi	r22, 0x02	; 2
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	0e 94 68 08 	call	0x10d0	; 0x10d0 <GPIO_setupPinDirection>
}
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <PIR_getValue>:

/* get PIR sensor value and returns it */
/* 1 -> there is someone, 0->no one detected */
uint8 PIR_getValue(void) {
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    return GPIO_readPin(PIR_SENSOR_PORT, PIR_SENSOR_PIN);
    176c:	82 e0       	ldi	r24, 0x02	; 2
    176e:	62 e0       	ldi	r22, 0x02	; 2
    1770:	0e 94 3e 0a 	call	0x147c	; 0x147c <GPIO_readPin>
}
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <PWM_Timer0_Start>:
#include "common_macros.h" /* To use the macros like SET_BIT */
#include "avr/io.h"
#include "gpio.h"

void PWM_Timer0_Start(uint8 duty_cycle)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	0f 92       	push	r0
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; //Set Timer Initial value
    1786:	e2 e5       	ldi	r30, 0x52	; 82
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	10 82       	st	Z, r1
	OCR0 = (uint8)(((uint16) duty_cycle * 255) / 100);
    178c:	ec e5       	ldi	r30, 0x5C	; 92
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	48 2f       	mov	r20, r24
    1794:	50 e0       	ldi	r21, 0x00	; 0
    1796:	ca 01       	movw	r24, r20
    1798:	9c 01       	movw	r18, r24
    179a:	22 0f       	add	r18, r18
    179c:	33 1f       	adc	r19, r19
    179e:	c9 01       	movw	r24, r18
    17a0:	96 95       	lsr	r25
    17a2:	98 2f       	mov	r25, r24
    17a4:	88 27       	eor	r24, r24
    17a6:	97 95       	ror	r25
    17a8:	87 95       	ror	r24
    17aa:	82 1b       	sub	r24, r18
    17ac:	93 0b       	sbc	r25, r19
    17ae:	84 0f       	add	r24, r20
    17b0:	95 1f       	adc	r25, r21
    17b2:	24 e6       	ldi	r18, 0x64	; 100
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	b9 01       	movw	r22, r18
    17b8:	0e 94 a1 11 	call	0x2342	; 0x2342 <__udivmodhi4>
    17bc:	cb 01       	movw	r24, r22
    17be:	80 83       	st	Z, r24
        //set PB3/OC0 as output pin
	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	63 e0       	ldi	r22, 0x03	; 3
    17c4:	41 e0       	ldi	r20, 0x01	; 1
    17c6:	0e 94 68 08 	call	0x10d0	; 0x10d0 <GPIO_setupPinDirection>
		 * 1. Fast PWM mode FOC0=0
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
		 * 4. clock = F_CPU/1024 CS00=0 CS01=1 CS02=0
		 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00)| (1<<CS02);
    17ca:	e3 e5       	ldi	r30, 0x53	; 83
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	8d e6       	ldi	r24, 0x6D	; 109
    17d0:	80 83       	st	Z, r24
}
    17d2:	0f 90       	pop	r0
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <__vector_11>:
/*********************************
 *Interrupt Service Routines
 **********************************/

ISR(TIMER0_OVF_vect)
{
    17da:	1f 92       	push	r1
    17dc:	0f 92       	push	r0
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	0f 92       	push	r0
    17e2:	11 24       	eor	r1, r1
    17e4:	2f 93       	push	r18
    17e6:	3f 93       	push	r19
    17e8:	4f 93       	push	r20
    17ea:	5f 93       	push	r21
    17ec:	6f 93       	push	r22
    17ee:	7f 93       	push	r23
    17f0:	8f 93       	push	r24
    17f2:	9f 93       	push	r25
    17f4:	af 93       	push	r26
    17f6:	bf 93       	push	r27
    17f8:	ef 93       	push	r30
    17fa:	ff 93       	push	r31
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
	if(timer0_getcallBackPtr != NULL_PTR)
    1804:	80 91 83 00 	lds	r24, 0x0083
    1808:	90 91 84 00 	lds	r25, 0x0084
    180c:	00 97       	sbiw	r24, 0x00	; 0
    180e:	29 f0       	breq	.+10     	; 0x181a <__vector_11+0x40>
	{
		/* Call the Call Back function in the application*/
		(*timer0_getcallBackPtr)();
    1810:	e0 91 83 00 	lds	r30, 0x0083
    1814:	f0 91 84 00 	lds	r31, 0x0084
    1818:	09 95       	icall
	}
}
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	ff 91       	pop	r31
    1820:	ef 91       	pop	r30
    1822:	bf 91       	pop	r27
    1824:	af 91       	pop	r26
    1826:	9f 91       	pop	r25
    1828:	8f 91       	pop	r24
    182a:	7f 91       	pop	r23
    182c:	6f 91       	pop	r22
    182e:	5f 91       	pop	r21
    1830:	4f 91       	pop	r20
    1832:	3f 91       	pop	r19
    1834:	2f 91       	pop	r18
    1836:	0f 90       	pop	r0
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	0f 90       	pop	r0
    183c:	1f 90       	pop	r1
    183e:	18 95       	reti

00001840 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1840:	1f 92       	push	r1
    1842:	0f 92       	push	r0
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	0f 92       	push	r0
    1848:	11 24       	eor	r1, r1
    184a:	2f 93       	push	r18
    184c:	3f 93       	push	r19
    184e:	4f 93       	push	r20
    1850:	5f 93       	push	r21
    1852:	6f 93       	push	r22
    1854:	7f 93       	push	r23
    1856:	8f 93       	push	r24
    1858:	9f 93       	push	r25
    185a:	af 93       	push	r26
    185c:	bf 93       	push	r27
    185e:	ef 93       	push	r30
    1860:	ff 93       	push	r31
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
	if(timer0_getcallBackPtr != NULL_PTR)
    186a:	80 91 83 00 	lds	r24, 0x0083
    186e:	90 91 84 00 	lds	r25, 0x0084
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	29 f0       	breq	.+10     	; 0x1880 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application*/
		(*timer0_getcallBackPtr)();
    1876:	e0 91 83 00 	lds	r30, 0x0083
    187a:	f0 91 84 00 	lds	r31, 0x0084
    187e:	09 95       	icall
	}
}
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	ff 91       	pop	r31
    1886:	ef 91       	pop	r30
    1888:	bf 91       	pop	r27
    188a:	af 91       	pop	r26
    188c:	9f 91       	pop	r25
    188e:	8f 91       	pop	r24
    1890:	7f 91       	pop	r23
    1892:	6f 91       	pop	r22
    1894:	5f 91       	pop	r21
    1896:	4f 91       	pop	r20
    1898:	3f 91       	pop	r19
    189a:	2f 91       	pop	r18
    189c:	0f 90       	pop	r0
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	0f 90       	pop	r0
    18a2:	1f 90       	pop	r1
    18a4:	18 95       	reti

000018a6 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    18a6:	1f 92       	push	r1
    18a8:	0f 92       	push	r0
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	0f 92       	push	r0
    18ae:	11 24       	eor	r1, r1
    18b0:	2f 93       	push	r18
    18b2:	3f 93       	push	r19
    18b4:	4f 93       	push	r20
    18b6:	5f 93       	push	r21
    18b8:	6f 93       	push	r22
    18ba:	7f 93       	push	r23
    18bc:	8f 93       	push	r24
    18be:	9f 93       	push	r25
    18c0:	af 93       	push	r26
    18c2:	bf 93       	push	r27
    18c4:	ef 93       	push	r30
    18c6:	ff 93       	push	r31
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
	if(timer1_getcallBackPtr != NULL_PTR)
    18d0:	80 91 85 00 	lds	r24, 0x0085
    18d4:	90 91 86 00 	lds	r25, 0x0086
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	29 f0       	breq	.+10     	; 0x18e6 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application*/
		(*timer1_getcallBackPtr)();
    18dc:	e0 91 85 00 	lds	r30, 0x0085
    18e0:	f0 91 86 00 	lds	r31, 0x0086
    18e4:	09 95       	icall
	}
}
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	ff 91       	pop	r31
    18ec:	ef 91       	pop	r30
    18ee:	bf 91       	pop	r27
    18f0:	af 91       	pop	r26
    18f2:	9f 91       	pop	r25
    18f4:	8f 91       	pop	r24
    18f6:	7f 91       	pop	r23
    18f8:	6f 91       	pop	r22
    18fa:	5f 91       	pop	r21
    18fc:	4f 91       	pop	r20
    18fe:	3f 91       	pop	r19
    1900:	2f 91       	pop	r18
    1902:	0f 90       	pop	r0
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	0f 90       	pop	r0
    1908:	1f 90       	pop	r1
    190a:	18 95       	reti

0000190c <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    190c:	1f 92       	push	r1
    190e:	0f 92       	push	r0
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	0f 92       	push	r0
    1914:	11 24       	eor	r1, r1
    1916:	2f 93       	push	r18
    1918:	3f 93       	push	r19
    191a:	4f 93       	push	r20
    191c:	5f 93       	push	r21
    191e:	6f 93       	push	r22
    1920:	7f 93       	push	r23
    1922:	8f 93       	push	r24
    1924:	9f 93       	push	r25
    1926:	af 93       	push	r26
    1928:	bf 93       	push	r27
    192a:	ef 93       	push	r30
    192c:	ff 93       	push	r31
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
	if(timer1_getcallBackPtr != NULL_PTR)
    1936:	80 91 85 00 	lds	r24, 0x0085
    193a:	90 91 86 00 	lds	r25, 0x0086
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	29 f0       	breq	.+10     	; 0x194c <__vector_7+0x40>
	{
		/* Call the Call Back function in the application*/
		(*timer1_getcallBackPtr)();
    1942:	e0 91 85 00 	lds	r30, 0x0085
    1946:	f0 91 86 00 	lds	r31, 0x0086
    194a:	09 95       	icall
	}
}
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	ff 91       	pop	r31
    1952:	ef 91       	pop	r30
    1954:	bf 91       	pop	r27
    1956:	af 91       	pop	r26
    1958:	9f 91       	pop	r25
    195a:	8f 91       	pop	r24
    195c:	7f 91       	pop	r23
    195e:	6f 91       	pop	r22
    1960:	5f 91       	pop	r21
    1962:	4f 91       	pop	r20
    1964:	3f 91       	pop	r19
    1966:	2f 91       	pop	r18
    1968:	0f 90       	pop	r0
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	0f 90       	pop	r0
    196e:	1f 90       	pop	r1
    1970:	18 95       	reti

00001972 <__vector_5>:


ISR(TIMER2_OVF_vect)
{
    1972:	1f 92       	push	r1
    1974:	0f 92       	push	r0
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	0f 92       	push	r0
    197a:	11 24       	eor	r1, r1
    197c:	2f 93       	push	r18
    197e:	3f 93       	push	r19
    1980:	4f 93       	push	r20
    1982:	5f 93       	push	r21
    1984:	6f 93       	push	r22
    1986:	7f 93       	push	r23
    1988:	8f 93       	push	r24
    198a:	9f 93       	push	r25
    198c:	af 93       	push	r26
    198e:	bf 93       	push	r27
    1990:	ef 93       	push	r30
    1992:	ff 93       	push	r31
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
	if(timer2_getcallBackPtr != NULL_PTR)
    199c:	80 91 87 00 	lds	r24, 0x0087
    19a0:	90 91 88 00 	lds	r25, 0x0088
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	29 f0       	breq	.+10     	; 0x19b2 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application*/
		(*timer2_getcallBackPtr)();
    19a8:	e0 91 87 00 	lds	r30, 0x0087
    19ac:	f0 91 88 00 	lds	r31, 0x0088
    19b0:	09 95       	icall
	}
}
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	ff 91       	pop	r31
    19b8:	ef 91       	pop	r30
    19ba:	bf 91       	pop	r27
    19bc:	af 91       	pop	r26
    19be:	9f 91       	pop	r25
    19c0:	8f 91       	pop	r24
    19c2:	7f 91       	pop	r23
    19c4:	6f 91       	pop	r22
    19c6:	5f 91       	pop	r21
    19c8:	4f 91       	pop	r20
    19ca:	3f 91       	pop	r19
    19cc:	2f 91       	pop	r18
    19ce:	0f 90       	pop	r0
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	0f 90       	pop	r0
    19d4:	1f 90       	pop	r1
    19d6:	18 95       	reti

000019d8 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    19d8:	1f 92       	push	r1
    19da:	0f 92       	push	r0
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	0f 92       	push	r0
    19e0:	11 24       	eor	r1, r1
    19e2:	2f 93       	push	r18
    19e4:	3f 93       	push	r19
    19e6:	4f 93       	push	r20
    19e8:	5f 93       	push	r21
    19ea:	6f 93       	push	r22
    19ec:	7f 93       	push	r23
    19ee:	8f 93       	push	r24
    19f0:	9f 93       	push	r25
    19f2:	af 93       	push	r26
    19f4:	bf 93       	push	r27
    19f6:	ef 93       	push	r30
    19f8:	ff 93       	push	r31
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
	if(timer2_getcallBackPtr != NULL_PTR)
    1a02:	80 91 87 00 	lds	r24, 0x0087
    1a06:	90 91 88 00 	lds	r25, 0x0088
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	29 f0       	breq	.+10     	; 0x1a18 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application*/
		(*timer2_getcallBackPtr)();
    1a0e:	e0 91 87 00 	lds	r30, 0x0087
    1a12:	f0 91 88 00 	lds	r31, 0x0088
    1a16:	09 95       	icall
	}
}
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	ff 91       	pop	r31
    1a1e:	ef 91       	pop	r30
    1a20:	bf 91       	pop	r27
    1a22:	af 91       	pop	r26
    1a24:	9f 91       	pop	r25
    1a26:	8f 91       	pop	r24
    1a28:	7f 91       	pop	r23
    1a2a:	6f 91       	pop	r22
    1a2c:	5f 91       	pop	r21
    1a2e:	4f 91       	pop	r20
    1a30:	3f 91       	pop	r19
    1a32:	2f 91       	pop	r18
    1a34:	0f 90       	pop	r0
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	0f 90       	pop	r0
    1a3a:	1f 90       	pop	r1
    1a3c:	18 95       	reti

00001a3e <TIMER_init>:
/*********************************
 *           Functions
 **********************************/
void TIMER_init(const Timer_ConfigType * Config_Ptr) {
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	00 d0       	rcall	.+0      	; 0x1a44 <TIMER_init+0x6>
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <TIMER_init+0x8>
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	9a 83       	std	Y+2, r25	; 0x02
    1a4c:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->timer_ID) {
    1a4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a50:	fa 81       	ldd	r31, Y+2	; 0x02
    1a52:	84 81       	ldd	r24, Z+4	; 0x04
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	3c 83       	std	Y+4, r19	; 0x04
    1a5a:	2b 83       	std	Y+3, r18	; 0x03
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a60:	81 30       	cpi	r24, 0x01	; 1
    1a62:	91 05       	cpc	r25, r1
    1a64:	71 f0       	breq	.+28     	; 0x1a82 <TIMER_init+0x44>
    1a66:	2b 81       	ldd	r18, Y+3	; 0x03
    1a68:	3c 81       	ldd	r19, Y+4	; 0x04
    1a6a:	22 30       	cpi	r18, 0x02	; 2
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	71 f0       	breq	.+28     	; 0x1a8c <TIMER_init+0x4e>
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	9c 81       	ldd	r25, Y+4	; 0x04
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	71 f4       	brne	.+28     	; 0x1a94 <TIMER_init+0x56>
	case TIMER0:
		Timer0_init(Config_Ptr);
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
    1a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7c:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <Timer0_init>
    1a80:	09 c0       	rjmp	.+18     	; 0x1a94 <TIMER_init+0x56>
		break;
	case TIMER1:
		Timer1_init(Config_Ptr);
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	9a 81       	ldd	r25, Y+2	; 0x02
    1a86:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <Timer1_init>
    1a8a:	04 c0       	rjmp	.+8      	; 0x1a94 <TIMER_init+0x56>
		break;
	case TIMER2:
		Timer2_init(Config_Ptr);
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a90:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <Timer2_init>
		break;
	}
}
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	cf 91       	pop	r28
    1a9e:	df 91       	pop	r29
    1aa0:	08 95       	ret

00001aa2 <Timer_deInit>:
void Timer_deInit(Timer_ID_Type timer_type) {
    1aa2:	df 93       	push	r29
    1aa4:	cf 93       	push	r28
    1aa6:	00 d0       	rcall	.+0      	; 0x1aa8 <Timer_deInit+0x6>
    1aa8:	0f 92       	push	r0
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	89 83       	std	Y+1, r24	; 0x01
	switch (timer_type) {
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	3b 83       	std	Y+3, r19	; 0x03
    1ab8:	2a 83       	std	Y+2, r18	; 0x02
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	9b 81       	ldd	r25, Y+3	; 0x03
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	91 05       	cpc	r25, r1
    1ac2:	61 f0       	breq	.+24     	; 0x1adc <Timer_deInit+0x3a>
    1ac4:	2a 81       	ldd	r18, Y+2	; 0x02
    1ac6:	3b 81       	ldd	r19, Y+3	; 0x03
    1ac8:	22 30       	cpi	r18, 0x02	; 2
    1aca:	31 05       	cpc	r19, r1
    1acc:	51 f0       	breq	.+20     	; 0x1ae2 <Timer_deInit+0x40>
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	41 f4       	brne	.+16     	; 0x1ae6 <Timer_deInit+0x44>
	case TIMER0:
		Timer0_deInit();
    1ad6:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <Timer0_deInit>
    1ada:	05 c0       	rjmp	.+10     	; 0x1ae6 <Timer_deInit+0x44>
		break;
	case TIMER1:
		Timer1_deInit();
    1adc:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <Timer1_deInit>
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <Timer_deInit+0x44>
		break;
	case TIMER2:
		Timer2_deInit();
    1ae2:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <Timer2_deInit>
		break;
	}
}
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <Timer_setCallBack>:
void Timer_setCallBack(void (*ptr)(void), Timer_ID_Type timer_ID) {
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <Timer_setCallBack+0x6>
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <Timer_setCallBack+0x8>
    1afa:	0f 92       	push	r0
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	9a 83       	std	Y+2, r25	; 0x02
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	6b 83       	std	Y+3, r22	; 0x03
	switch (timer_ID) {
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	3d 83       	std	Y+5, r19	; 0x05
    1b0e:	2c 83       	std	Y+4, r18	; 0x04
    1b10:	8c 81       	ldd	r24, Y+4	; 0x04
    1b12:	9d 81       	ldd	r25, Y+5	; 0x05
    1b14:	81 30       	cpi	r24, 0x01	; 1
    1b16:	91 05       	cpc	r25, r1
    1b18:	81 f0       	breq	.+32     	; 0x1b3a <Timer_setCallBack+0x48>
    1b1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1e:	22 30       	cpi	r18, 0x02	; 2
    1b20:	31 05       	cpc	r19, r1
    1b22:	91 f0       	breq	.+36     	; 0x1b48 <Timer_setCallBack+0x56>
    1b24:	8c 81       	ldd	r24, Y+4	; 0x04
    1b26:	9d 81       	ldd	r25, Y+5	; 0x05
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	a1 f4       	brne	.+40     	; 0x1b54 <Timer_setCallBack+0x62>
	case TIMER0:
		timer0_getcallBackPtr=ptr;
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b30:	90 93 84 00 	sts	0x0084, r25
    1b34:	80 93 83 00 	sts	0x0083, r24
    1b38:	0d c0       	rjmp	.+26     	; 0x1b54 <Timer_setCallBack+0x62>
		break;
	case TIMER1:
		timer1_getcallBackPtr=ptr;
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3e:	90 93 86 00 	sts	0x0086, r25
    1b42:	80 93 85 00 	sts	0x0085, r24
    1b46:	06 c0       	rjmp	.+12     	; 0x1b54 <Timer_setCallBack+0x62>
		break;
	case TIMER2:
		timer2_getcallBackPtr=ptr;
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4c:	90 93 88 00 	sts	0x0088, r25
    1b50:	80 93 87 00 	sts	0x0087, r24
		break;
	}
}
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	08 95       	ret

00001b64 <Timer0_init>:

static void Timer0_init(const Timer_ConfigType *Config_Ptr)
{
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	00 d0       	rcall	.+0      	; 0x1b6a <Timer0_init+0x6>
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	9a 83       	std	Y+2, r25	; 0x02
    1b70:	89 83       	std	Y+1, r24	; 0x01
	/* non PWM Mode */
	TCCR0 = (1<<FOC0);
    1b72:	e3 e5       	ldi	r30, 0x53	; 83
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 e8       	ldi	r24, 0x80	; 128
    1b78:	80 83       	st	Z, r24
	/*set initial value */
	TCNT0 = Config_Ptr->timer_InitialValue;
    1b7a:	a2 e5       	ldi	r26, 0x52	; 82
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b80:	fa 81       	ldd	r31, Y+2	; 0x02
    1b82:	80 81       	ld	r24, Z
    1b84:	91 81       	ldd	r25, Z+1	; 0x01
    1b86:	8c 93       	st	X, r24
	/* Set the prescaler*/
	TCCR0 = (TCCR0 & 0XF8) | (Config_Ptr->timer_clock & 0X07);
    1b88:	a3 e5       	ldi	r26, 0x53	; 83
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e3 e5       	ldi	r30, 0x53	; 83
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	98 2f       	mov	r25, r24
    1b94:	98 7f       	andi	r25, 0xF8	; 248
    1b96:	e9 81       	ldd	r30, Y+1	; 0x01
    1b98:	fa 81       	ldd	r31, Y+2	; 0x02
    1b9a:	85 81       	ldd	r24, Z+5	; 0x05
    1b9c:	87 70       	andi	r24, 0x07	; 7
    1b9e:	89 2b       	or	r24, r25
    1ba0:	8c 93       	st	X, r24

	if((Config_Ptr->timer_mode) == NORMAL_MODE){
    1ba2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba6:	86 81       	ldd	r24, Z+6	; 0x06
    1ba8:	88 23       	and	r24, r24
    1baa:	41 f4       	brne	.+16     	; 0x1bbc <Timer0_init+0x58>
		/* Enable Timer0 overflow interrupt */
		TIMSK |= (1 << TOIE0);
    1bac:	a9 e5       	ldi	r26, 0x59	; 89
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	e9 e5       	ldi	r30, 0x59	; 89
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	81 60       	ori	r24, 0x01	; 1
    1bb8:	8c 93       	st	X, r24
    1bba:	13 c0       	rjmp	.+38     	; 0x1be2 <Timer0_init+0x7e>
	}
	else if ( (Config_Ptr -> timer_mode) == CTC_MODE){
    1bbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc0:	86 81       	ldd	r24, Z+6	; 0x06
    1bc2:	81 30       	cpi	r24, 0x01	; 1
    1bc4:	71 f4       	brne	.+28     	; 0x1be2 <Timer0_init+0x7e>
		/*set compare value for compare mode*/
		OCR0 = Config_Ptr->timer_compare_MatchValue;
    1bc6:	ac e5       	ldi	r26, 0x5C	; 92
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e9 81       	ldd	r30, Y+1	; 0x01
    1bcc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bce:	82 81       	ldd	r24, Z+2	; 0x02
    1bd0:	93 81       	ldd	r25, Z+3	; 0x03
    1bd2:	8c 93       	st	X, r24
		/* Enable Timer0 compare interrupt */
		TIMSK |= (1 << OCIE0);
    1bd4:	a9 e5       	ldi	r26, 0x59	; 89
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	e9 e5       	ldi	r30, 0x59	; 89
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	82 60       	ori	r24, 0x02	; 2
    1be0:	8c 93       	st	X, r24
	}
}
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	cf 91       	pop	r28
    1be8:	df 91       	pop	r29
    1bea:	08 95       	ret

00001bec <Timer1_init>:

static void Timer1_init(const Timer_ConfigType *Config_Ptr)
{
    1bec:	df 93       	push	r29
    1bee:	cf 93       	push	r28
    1bf0:	00 d0       	rcall	.+0      	; 0x1bf2 <Timer1_init+0x6>
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
    1bf6:	9a 83       	std	Y+2, r25	; 0x02
    1bf8:	89 83       	std	Y+1, r24	; 0x01
	/*  Non PWM Mode */
	TCCR1A = (1 << FOC1A) | (1 << FOC1B) ;
    1bfa:	ef e4       	ldi	r30, 0x4F	; 79
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	8c e0       	ldi	r24, 0x0C	; 12
    1c00:	80 83       	st	Z, r24
	/*set the initial value*/
	TCNT1 = ( (Config_Ptr -> timer_InitialValue) );
    1c02:	ac e4       	ldi	r26, 0x4C	; 76
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e9 81       	ldd	r30, Y+1	; 0x01
    1c08:	fa 81       	ldd	r31, Y+2	; 0x02
    1c0a:	80 81       	ld	r24, Z
    1c0c:	91 81       	ldd	r25, Z+1	; 0x01
    1c0e:	11 96       	adiw	r26, 0x01	; 1
    1c10:	9c 93       	st	X, r25
    1c12:	8e 93       	st	-X, r24
	/*add WGM10 and WGM11 of TCCR1A Register and WGM12 and WGM13 TCCR1B Register*/
	if (Config_Ptr->timer_mode == NORMAL_MODE) {
    1c14:	e9 81       	ldd	r30, Y+1	; 0x01
    1c16:	fa 81       	ldd	r31, Y+2	; 0x02
    1c18:	86 81       	ldd	r24, Z+6	; 0x06
    1c1a:	88 23       	and	r24, r24
    1c1c:	79 f4       	brne	.+30     	; 0x1c3c <Timer1_init+0x50>
		TCCR1A&= ~(1<<WGM10) & ~(1<<WGM11) & ~(1<<WGM12)& ~(1<<WGM13);
    1c1e:	af e4       	ldi	r26, 0x4F	; 79
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	ef e4       	ldi	r30, 0x4F	; 79
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	84 7e       	andi	r24, 0xE4	; 228
    1c2a:	8c 93       	st	X, r24
		TCCR1B&= ~(1<<WGM12)& ~(1<<WGM13);
    1c2c:	ae e4       	ldi	r26, 0x4E	; 78
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	ee e4       	ldi	r30, 0x4E	; 78
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	87 7e       	andi	r24, 0xE7	; 231
    1c38:	8c 93       	st	X, r24
    1c3a:	1a c0       	rjmp	.+52     	; 0x1c70 <Timer1_init+0x84>
	} else if (Config_Ptr->timer_mode == CTC_MODE) {
    1c3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c40:	86 81       	ldd	r24, Z+6	; 0x06
    1c42:	81 30       	cpi	r24, 0x01	; 1
    1c44:	a9 f4       	brne	.+42     	; 0x1c70 <Timer1_init+0x84>
		TCCR1A&= ~(1<<WGM10) & ~(1<<WGM11);
    1c46:	af e4       	ldi	r26, 0x4F	; 79
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	ef e4       	ldi	r30, 0x4F	; 79
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	8c 7f       	andi	r24, 0xFC	; 252
    1c52:	8c 93       	st	X, r24
		TCCR1B&=~(1<<WGM13);
    1c54:	ae e4       	ldi	r26, 0x4E	; 78
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	ee e4       	ldi	r30, 0x4E	; 78
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	8f 7e       	andi	r24, 0xEF	; 239
    1c60:	8c 93       	st	X, r24
		TCCR1B|=(1<<WGM12);
    1c62:	ae e4       	ldi	r26, 0x4E	; 78
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	ee e4       	ldi	r30, 0x4E	; 78
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	88 60       	ori	r24, 0x08	; 8
    1c6e:	8c 93       	st	X, r24
	}
	/*set pre scaler*/
	TCCR1B = (TCCR1B&0xF8) | (Config_Ptr->timer_clock);
    1c70:	ae e4       	ldi	r26, 0x4E	; 78
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	ee e4       	ldi	r30, 0x4E	; 78
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	98 2f       	mov	r25, r24
    1c7c:	98 7f       	andi	r25, 0xF8	; 248
    1c7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c80:	fa 81       	ldd	r31, Y+2	; 0x02
    1c82:	85 81       	ldd	r24, Z+5	; 0x05
    1c84:	89 2b       	or	r24, r25
    1c86:	8c 93       	st	X, r24
	if( (Config_Ptr->timer_mode ) == NORMAL_MODE)
    1c88:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c8c:	86 81       	ldd	r24, Z+6	; 0x06
    1c8e:	88 23       	and	r24, r24
    1c90:	41 f4       	brne	.+16     	; 0x1ca2 <Timer1_init+0xb6>
	{
		/* Enable interrupt FOR normal mode */
		TIMSK |= (1 << TOIE1);
    1c92:	a9 e5       	ldi	r26, 0x59	; 89
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e9 e5       	ldi	r30, 0x59	; 89
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	84 60       	ori	r24, 0x04	; 4
    1c9e:	8c 93       	st	X, r24
    1ca0:	15 c0       	rjmp	.+42     	; 0x1ccc <Timer1_init+0xe0>
	}
	else if ((Config_Ptr->timer_mode) == CTC_MODE)
    1ca2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca6:	86 81       	ldd	r24, Z+6	; 0x06
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	81 f4       	brne	.+32     	; 0x1ccc <Timer1_init+0xe0>
	{
		/*set compare value for compare mode channel A*/
		OCR1A  = ((Config_Ptr->timer_compare_MatchValue));
    1cac:	aa e4       	ldi	r26, 0x4A	; 74
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb4:	82 81       	ldd	r24, Z+2	; 0x02
    1cb6:	93 81       	ldd	r25, Z+3	; 0x03
    1cb8:	11 96       	adiw	r26, 0x01	; 1
    1cba:	9c 93       	st	X, r25
    1cbc:	8e 93       	st	-X, r24
		/* Enable interrupt for compare mode channel A */
		TIMSK |= (1 << OCIE1A);
    1cbe:	a9 e5       	ldi	r26, 0x59	; 89
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	e9 e5       	ldi	r30, 0x59	; 89
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	80 61       	ori	r24, 0x10	; 16
    1cca:	8c 93       	st	X, r24
	}
}
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <Timer2_init>:

static void Timer2_init(const Timer_ConfigType *Config_Ptr)
{
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	00 d0       	rcall	.+0      	; 0x1cdc <Timer2_init+0x6>
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	9a 83       	std	Y+2, r25	; 0x02
    1ce2:	89 83       	std	Y+1, r24	; 0x01
	/*set the initail value of the timer*/
	TCNT2 = Config_Ptr->timer_InitialValue;
    1ce4:	a4 e4       	ldi	r26, 0x44	; 68
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cea:	fa 81       	ldd	r31, Y+2	; 0x02
    1cec:	80 81       	ld	r24, Z
    1cee:	91 81       	ldd	r25, Z+1	; 0x01
    1cf0:	8c 93       	st	X, r24
	/*non PWM mode*/
	TCCR2 = (1<<FOC2);
    1cf2:	e5 e4       	ldi	r30, 0x45	; 69
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 e8       	ldi	r24, 0x80	; 128
    1cf8:	80 83       	st	Z, r24
	/* choose the timer clock (F_CPU / prescaler)*/
	TCCR2 = (TCCR2 & 0XF8) | (Config_Ptr->timer_clock & 0X07);
    1cfa:	a5 e4       	ldi	r26, 0x45	; 69
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	e5 e4       	ldi	r30, 0x45	; 69
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	98 2f       	mov	r25, r24
    1d06:	98 7f       	andi	r25, 0xF8	; 248
    1d08:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0c:	85 81       	ldd	r24, Z+5	; 0x05
    1d0e:	87 70       	andi	r24, 0x07	; 7
    1d10:	89 2b       	or	r24, r25
    1d12:	8c 93       	st	X, r24
	/* Check which timer mode is chosen */
	if( (Config_Ptr -> timer_mode ) == NORMAL_MODE) {
    1d14:	e9 81       	ldd	r30, Y+1	; 0x01
    1d16:	fa 81       	ldd	r31, Y+2	; 0x02
    1d18:	86 81       	ldd	r24, Z+6	; 0x06
    1d1a:	88 23       	and	r24, r24
    1d1c:	79 f4       	brne	.+30     	; 0x1d3c <Timer2_init+0x66>
		TCCR2&= ~(1<<WGM20) & ~(1<<WGM21);
    1d1e:	a5 e4       	ldi	r26, 0x45	; 69
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e5 e4       	ldi	r30, 0x45	; 69
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	87 7b       	andi	r24, 0xB7	; 183
    1d2a:	8c 93       	st	X, r24
		/*	Enable interrupt for normal mode */
		TIMSK |= (1 << TOIE2);
    1d2c:	a9 e5       	ldi	r26, 0x59	; 89
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e9 e5       	ldi	r30, 0x59	; 89
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	80 64       	ori	r24, 0x40	; 64
    1d38:	8c 93       	st	X, r24
    1d3a:	21 c0       	rjmp	.+66     	; 0x1d7e <Timer2_init+0xa8>
	}
	else if ( (Config_Ptr -> timer_mode) == CTC_MODE){
    1d3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d40:	86 81       	ldd	r24, Z+6	; 0x06
    1d42:	81 30       	cpi	r24, 0x01	; 1
    1d44:	e1 f4       	brne	.+56     	; 0x1d7e <Timer2_init+0xa8>
		TCCR2&= ~(1<<WGM20);
    1d46:	a5 e4       	ldi	r26, 0x45	; 69
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e5 e4       	ldi	r30, 0x45	; 69
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	8f 7b       	andi	r24, 0xBF	; 191
    1d52:	8c 93       	st	X, r24
		TCCR2|=(1<<WGM21);
    1d54:	a5 e4       	ldi	r26, 0x45	; 69
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e5 e4       	ldi	r30, 0x45	; 69
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	88 60       	ori	r24, 0x08	; 8
    1d60:	8c 93       	st	X, r24
		/*set the compare value of the compare mode timer*/
		OCR2 = Config_Ptr->timer_compare_MatchValue;
    1d62:	a3 e4       	ldi	r26, 0x43	; 67
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	e9 81       	ldd	r30, Y+1	; 0x01
    1d68:	fa 81       	ldd	r31, Y+2	; 0x02
    1d6a:	82 81       	ldd	r24, Z+2	; 0x02
    1d6c:	93 81       	ldd	r25, Z+3	; 0x03
    1d6e:	8c 93       	st	X, r24
		/*	 Enable interrupt for compare mode */
		TIMSK |= (1 << OCIE2);
    1d70:	a9 e5       	ldi	r26, 0x59	; 89
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e9 e5       	ldi	r30, 0x59	; 89
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	80 68       	ori	r24, 0x80	; 128
    1d7c:	8c 93       	st	X, r24
	}
}
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	08 95       	ret

00001d88 <Timer0_deInit>:

static void Timer0_deInit()
{
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
	/* disable timer */
	TCCR0 = 0;
    1d90:	e3 e5       	ldi	r30, 0x53	; 83
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	10 82       	st	Z, r1
	/* clear timer */
	TCNT1=0;
    1d96:	ec e4       	ldi	r30, 0x4C	; 76
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	11 82       	std	Z+1, r1	; 0x01
    1d9c:	10 82       	st	Z, r1
	/*disable interrupt*/
	TIMSK&=~(1<<TOIE0);
    1d9e:	a9 e5       	ldi	r26, 0x59	; 89
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e9 e5       	ldi	r30, 0x59	; 89
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	8e 7f       	andi	r24, 0xFE	; 254
    1daa:	8c 93       	st	X, r24
	TIMSK&=~(1<<OCIE0);
    1dac:	a9 e5       	ldi	r26, 0x59	; 89
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e9 e5       	ldi	r30, 0x59	; 89
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	8d 7f       	andi	r24, 0xFD	; 253
    1db8:	8c 93       	st	X, r24
	/*remove get back function*/
	timer0_getcallBackPtr=NULL_PTR;
    1dba:	10 92 84 00 	sts	0x0084, r1
    1dbe:	10 92 83 00 	sts	0x0083, r1
}
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	08 95       	ret

00001dc8 <Timer1_deInit>:

static void Timer1_deInit(){
    1dc8:	df 93       	push	r29
    1dca:	cf 93       	push	r28
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
	/* disable timer */
	TCCR1A=0;
    1dd0:	ef e4       	ldi	r30, 0x4F	; 79
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	10 82       	st	Z, r1
	TCCR1B=0;
    1dd6:	ee e4       	ldi	r30, 0x4E	; 78
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	10 82       	st	Z, r1
	/* clear timer */
	TCNT1=0;
    1ddc:	ec e4       	ldi	r30, 0x4C	; 76
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	11 82       	std	Z+1, r1	; 0x01
    1de2:	10 82       	st	Z, r1
	OCR1A=0;
    1de4:	ea e4       	ldi	r30, 0x4A	; 74
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	11 82       	std	Z+1, r1	; 0x01
    1dea:	10 82       	st	Z, r1
	/*disable interrupt*/
	TIMSK&=~(1<<TOIE1) & ~(1<<OCIE1A);
    1dec:	a9 e5       	ldi	r26, 0x59	; 89
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e9 e5       	ldi	r30, 0x59	; 89
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	8b 7e       	andi	r24, 0xEB	; 235
    1df8:	8c 93       	st	X, r24
	/*remove get back function*/
	timer1_getcallBackPtr=NULL_PTR;
    1dfa:	10 92 86 00 	sts	0x0086, r1
    1dfe:	10 92 85 00 	sts	0x0085, r1
}
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	08 95       	ret

00001e08 <Timer2_deInit>:

static void Timer2_deInit(){
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
	/* disable timer */
	TCCR2=0;
    1e10:	e5 e4       	ldi	r30, 0x45	; 69
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	10 82       	st	Z, r1
	/* clear timer */
	TCNT2=0;
    1e16:	e4 e4       	ldi	r30, 0x44	; 68
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	10 82       	st	Z, r1
	OCR2=0;
    1e1c:	e3 e4       	ldi	r30, 0x43	; 67
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	10 82       	st	Z, r1
	/*disable interrupt*/
	TIMSK&=~(1<<TOIE2) & ~(1<<OCIE2);
    1e22:	a9 e5       	ldi	r26, 0x59	; 89
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e9 e5       	ldi	r30, 0x59	; 89
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	8f 73       	andi	r24, 0x3F	; 63
    1e2e:	8c 93       	st	X, r24
	/*remove get back function*/
	timer2_getcallBackPtr=NULL_PTR;
    1e30:	10 92 88 00 	sts	0x0088, r1
    1e34:	10 92 87 00 	sts	0x0087, r1

}
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <UART_init>:
 */

//UART_ConfigType uart_config = { UART_DATA_8_BITS,
			//UART_NO_PARITY, UART_ONE_STOP_BIT, 9600 };
void UART_init(const UART_ConfigType *Config_Ptr)
{
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <UART_init+0x6>
    1e44:	00 d0       	rcall	.+0      	; 0x1e46 <UART_init+0x8>
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	9c 83       	std	Y+4, r25	; 0x04
    1e4c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1e4e:	1a 82       	std	Y+2, r1	; 0x02
    1e50:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1e52:	eb e2       	ldi	r30, 0x2B	; 43
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	82 e0       	ldi	r24, 0x02	; 2
    1e58:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1e5a:	ea e2       	ldi	r30, 0x2A	; 42
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	88 e1       	ldi	r24, 0x18	; 24
    1e60:	80 83       	st	Z, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC |= (1<<URSEL) ;
    1e62:	a0 e4       	ldi	r26, 0x40	; 64
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e0 e4       	ldi	r30, 0x40	; 64
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	80 68       	ori	r24, 0x80	; 128
    1e6e:	8c 93       	st	X, r24
	UCSRC&=~(1<<UCPOL) ;
    1e70:	a0 e4       	ldi	r26, 0x40	; 64
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e0 e4       	ldi	r30, 0x40	; 64
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	8e 7f       	andi	r24, 0xFE	; 254
    1e7c:	8c 93       	st	X, r24

	/*
	 * parity bit UPM1:0 of UCSRC Register
	 */
	UCSRC=(UCSRC& 0xCF) | ((Config_Ptr->parity) << 4);
    1e7e:	a0 e4       	ldi	r26, 0x40	; 64
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e0 e4       	ldi	r30, 0x40	; 64
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	28 2f       	mov	r18, r24
    1e8a:	2f 7c       	andi	r18, 0xCF	; 207
    1e8c:	eb 81       	ldd	r30, Y+3	; 0x03
    1e8e:	fc 81       	ldd	r31, Y+4	; 0x04
    1e90:	81 81       	ldd	r24, Z+1	; 0x01
    1e92:	88 2f       	mov	r24, r24
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	82 95       	swap	r24
    1e98:	92 95       	swap	r25
    1e9a:	90 7f       	andi	r25, 0xF0	; 240
    1e9c:	98 27       	eor	r25, r24
    1e9e:	80 7f       	andi	r24, 0xF0	; 240
    1ea0:	98 27       	eor	r25, r24
    1ea2:	82 2b       	or	r24, r18
    1ea4:	8c 93       	st	X, r24
	/*
	* stop bit in USBS of UCSRC Register
	*/
	UCSRC=(UCSRC& 0xF7) | ((Config_Ptr->stop_bit) << 3);
    1ea6:	a0 e4       	ldi	r26, 0x40	; 64
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e0 e4       	ldi	r30, 0x40	; 64
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	28 2f       	mov	r18, r24
    1eb2:	27 7f       	andi	r18, 0xF7	; 247
    1eb4:	eb 81       	ldd	r30, Y+3	; 0x03
    1eb6:	fc 81       	ldd	r31, Y+4	; 0x04
    1eb8:	82 81       	ldd	r24, Z+2	; 0x02
    1eba:	88 2f       	mov	r24, r24
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	88 0f       	add	r24, r24
    1ec4:	99 1f       	adc	r25, r25
    1ec6:	88 0f       	add	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	82 2b       	or	r24, r18
    1ecc:	8c 93       	st	X, r24
	/*
	* data mode in UCSZ1:0 of UCSRC Register
     */
	UCSRC=(UCSRC& 0xF9) | (((Config_Ptr->bit_data) << 1) & 0x06);
    1ece:	a0 e4       	ldi	r26, 0x40	; 64
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	e0 e4       	ldi	r30, 0x40	; 64
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	28 2f       	mov	r18, r24
    1eda:	29 7f       	andi	r18, 0xF9	; 249
    1edc:	eb 81       	ldd	r30, Y+3	; 0x03
    1ede:	fc 81       	ldd	r31, Y+4	; 0x04
    1ee0:	80 81       	ld	r24, Z
    1ee2:	88 2f       	mov	r24, r24
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	86 70       	andi	r24, 0x06	; 6
    1eec:	82 2b       	or	r24, r18
    1eee:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    1ef0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ef2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ef4:	83 81       	ldd	r24, Z+3	; 0x03
    1ef6:	94 81       	ldd	r25, Z+4	; 0x04
    1ef8:	a5 81       	ldd	r26, Z+5	; 0x05
    1efa:	b6 81       	ldd	r27, Z+6	; 0x06
    1efc:	88 0f       	add	r24, r24
    1efe:	99 1f       	adc	r25, r25
    1f00:	aa 1f       	adc	r26, r26
    1f02:	bb 1f       	adc	r27, r27
    1f04:	88 0f       	add	r24, r24
    1f06:	99 1f       	adc	r25, r25
    1f08:	aa 1f       	adc	r26, r26
    1f0a:	bb 1f       	adc	r27, r27
    1f0c:	88 0f       	add	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	aa 1f       	adc	r26, r26
    1f12:	bb 1f       	adc	r27, r27
    1f14:	9c 01       	movw	r18, r24
    1f16:	ad 01       	movw	r20, r26
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	92 e1       	ldi	r25, 0x12	; 18
    1f1c:	aa e7       	ldi	r26, 0x7A	; 122
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	bc 01       	movw	r22, r24
    1f22:	cd 01       	movw	r24, r26
    1f24:	0e 94 b5 11 	call	0x236a	; 0x236a <__udivmodsi4>
    1f28:	da 01       	movw	r26, r20
    1f2a:	c9 01       	movw	r24, r18
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	9a 83       	std	Y+2, r25	; 0x02
    1f30:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1f32:	e0 e4       	ldi	r30, 0x40	; 64
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3a:	89 2f       	mov	r24, r25
    1f3c:	99 27       	eor	r25, r25
    1f3e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1f40:	e9 e2       	ldi	r30, 0x29	; 41
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
    1f46:	80 83       	st	Z, r24
}
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	08 95       	ret

00001f56 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	0f 92       	push	r0
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1f62:	eb e2       	ldi	r30, 0x2B	; 43
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	88 2f       	mov	r24, r24
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	80 72       	andi	r24, 0x20	; 32
    1f6e:	90 70       	andi	r25, 0x00	; 0
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	b9 f3       	breq	.-18     	; 0x1f62 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1f74:	ec e2       	ldi	r30, 0x2C	; 44
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1f7c:	0f 90       	pop	r0
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1f8c:	eb e2       	ldi	r30, 0x2B	; 43
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	88 23       	and	r24, r24
    1f94:	dc f7       	brge	.-10     	; 0x1f8c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    1f96:	ec e2       	ldi	r30, 0x2C	; 44
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
}
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret

00001fa2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	00 d0       	rcall	.+0      	; 0x1fa8 <UART_sendString+0x6>
    1fa8:	0f 92       	push	r0
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	9b 83       	std	Y+3, r25	; 0x03
    1fb0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1fb2:	19 82       	std	Y+1, r1	; 0x01
    1fb4:	0e c0       	rjmp	.+28     	; 0x1fd2 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	e2 0f       	add	r30, r18
    1fc4:	f3 1f       	adc	r31, r19
    1fc6:	80 81       	ld	r24, Z
    1fc8:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <UART_sendByte>
		i++;
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	8f 5f       	subi	r24, 0xFF	; 255
    1fd0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	28 2f       	mov	r18, r24
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	9b 81       	ldd	r25, Y+3	; 0x03
    1fdc:	fc 01       	movw	r30, r24
    1fde:	e2 0f       	add	r30, r18
    1fe0:	f3 1f       	adc	r31, r19
    1fe2:	80 81       	ld	r24, Z
    1fe4:	88 23       	and	r24, r24
    1fe6:	39 f7       	brne	.-50     	; 0x1fb6 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1ff4:	0f 93       	push	r16
    1ff6:	1f 93       	push	r17
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	00 d0       	rcall	.+0      	; 0x1ffe <UART_receiveString+0xa>
    1ffe:	0f 92       	push	r0
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
    2004:	9b 83       	std	Y+3, r25	; 0x03
    2006:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2008:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	8a 81       	ldd	r24, Y+2	; 0x02
    2012:	9b 81       	ldd	r25, Y+3	; 0x03
    2014:	8c 01       	movw	r16, r24
    2016:	02 0f       	add	r16, r18
    2018:	13 1f       	adc	r17, r19
    201a:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <UART_recieveByte>
    201e:	f8 01       	movw	r30, r16
    2020:	80 83       	st	Z, r24
    2022:	0f c0       	rjmp	.+30     	; 0x2042 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	8f 5f       	subi	r24, 0xFF	; 255
    2028:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	28 2f       	mov	r18, r24
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	8a 81       	ldd	r24, Y+2	; 0x02
    2032:	9b 81       	ldd	r25, Y+3	; 0x03
    2034:	8c 01       	movw	r16, r24
    2036:	02 0f       	add	r16, r18
    2038:	13 1f       	adc	r17, r19
    203a:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <UART_recieveByte>
    203e:	f8 01       	movw	r30, r16
    2040:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	28 2f       	mov	r18, r24
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	9b 81       	ldd	r25, Y+3	; 0x03
    204c:	fc 01       	movw	r30, r24
    204e:	e2 0f       	add	r30, r18
    2050:	f3 1f       	adc	r31, r19
    2052:	80 81       	ld	r24, Z
    2054:	83 32       	cpi	r24, 0x23	; 35
    2056:	31 f7       	brne	.-52     	; 0x2024 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	9b 81       	ldd	r25, Y+3	; 0x03
    2062:	fc 01       	movw	r30, r24
    2064:	e2 0f       	add	r30, r18
    2066:	f3 1f       	adc	r31, r19
    2068:	10 82       	st	Z, r1
}
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	1f 91       	pop	r17
    2076:	0f 91       	pop	r16
    2078:	08 95       	ret

0000207a <EEPROM_writeByte>:
 */
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	00 d0       	rcall	.+0      	; 0x2080 <EEPROM_writeByte+0x6>
    2080:	00 d0       	rcall	.+0      	; 0x2082 <EEPROM_writeByte+0x8>
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	9a 83       	std	Y+2, r25	; 0x02
    2088:	89 83       	std	Y+1, r24	; 0x01
    208a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    208c:	0e 94 3a 11 	call	0x2274	; 0x2274 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2090:	0e 94 92 11 	call	0x2324	; 0x2324 <TWI_getStatus>
    2094:	88 30       	cpi	r24, 0x08	; 8
    2096:	11 f0       	breq	.+4      	; 0x209c <EEPROM_writeByte+0x22>
        return ERROR;
    2098:	1c 82       	std	Y+4, r1	; 0x04
    209a:	28 c0       	rjmp	.+80     	; 0x20ec <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	9a 81       	ldd	r25, Y+2	; 0x02
    20a0:	80 70       	andi	r24, 0x00	; 0
    20a2:	97 70       	andi	r25, 0x07	; 7
    20a4:	88 0f       	add	r24, r24
    20a6:	89 2f       	mov	r24, r25
    20a8:	88 1f       	adc	r24, r24
    20aa:	99 0b       	sbc	r25, r25
    20ac:	91 95       	neg	r25
    20ae:	80 6a       	ori	r24, 0xA0	; 160
    20b0:	0e 94 55 11 	call	0x22aa	; 0x22aa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    20b4:	0e 94 92 11 	call	0x2324	; 0x2324 <TWI_getStatus>
    20b8:	88 31       	cpi	r24, 0x18	; 24
    20ba:	11 f0       	breq	.+4      	; 0x20c0 <EEPROM_writeByte+0x46>
        return ERROR;
    20bc:	1c 82       	std	Y+4, r1	; 0x04
    20be:	16 c0       	rjmp	.+44     	; 0x20ec <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	0e 94 55 11 	call	0x22aa	; 0x22aa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    20c6:	0e 94 92 11 	call	0x2324	; 0x2324 <TWI_getStatus>
    20ca:	88 32       	cpi	r24, 0x28	; 40
    20cc:	11 f0       	breq	.+4      	; 0x20d2 <EEPROM_writeByte+0x58>
        return ERROR;
    20ce:	1c 82       	std	Y+4, r1	; 0x04
    20d0:	0d c0       	rjmp	.+26     	; 0x20ec <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	0e 94 55 11 	call	0x22aa	; 0x22aa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    20d8:	0e 94 92 11 	call	0x2324	; 0x2324 <TWI_getStatus>
    20dc:	88 32       	cpi	r24, 0x28	; 40
    20de:	11 f0       	breq	.+4      	; 0x20e4 <EEPROM_writeByte+0x6a>
        return ERROR;
    20e0:	1c 82       	std	Y+4, r1	; 0x04
    20e2:	04 c0       	rjmp	.+8      	; 0x20ec <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    20e4:	0e 94 4a 11 	call	0x2294	; 0x2294 <TWI_stop>

    return SUCCESS;
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	8c 83       	std	Y+4, r24	; 0x04
    20ec:	8c 81       	ldd	r24, Y+4	; 0x04
}
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	08 95       	ret

000020fc <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	00 d0       	rcall	.+0      	; 0x2102 <EEPROM_readByte+0x6>
    2102:	00 d0       	rcall	.+0      	; 0x2104 <EEPROM_readByte+0x8>
    2104:	0f 92       	push	r0
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
    210a:	9a 83       	std	Y+2, r25	; 0x02
    210c:	89 83       	std	Y+1, r24	; 0x01
    210e:	7c 83       	std	Y+4, r23	; 0x04
    2110:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2112:	0e 94 3a 11 	call	0x2274	; 0x2274 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2116:	0e 94 92 11 	call	0x2324	; 0x2324 <TWI_getStatus>
    211a:	88 30       	cpi	r24, 0x08	; 8
    211c:	11 f0       	breq	.+4      	; 0x2122 <EEPROM_readByte+0x26>
        return ERROR;
    211e:	1d 82       	std	Y+5, r1	; 0x05
    2120:	44 c0       	rjmp	.+136    	; 0x21aa <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	9a 81       	ldd	r25, Y+2	; 0x02
    2126:	80 70       	andi	r24, 0x00	; 0
    2128:	97 70       	andi	r25, 0x07	; 7
    212a:	88 0f       	add	r24, r24
    212c:	89 2f       	mov	r24, r25
    212e:	88 1f       	adc	r24, r24
    2130:	99 0b       	sbc	r25, r25
    2132:	91 95       	neg	r25
    2134:	80 6a       	ori	r24, 0xA0	; 160
    2136:	0e 94 55 11 	call	0x22aa	; 0x22aa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    213a:	0e 94 92 11 	call	0x2324	; 0x2324 <TWI_getStatus>
    213e:	88 31       	cpi	r24, 0x18	; 24
    2140:	11 f0       	breq	.+4      	; 0x2146 <EEPROM_readByte+0x4a>
        return ERROR;
    2142:	1d 82       	std	Y+5, r1	; 0x05
    2144:	32 c0       	rjmp	.+100    	; 0x21aa <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	0e 94 55 11 	call	0x22aa	; 0x22aa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    214c:	0e 94 92 11 	call	0x2324	; 0x2324 <TWI_getStatus>
    2150:	88 32       	cpi	r24, 0x28	; 40
    2152:	11 f0       	breq	.+4      	; 0x2158 <EEPROM_readByte+0x5c>
        return ERROR;
    2154:	1d 82       	std	Y+5, r1	; 0x05
    2156:	29 c0       	rjmp	.+82     	; 0x21aa <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    2158:	0e 94 3a 11 	call	0x2274	; 0x2274 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    215c:	0e 94 92 11 	call	0x2324	; 0x2324 <TWI_getStatus>
    2160:	80 31       	cpi	r24, 0x10	; 16
    2162:	11 f0       	breq	.+4      	; 0x2168 <EEPROM_readByte+0x6c>
        return ERROR;
    2164:	1d 82       	std	Y+5, r1	; 0x05
    2166:	21 c0       	rjmp	.+66     	; 0x21aa <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	9a 81       	ldd	r25, Y+2	; 0x02
    216c:	80 70       	andi	r24, 0x00	; 0
    216e:	97 70       	andi	r25, 0x07	; 7
    2170:	88 0f       	add	r24, r24
    2172:	89 2f       	mov	r24, r25
    2174:	88 1f       	adc	r24, r24
    2176:	99 0b       	sbc	r25, r25
    2178:	91 95       	neg	r25
    217a:	81 6a       	ori	r24, 0xA1	; 161
    217c:	0e 94 55 11 	call	0x22aa	; 0x22aa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    2180:	0e 94 92 11 	call	0x2324	; 0x2324 <TWI_getStatus>
    2184:	80 34       	cpi	r24, 0x40	; 64
    2186:	11 f0       	breq	.+4      	; 0x218c <EEPROM_readByte+0x90>
        return ERROR;
    2188:	1d 82       	std	Y+5, r1	; 0x05
    218a:	0f c0       	rjmp	.+30     	; 0x21aa <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    218c:	0e 94 7f 11 	call	0x22fe	; 0x22fe <TWI_readByteWithNACK>
    2190:	eb 81       	ldd	r30, Y+3	; 0x03
    2192:	fc 81       	ldd	r31, Y+4	; 0x04
    2194:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    2196:	0e 94 92 11 	call	0x2324	; 0x2324 <TWI_getStatus>
    219a:	88 35       	cpi	r24, 0x58	; 88
    219c:	11 f0       	breq	.+4      	; 0x21a2 <EEPROM_readByte+0xa6>
        return ERROR;
    219e:	1d 82       	std	Y+5, r1	; 0x05
    21a0:	04 c0       	rjmp	.+8      	; 0x21aa <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    21a2:	0e 94 4a 11 	call	0x2294	; 0x2294 <TWI_stop>

    return SUCCESS;
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	8d 83       	std	Y+5, r24	; 0x05
    21aa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	cf 91       	pop	r28
    21b8:	df 91       	pop	r29
    21ba:	08 95       	ret

000021bc <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    21bc:	ef 92       	push	r14
    21be:	ff 92       	push	r15
    21c0:	0f 93       	push	r16
    21c2:	1f 93       	push	r17
    21c4:	df 93       	push	r29
    21c6:	cf 93       	push	r28
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <TWI_init+0xe>
    21ca:	0f 92       	push	r0
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	9b 83       	std	Y+3, r25	; 0x03
    21d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 bitRate=0;
    21d4:	19 82       	std	Y+1, r1	; 0x01
	/*data sheet formula*/
	bitRate = (((F_CPU)-((Config_Ptr -> bit_rate)* 16))/(2*(Config_Ptr -> bit_rate)));
    21d6:	ea 81       	ldd	r30, Y+2	; 0x02
    21d8:	fb 81       	ldd	r31, Y+3	; 0x03
    21da:	21 81       	ldd	r18, Z+1	; 0x01
    21dc:	32 81       	ldd	r19, Z+2	; 0x02
    21de:	43 81       	ldd	r20, Z+3	; 0x03
    21e0:	54 81       	ldd	r21, Z+4	; 0x04
    21e2:	80 e2       	ldi	r24, 0x20	; 32
    21e4:	91 ea       	ldi	r25, 0xA1	; 161
    21e6:	a7 e0       	ldi	r26, 0x07	; 7
    21e8:	b0 e0       	ldi	r27, 0x00	; 0
    21ea:	82 1b       	sub	r24, r18
    21ec:	93 0b       	sbc	r25, r19
    21ee:	a4 0b       	sbc	r26, r20
    21f0:	b5 0b       	sbc	r27, r21
    21f2:	88 0f       	add	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	aa 1f       	adc	r26, r26
    21f8:	bb 1f       	adc	r27, r27
    21fa:	88 0f       	add	r24, r24
    21fc:	99 1f       	adc	r25, r25
    21fe:	aa 1f       	adc	r26, r26
    2200:	bb 1f       	adc	r27, r27
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	aa 1f       	adc	r26, r26
    2208:	bb 1f       	adc	r27, r27
    220a:	88 0f       	add	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	aa 1f       	adc	r26, r26
    2210:	bb 1f       	adc	r27, r27
    2212:	7c 01       	movw	r14, r24
    2214:	8d 01       	movw	r16, r26
    2216:	ea 81       	ldd	r30, Y+2	; 0x02
    2218:	fb 81       	ldd	r31, Y+3	; 0x03
    221a:	81 81       	ldd	r24, Z+1	; 0x01
    221c:	92 81       	ldd	r25, Z+2	; 0x02
    221e:	a3 81       	ldd	r26, Z+3	; 0x03
    2220:	b4 81       	ldd	r27, Z+4	; 0x04
    2222:	9c 01       	movw	r18, r24
    2224:	ad 01       	movw	r20, r26
    2226:	22 0f       	add	r18, r18
    2228:	33 1f       	adc	r19, r19
    222a:	44 1f       	adc	r20, r20
    222c:	55 1f       	adc	r21, r21
    222e:	c8 01       	movw	r24, r16
    2230:	b7 01       	movw	r22, r14
    2232:	0e 94 b5 11 	call	0x236a	; 0x236a <__udivmodsi4>
    2236:	da 01       	movw	r26, r20
    2238:	c9 01       	movw	r24, r18
    223a:	89 83       	std	Y+1, r24	; 0x01
	if(bitRate >= 0){
		TWBR = bitRate;
    223c:	e0 e2       	ldi	r30, 0x20	; 32
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	80 83       	st	Z, r24
		bitRate = ( ( (F_CPU) - ( (400000) * 16) ) / (2 * (400000) ) );
		TWBR = bitRate;
	}

	/* using zero pre-scaler  */
	TWSR = 0x00;
    2244:	e1 e2       	ldi	r30, 0x21	; 33
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	10 82       	st	Z, r1

	/* add slave address*/
	TWAR = ((Config_Ptr->address) << 1);; // my address = 0x01 :)
    224a:	a2 e2       	ldi	r26, 0x22	; 34
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	ea 81       	ldd	r30, Y+2	; 0x02
    2250:	fb 81       	ldd	r31, Y+3	; 0x03
    2252:	80 81       	ld	r24, Z
    2254:	88 0f       	add	r24, r24
    2256:	8c 93       	st	X, r24

	TWCR = (1<<TWEN); /* enable TWI */
    2258:	e6 e5       	ldi	r30, 0x56	; 86
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	84 e0       	ldi	r24, 0x04	; 4
    225e:	80 83       	st	Z, r24
}
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	1f 91       	pop	r17
    226c:	0f 91       	pop	r16
    226e:	ff 90       	pop	r15
    2270:	ef 90       	pop	r14
    2272:	08 95       	ret

00002274 <TWI_start>:

void TWI_start(void)
{
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    227c:	e6 e5       	ldi	r30, 0x56	; 86
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	84 ea       	ldi	r24, 0xA4	; 164
    2282:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2284:	e6 e5       	ldi	r30, 0x56	; 86
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	88 23       	and	r24, r24
    228c:	dc f7       	brge	.-10     	; 0x2284 <TWI_start+0x10>
}
    228e:	cf 91       	pop	r28
    2290:	df 91       	pop	r29
    2292:	08 95       	ret

00002294 <TWI_stop>:

void TWI_stop(void)
{
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    229c:	e6 e5       	ldi	r30, 0x56	; 86
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	84 e9       	ldi	r24, 0x94	; 148
    22a2:	80 83       	st	Z, r24
}
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	0f 92       	push	r0
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
    22b4:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    22b6:	e3 e2       	ldi	r30, 0x23	; 35
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    22be:	e6 e5       	ldi	r30, 0x56	; 86
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	84 e8       	ldi	r24, 0x84	; 132
    22c4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    22c6:	e6 e5       	ldi	r30, 0x56	; 86
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	88 23       	and	r24, r24
    22ce:	dc f7       	brge	.-10     	; 0x22c6 <TWI_writeByte+0x1c>
}
    22d0:	0f 90       	pop	r0
    22d2:	cf 91       	pop	r28
    22d4:	df 91       	pop	r29
    22d6:	08 95       	ret

000022d8 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    22d8:	df 93       	push	r29
    22da:	cf 93       	push	r28
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    22e0:	e6 e5       	ldi	r30, 0x56	; 86
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	84 ec       	ldi	r24, 0xC4	; 196
    22e6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    22e8:	e6 e5       	ldi	r30, 0x56	; 86
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	88 23       	and	r24, r24
    22f0:	dc f7       	brge	.-10     	; 0x22e8 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    22f2:	e3 e2       	ldi	r30, 0x23	; 35
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
}
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2306:	e6 e5       	ldi	r30, 0x56	; 86
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	84 e8       	ldi	r24, 0x84	; 132
    230c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    230e:	e6 e5       	ldi	r30, 0x56	; 86
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	88 23       	and	r24, r24
    2316:	dc f7       	brge	.-10     	; 0x230e <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2318:	e3 e2       	ldi	r30, 0x23	; 35
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
}
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	0f 92       	push	r0
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    232e:	e1 e2       	ldi	r30, 0x21	; 33
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	88 7f       	andi	r24, 0xF8	; 248
    2336:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2338:	89 81       	ldd	r24, Y+1	; 0x01
}
    233a:	0f 90       	pop	r0
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	08 95       	ret

00002342 <__udivmodhi4>:
    2342:	aa 1b       	sub	r26, r26
    2344:	bb 1b       	sub	r27, r27
    2346:	51 e1       	ldi	r21, 0x11	; 17
    2348:	07 c0       	rjmp	.+14     	; 0x2358 <__udivmodhi4_ep>

0000234a <__udivmodhi4_loop>:
    234a:	aa 1f       	adc	r26, r26
    234c:	bb 1f       	adc	r27, r27
    234e:	a6 17       	cp	r26, r22
    2350:	b7 07       	cpc	r27, r23
    2352:	10 f0       	brcs	.+4      	; 0x2358 <__udivmodhi4_ep>
    2354:	a6 1b       	sub	r26, r22
    2356:	b7 0b       	sbc	r27, r23

00002358 <__udivmodhi4_ep>:
    2358:	88 1f       	adc	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	5a 95       	dec	r21
    235e:	a9 f7       	brne	.-22     	; 0x234a <__udivmodhi4_loop>
    2360:	80 95       	com	r24
    2362:	90 95       	com	r25
    2364:	bc 01       	movw	r22, r24
    2366:	cd 01       	movw	r24, r26
    2368:	08 95       	ret

0000236a <__udivmodsi4>:
    236a:	a1 e2       	ldi	r26, 0x21	; 33
    236c:	1a 2e       	mov	r1, r26
    236e:	aa 1b       	sub	r26, r26
    2370:	bb 1b       	sub	r27, r27
    2372:	fd 01       	movw	r30, r26
    2374:	0d c0       	rjmp	.+26     	; 0x2390 <__udivmodsi4_ep>

00002376 <__udivmodsi4_loop>:
    2376:	aa 1f       	adc	r26, r26
    2378:	bb 1f       	adc	r27, r27
    237a:	ee 1f       	adc	r30, r30
    237c:	ff 1f       	adc	r31, r31
    237e:	a2 17       	cp	r26, r18
    2380:	b3 07       	cpc	r27, r19
    2382:	e4 07       	cpc	r30, r20
    2384:	f5 07       	cpc	r31, r21
    2386:	20 f0       	brcs	.+8      	; 0x2390 <__udivmodsi4_ep>
    2388:	a2 1b       	sub	r26, r18
    238a:	b3 0b       	sbc	r27, r19
    238c:	e4 0b       	sbc	r30, r20
    238e:	f5 0b       	sbc	r31, r21

00002390 <__udivmodsi4_ep>:
    2390:	66 1f       	adc	r22, r22
    2392:	77 1f       	adc	r23, r23
    2394:	88 1f       	adc	r24, r24
    2396:	99 1f       	adc	r25, r25
    2398:	1a 94       	dec	r1
    239a:	69 f7       	brne	.-38     	; 0x2376 <__udivmodsi4_loop>
    239c:	60 95       	com	r22
    239e:	70 95       	com	r23
    23a0:	80 95       	com	r24
    23a2:	90 95       	com	r25
    23a4:	9b 01       	movw	r18, r22
    23a6:	ac 01       	movw	r20, r24
    23a8:	bd 01       	movw	r22, r26
    23aa:	cf 01       	movw	r24, r30
    23ac:	08 95       	ret

000023ae <__prologue_saves__>:
    23ae:	2f 92       	push	r2
    23b0:	3f 92       	push	r3
    23b2:	4f 92       	push	r4
    23b4:	5f 92       	push	r5
    23b6:	6f 92       	push	r6
    23b8:	7f 92       	push	r7
    23ba:	8f 92       	push	r8
    23bc:	9f 92       	push	r9
    23be:	af 92       	push	r10
    23c0:	bf 92       	push	r11
    23c2:	cf 92       	push	r12
    23c4:	df 92       	push	r13
    23c6:	ef 92       	push	r14
    23c8:	ff 92       	push	r15
    23ca:	0f 93       	push	r16
    23cc:	1f 93       	push	r17
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
    23d6:	ca 1b       	sub	r28, r26
    23d8:	db 0b       	sbc	r29, r27
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	de bf       	out	0x3e, r29	; 62
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	cd bf       	out	0x3d, r28	; 61
    23e4:	09 94       	ijmp

000023e6 <__epilogue_restores__>:
    23e6:	2a 88       	ldd	r2, Y+18	; 0x12
    23e8:	39 88       	ldd	r3, Y+17	; 0x11
    23ea:	48 88       	ldd	r4, Y+16	; 0x10
    23ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    23ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    23f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    23f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    23f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    23f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    23f8:	b9 84       	ldd	r11, Y+9	; 0x09
    23fa:	c8 84       	ldd	r12, Y+8	; 0x08
    23fc:	df 80       	ldd	r13, Y+7	; 0x07
    23fe:	ee 80       	ldd	r14, Y+6	; 0x06
    2400:	fd 80       	ldd	r15, Y+5	; 0x05
    2402:	0c 81       	ldd	r16, Y+4	; 0x04
    2404:	1b 81       	ldd	r17, Y+3	; 0x03
    2406:	aa 81       	ldd	r26, Y+2	; 0x02
    2408:	b9 81       	ldd	r27, Y+1	; 0x01
    240a:	ce 0f       	add	r28, r30
    240c:	d1 1d       	adc	r29, r1
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	f8 94       	cli
    2412:	de bf       	out	0x3e, r29	; 62
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	cd bf       	out	0x3d, r28	; 61
    2418:	ed 01       	movw	r28, r26
    241a:	08 95       	ret

0000241c <_exit>:
    241c:	f8 94       	cli

0000241e <__stop_program>:
    241e:	ff cf       	rjmp	.-2      	; 0x241e <__stop_program>
