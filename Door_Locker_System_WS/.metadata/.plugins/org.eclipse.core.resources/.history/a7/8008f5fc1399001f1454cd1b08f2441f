/*
 * twi.c
 *
 *  Created on: Nov 2, 2024
 *      Author: Moham
 */

#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>
// twi_config =
			//{ 0x01, 400000};
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
	uint8 bitRate=0;
	/*data sheet formula*/
	bitRate = (((F_CPU)-((Config_Ptr -> bit_rate)* 16))/(2*(Config_Ptr -> bit_rate)));
	if(bitRate >= 0){
		TWBR = bitRate;
	}
	 /* Check BitRate   < 0 and  check  processor clock  bigger than 1 MHz*/
	else if ( (F_CPU > 1000000) && (bitRate < 0) )
	{
		/* Reduce BitRate to Normal Mode  */
		bitRate = ( ( (F_CPU) - ( (400000) * 16) ) / (2 * (400000) ) );
		TWBR = bitRate;
	}

	/* using zero pre-scaler  */
	TWSR = 0x00;

	/* add slave address*/
	TWAR = ((Config_Ptr->address) << 1);; // my address = 0x01 :)

	TWCR = (1<<TWEN); /* enable TWI */
}

void TWI_start(void)
{
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
}

void TWI_stop(void)
{
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
}

void TWI_writeByte(uint8 data)
{
    /* Put data On TWI data Register */
    TWDR = data;
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
}

uint8 TWI_readByteWithACK(void)
{
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    /* Read Data */
    return TWDR;
}

uint8 TWI_readByteWithNACK(void)
{
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    /* Read Data */
    return TWDR;
}

uint8 TWI_getStatus(void)
{
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    return status;
}


