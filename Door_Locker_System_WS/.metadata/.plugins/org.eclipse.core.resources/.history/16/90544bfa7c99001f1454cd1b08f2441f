/*
 * HMI_ECU.c
 *
 *  Created on: Nov 1, 2024
 *      Author: Moham
 */

#include "std_types.h"
#include "uart.h"
#include "Keypad.h"
#include "LCD.h"
#include <util/delay.h>
#include "Timer.h"
#include<string.h>
/***********************************
 *       Definitions                                  *
 **********************************/
static volatile uint8 g_tick_number = 0;
#define SLAVE_ADDRESS        1
#define BIT_RATE             400000
#define BAUD_RATE            9600
#define CREATE_NEW_PASSWORD  0x01
#define PASSWORD_LENGTH      5
#define synchronize          0xA0
#define CHECK_OLD_PASSWORD  0x02
#define OPEN_DOOR           0x03
#define CORRECT_PASSWORD    0x04
#define WRONG_PASSWORD      0x05
#define FOR_ONE_SECOND_COMPARE_VALUE 		31249
#define TIMER_INITIAL_VALUE 				0
#define PEOPLE_ENTERING     0x06
#define NO_PEOPLE_ENTERING  0x07
#define MAX_WRONG_ATTEMPT   3
#define BUZZER_ON           0X08
#define BUZZER_OFF          0X09
#define CHANGE_OLD_PASSWORD 0x0A
#define EEPROM_FIRST_ADDRESS  	0x0311
/****************************
 *    Functions Prototypes
 ***************************/
//funtion return if two password equal or not
uint8 Pass_Cmp(uint8 password1[], uint8 password2[]);
//get 5 digits length password from user
void Read_Password(uint8 password[]);
//functiongets 2 password from user and make sure they are equal then send any of them to control ecu to store it in eeprom
uint8 new_Password();
//send password to control ecu
void Send_Password(uint8 password[]);
//15 sec door delay
void Door_Delay(void);
//60 sec buzzer delay
void Buzzer_Delay(void);
//call back function
void countOneSecond(void);
/************************************
 *        main
 ************************************/
int main(){
	/*initialization function */
	uint8 password_exist=0,password[PASSWORD_LENGTH],option=0,wrong_pass_attempt=0,check=0,people=0,door_opened=0,password_changed=0,first_time=0;
	SREG |= (1<<7);
	UART_ConfigType uart_config = {UART_DATA_8_BITS,UART_NO_PARITY, UART_ONE_STOP_BIT,BAUD_RATE};//uart config
	UART_init(&uart_config);
	LCD_init();
	LCD_clearScreen();
	LCD_displayString("Door Lock System");
	_delay_ms(250);
	LCD_clearScreen();

	UART_sendByte(CREATE_NEW_PASSWORD);//tell control ecu the new state
	while(password_exist==0)//add first password
	{
		password_exist=new_Password();
	}

	while(1)
	{
		LCD_clearScreen();
		LCD_displayString("+ : Open Door");
		LCD_moveCursor(1, 0);
		LCD_displayString("- : Change Pass");
		option = KEYPAD_getPressedKey();

		if (option == '+') {
			wrong_pass_attempt=0;

			UART_sendByte(OPEN_DOOR);//tell control ecu the new state
			//loop until enter correct password or 3 wrong password

			while(door_opened==0 && wrong_pass_attempt<MAX_WRONG_ATTEMPT)
			{

				LCD_clearScreen();
				LCD_displayString("plz enter pass:");
				LCD_moveCursor(1, 0);
				Read_Password(password);//store user input password
				Send_Password(password);//send this pass word to be compared with eeprom password value
				_delay_ms(100);
				check=UART_recieveByte();//control ecu return if they are equal or not
				if(check == CORRECT_PASSWORD) {
					wrong_pass_attempt=0;//if equal open the door
					LCD_clearScreen();
					LCD_displayString("Door is Unlocking");
					LCD_moveCursor(1, 0);
					LCD_displayString("   Please wait   ");
					Door_Delay();//15 sec door delay


					while(1)//loop until there is no one standing on doorIpir sensor value=0)
					{
						people=UART_recieveByte();
						if(people== PEOPLE_ENTERING && first_time==0)
						{
							LCD_clearScreen();
							LCD_displayString(" wait for People");
							LCD_moveCursor(1, 0);
							LCD_displayString("   To Enter  ");
							_delay_ms(250);
							first_time=1;
						}
						else if(people== NO_PEOPLE_ENTERING){
							break;
						}

					}

					LCD_clearScreen();
					LCD_displayString("  Door is locking   ");
					Door_Delay();//delay fro door locking
					door_opened=1;
				}
				else if (check == WRONG_PASSWORD) {
					wrong_pass_attempt++;//count user wrong password in a row
					if (wrong_pass_attempt == MAX_WRONG_ATTEMPT) {//if entered 3 wrong in arow buzzer trun on and lock system
						UART_sendByte(BUZZER_ON);//tell control ecu
						LCD_clearScreen();
						LCD_displayString("  System LOCKED  ");
						LCD_moveCursor(1, 0);
						LCD_displayString("Wait for 1 min");
						Buzzer_Delay();
					} else {
						UART_sendByte(BUZZER_OFF);//tell control ecu
					}
				}
			}
			door_opened=0;
			wrong_pass_attempt=0;
		}

		else if (option == '-') {
			//UART_sendByte(CHECK_OLD_PASSWORD);
			wrong_pass_attempt=0;
			UART_sendByte(CHANGE_OLD_PASSWORD);//tell control ecu new state
			//loop until enter correct password or 3 wrong password
			while(password_changed==0 && wrong_pass_attempt<MAX_WRONG_ATTEMPT)
			{
				LCD_clearScreen();
				LCD_displayString("plz enter old");
				LCD_moveCursor(1, 0);
				LCD_displayString("pass : ");
				Read_Password(password);//store user input password
				Send_Password(password);//send this pass word to be compared with eeprom password value
				check=UART_recieveByte();//control ecu return if they are equal or not
				if(check == CORRECT_PASSWORD) {
					wrong_pass_attempt=0;
					password_exist=0;
					//if they are equal add new password and store it in eeprom
					while(password_exist==0)
					{
						password_exist=new_Password();
					}
					password_changed=1;
				}
				else if (check == WRONG_PASSWORD) {
					wrong_pass_attempt++;//count user wrong password in a row
					if (wrong_pass_attempt == MAX_WRONG_ATTEMPT) {//if entered 3 wrong in arow buzzer trun on and lock system
						UART_sendByte(BUZZER_ON);//tell control ecu
						LCD_clearScreen();
						LCD_displayString("  System LOCKED  ");
						LCD_moveCursor(1, 0);
						LCD_displayString("Wait for 1 min");
						Buzzer_Delay();
					} else {
						UART_sendByte(BUZZER_OFF);//tell control ecu
					}
				}
			}
			wrong_pass_attempt=0;
			password_changed=0;
		}
	}
}
//functiongets 2 password from user and make sure they are equal then send any of them to control ecu to store it in eeprom
uint8 new_Password() {
	uint8 Password_first_time[PASSWORD_LENGTH],Password_second_time[PASSWORD_LENGTH],flag;
	LCD_clearScreen();
	LCD_displayString("Plz Enter Pass:");
	LCD_moveCursor(1, 0);
	Read_Password(Password_first_time);
	LCD_clearScreen();
	LCD_displayString("Plz re-enter the");
	LCD_moveCursor(1, 0);
	LCD_displayString("same pass:");
	Read_Password(Password_second_time);
	LCD_clearScreen();
	flag=Pass_Cmp(Password_first_time,Password_second_time);
	if(flag)
	{
		Send_Password(Password_second_time);
		_delay_ms(250);
		return 1;
	}
	return 0;
}
//funtion return if two password equal or not
uint8 Pass_Cmp(uint8 password1[], uint8 password2[]) {
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
		if (password1[i] != password2[i]) {
			return 0;
		}
	}
	return 1;
}
//get 5 digits length password from user
void Read_Password(uint8 password[]) {
	uint8 i = 0;
	uint8 temp;
	while (i < PASSWORD_LENGTH) {
		temp = KEYPAD_getPressedKey();
		_delay_ms(250); /* Press time */
		if (temp >= 0 && temp <= 9) {
			password[i] = temp;
			LCD_displayCharacter('*');
			i++;
		}
	}
	while (KEYPAD_getPressedKey() != '#');
}
//send password to control ecu
void Send_Password(uint8 password[]) {
	uint8 i = 0;
	while (i < PASSWORD_LENGTH) {
		while (UART_recieveByte() != synchronize);
		UART_sendByte(password[i]);
		i++;
	}
}
//15 sec door delay
void Door_Delay(void)
{
	Timer_ConfigType timer_config = { TIMER_INITIAL_VALUE,FOR_ONE_SECOND_COMPARE_VALUE, TIMER1, F_CPU_div_256, CTC_MODE };
	Timer_setCallBack(countOneSecond, TIMER1);
	TIMER_init(&timer_config);
	while (g_tick_number < 5);
	g_tick_number = 0;
	Timer_deInit(TIMER1);

}
//60 sec buzzer delay
void Buzzer_Delay(void)
{
	Timer_ConfigType timer_config = { TIMER_INITIAL_VALUE,FOR_ONE_SECOND_COMPARE_VALUE, TIMER1, F_CPU_div_256, CTC_MODE };
	Timer_setCallBack(countOneSecond, TIMER1);
	TIMER_init(&timer_config);
	while (g_tick_number < 10);
	g_tick_number = 0;
	Timer_deInit(TIMER1);

}
//call back function
void countOneSecond(void) {
	g_tick_number++;/*called every 1 sec*/
}
